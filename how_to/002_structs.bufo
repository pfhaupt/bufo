// Structures are a simple, but important addition to any programming language, as they allow
// programmers to model complex data of any format.
// Structures can be declared using the `struct` keyword, must have a name, and contain 0 or
// more fields.

import "prelude.bufo"; // assert

func main(argc: i32, argv: &&char) -> i32 {
    showcase1();
    showcase2();
    showcase3();
    return 0;
}

struct Point {
    a: i32;
    b: i32;
}

// structs can be empty
struct Empty { }

// Initializing a struct is possible through various means
func showcase1() {
    let empty = Empty { };
    // Using the sizeof expression you can get the size of any type in bytes
    assert(sizeof Empty == 0);
    assert(sizeof Point == 8);
    assert(sizeof i32 == 4); // i32 =   signed 32bit integer
    assert(sizeof u8 == 1);  // u8  = unsigned  8bit integer

    // Provide a value for every field
    let a = Point {
        a: 15,
        b: 12
    };
    assert(a.a == 15);
    assert(a.b == 12);

    // ...or zero-initialize some fields
    let b = Point {
        a: 12
    };
    assert(b.a == 12);
    assert(b.b == 0);

    // ...or all of them
    let c = Point { };
    assert(c.a == 0);
    assert(c.b == 0);

    // ...in which case you can also use the keyword `blank`.
    c = blank;
    assert(c.a == 0);
    assert(c.b == 0);

    // compiler error: Not enough type information with the given context
    // let q = blank;

    // you can specify the type after the name to add context
    let d: Point = blank;
    assert(d.a == 0);
    assert(d.b == 0);
}

// Structs can be as complex as they need to be, you can store anything in them, except for circular references.
struct Function {
    // you can store functions in fields
    callback: func (u32) -> u32;

    // you can store arrays in fields
    data: [u8; 1024];

    // you can't store the struct in itself, as the size of a struct is the sum of all its fields
    // -> including itself would make it recursive
    // fn: Function;

    // but you could store a pointer to another instance
    neighbor: &Function;
}

func square(a: u32) -> u32 {
    return a * a;
}

func showcase2() {
    let f = Function {
        callback: square,
        // creates an array of 1024 bytes, and fills it with zeroes
        // technically not necessary, as omitting the field does the same
        data: blank,
    };
    // compiler error: Missing argument for call
    // f.callback();

    // runtime error: Null-Pointer Dereference
    // *f.neighbor = Function { };

    let s = f.callback(5);
    assert(s == 25);
}

// All structures must have a unique name
struct Vector {
    x: u32;
}
// compiler error: Vector already declared above
// struct Vector {
//     x: i32;
// }

struct FloatVector {
    x: f32;
    y: f32;
}

struct IntVector {
    x: i32;
    y: i32;
}

func get_vector() -> FloatVector {
    return FloatVector {
        x: 12,
    };
}

func get_vector() -> IntVector {
    return IntVector {
        x: 7,
    };
}

// The compiler attempts to infer the proper type even for complicated and ambiguous scenarios
func showcase3() {
    // <something>.x == i32
    let a: i32 = get_vector().x;
    assert(a == 7);

    // <something>.x == f32
    let b: f32 = get_vector().x;
    assert(b == 12);
}

