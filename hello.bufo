
// Assuming a standalone release from e.g. https://github.com/raysan5/raylib/releases/tag/5.5
// copied into the ./raylib/ subdirectory, this program should just work:tm: on Windows when
// compiled using `bufo.exe hello.bufo hello.exe`

// Bonus points if you have a copy of `metal_pipe.wav` floating around nearby. 

@os(WINDOWS)
compiler_flags {
    library: "raylib";
    libpath: "./raylib/lib/";
    library: "OpenGL32";
    library: "msvcrt";
    library: "Gdi32";
    library: "WinMM";
    library: "kernel32";
    library: "shell32";
    library: "User32";
    linker: "/NODEFAULTLIB:libcmt";
}

@os(LINUX)
compiler_flags {
    libpath: "./raylib/lib/";
    library: ":libraylib.a";
    library: "m";
}

import "prelude.bufo";

struct Color {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

struct Image {
    data: Any;
    width: i32;
    height: i32;
    mipmaps: i32;
    format: i32;
}

struct AudioStream {
    buffer: Any;
    processor: Any;

    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
}

struct Sound {
    stream: AudioStream;
    frameCount: u32;
}

struct Wave {
    frameCount: u32;
    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
    data: Any;
}

struct Vector2 {
    x: f32;
    y: f32;
}

@extern("InitWindow") func InitWindow(width: i32, height: i32, title: &char);
@extern("InitAudioDevice") func InitAudioDevice();
@extern("WindowShouldClose") func WindowShouldClose() -> bool;
@extern("BeginDrawing") func BeginDrawing();
@extern("EndDrawing") func EndDrawing();
@extern("ClearBackground") func ClearBackground(c: Color);
@extern("DrawRectangleV") func DrawRectangleV(pos: Vector2, size: Vector2, col: Color);
@extern("ColorFromHSV") func ColorFromHSV(h: f32, s: f32, v: f32) -> Color;
@extern("GetColor") func GetColor(val: u32) -> Color;
@extern("LoadImageFromScreen") func LoadImageFromScreen() -> Image;
@extern("ExportImage") func ExportImage(i: Image, name: &char) -> bool;
@extern("PlaySound") func PlaySound(sound: Sound);
@extern("LoadSound") func LoadSound(fileName: &char) -> Sound;
@extern("IsSoundValid") func IsSoundValid(sound: Sound) -> bool;
@extern("LoadWave") func LoadWave(fileName: &char) -> Wave;
@extern("LoadSoundFromWave") func LoadSoundFromWave(wave: Wave) -> Sound;
@extern("SetSoundVolume") func SetSoundVolume(sound: Sound, volume: f32);
@extern("GetTime") func GetTime() -> f64;
@extern("SetTargetFPS") func SetTargetFPS(fps: i32);

func main(argc: i32, argv: &&char) -> i32 {
    comptime WIDTH: i32 = 800;
    comptime HEIGHT: i32 = 600;
    comptime RW: f32 = 150;
    comptime RH: f32 = 150;
    InitWindow(WIDTH, HEIGHT, "Hello from bufo!");
    InitAudioDevice();
    comptime FPS: i32 = 60;
    comptime PixelPerSecond: i32 = 200;
    comptime PixelPerFrame: f32 = PixelPerSecond as f32 / FPS as f32;
    SetTargetFPS(FPS);
    let w = LoadWave("./metal_pipe.wav");
    let s = LoadSoundFromWave(w);
    if (IsSoundValid(s)) {
        SetSoundVolume(s, 20/100);
        PlaySound(s);
    }
    let x: f32 = 0;
    let y: f32 = 0;
    let dx: f32 = 1;
    let dy: f32 = 2;
    while (!WindowShouldClose()) {
        BeginDrawing();
        // 0x181818ff
        ClearBackground(GetColor(404232447));
        DrawRectangleV(
            Vector2 { x: x, y: y },
            Vector2 { x: RW, y: RH },
            ColorFromHSV((50 * GetTime() as f32) % 360, 1, 1)
        );
        EndDrawing();
        let nx = x + dx * PixelPerSecond as f32 / FPS as f32;
        let ny = y + dy * PixelPerSecond as f32 / FPS as f32;
        if (nx + RW >= WIDTH as f32 || nx <= 0) dx = dx * -1;
        else x = nx;
        if (ny + RH >= HEIGHT as f32 || ny <= 0) dy = dy * -1;
        else y = ny;
    }
    return 0;
}
