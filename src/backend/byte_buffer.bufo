
import "prelude.bufo";
import "libc.bufo";

@os(WINDOWS) import "winapi/structs.bufo";
@os(WINDOWS) import "winapi/functions.bufo";
@os(LINUX) import "posix/structs.bufo";
@os(LINUX) import "posix/functions.bufo";

struct ByteBuffer {
    elements: &u8;
    length: usize;
    capacity: usize;
}

struct Function {
    run: func () -> u64;
    size: usize;
}

@os(WINDOWS) func free(fn: Function) {
    if (failed(WinAPI::VirtualFree(fn.run as Any, fn.size, 16384))) {
        C::printf("warning: Could not free function at %p\n", fn.run);
    }
}
@os(LINUX) func free(fn: Function) {
    if (munmap(fn.run as Any, fn.size) != 0) {
        C::printf("warning: Could not free function at %p\n", fn.run);
    }
}

func push(buf: &ByteBuffer, b1: char, b2: char, b3: char, b4: char, b5: char, b6: char, b7: char, b8: char) {
    push(buf, b1 as u8, b2 as u8, b3 as u8, b4 as u8, b5 as u8, b6 as u8, b7 as u8, b8 as u8);
}

func push(buf: &ByteBuffer, b1: char, b2: char, b3: char, b4: char) {
    push(buf, b1 as u8, b2 as u8);
    push(buf, b3 as u8, b4 as u8);
}
func push(buf: &ByteBuffer, b1: char, b2: char, b3: char) {
    push(buf, b1 as u8, b2 as u8);
    push(buf, b3 as u8);
}
func push(buf: &ByteBuffer, b1: char, b2: char) {
    push(buf, b1 as u8, b2 as u8);
}
func push(buf: &ByteBuffer, b1: char) {
    push(buf, b1 as u8);
}
func push(buf: &ByteBuffer, b1: u8, b2: u8) {
    push(buf, b1);
    push(buf, b2);
}
func push(buf: &ByteBuffer, b1: u8, b2: u8, b3: u8, b4: u8, b5: u8, b6: u8, b7: u8, b8: u8) {
    push(buf, b1);
    push(buf, b2);
    push(buf, b3);
    push(buf, b4);
    push(buf, b5);
    push(buf, b6);
    push(buf, b7);
    push(buf, b8);
}
func push(buf: &ByteBuffer, element: u8) {
    if (buf.length >= buf.capacity) {
        let newCap: usize = buf.capacity * 2;
        if (newCap == 0) newCap = 32;
        buf.elements = C::realloc(buf.elements, newCap * sizeof u8);
        assert(buf.elements != null, "Could not allocate memory in ByteBuffer.push");
        buf.capacity = newCap;
    }
    buf.elements[buf.length] = element;
    buf.length = buf.length + 1;
}

func extend(buf: &ByteBuffer, other: &ByteBuffer) {
    for (let i: usize = 0; i < other.length; i = i + 1) {
        push(buf, other.elements[i]);
    }
    C::free(other.elements);
    *other = blank;
}

