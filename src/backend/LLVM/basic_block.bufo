import "prelude.bufo";
import "./bindings.bufo";
import "./values.bufo";

struct LLVMBasicBlock {
    ref: LLVMBasicBlockRef;
}
func equals(this: &LLVMBasicBlock, other: &LLVMBasicBlock) -> bool {
    return this.ref.ptr == other.ref.ptr;
}
func guardReference(this: &LLVMBasicBlock) {
    trace("LLVMBasicBlock.guardReference");
    assert(!isNull(this.ref), "LLVM Basic Block is null");
}
func getParent(this: &LLVMBasicBlock) -> LLVMValue {
    trace("LLVMBasicBlock.getParent");
    guardReference(this);
    let parent: LLVMValueRef = LLVM::GetBasicBlockParent(this.ref);
    assert(!isNull(parent), "Could not get parent from basic block");
    return newLLVMValueFromRef(parent);
}
func getLastInstruction(this: &LLVMBasicBlock, out: &LLVMValue) -> bool {
    trace("LLVMBasicBlock.getLastInstruction");
    guardReference(this);
    let instr: LLVMValueRef = LLVM::GetLastInstruction(this.ref);
    if (isNull(instr)) return false;
    *out = newLLVMValueFromRef(instr);
    return true;
}

func newLLVMBasicBlockFromRef(ref: LLVMBasicBlockRef) -> LLVMBasicBlock {
    trace("newLLVMBasicBlockFromRef");
    assert(!isNull(ref), "Passed invalid reference to newLLVMBasicBlockFromRef");
    return LLVMBasicBlock {
        ref: ref
    };
}
