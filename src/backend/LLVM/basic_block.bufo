import "prelude.bufo";
import "./bindings.bufo";
import "./values.bufo";

struct LLVMBasicBlock {
    ref: LLVMBasicBlockRef;
    func equals(&this, other: &LLVMBasicBlock) -> bool {
        return this.ref.ptr == other.ref.ptr;
    }
    func guardReference(&this) {
        trace("LLVMBasicBlock.guardReference");
        assert_with_msg(!this.ref.isNull(), "LLVM Basic Block is null");
    }
    func getParent(&this) -> LLVMValue {
        trace("LLVMBasicBlock.getParent");
        this.guardReference();
        let parent: LLVMValueRef = LLVMGetBasicBlockParent(this.ref);
        assert_with_msg(!parent.isNull(), "Could not get parent from basic block");
        return newLLVMValueFromRef(parent);
    }
    func getLastInstruction(&this, out: &LLVMValue) -> bool {
        trace("LLVMBasicBlock.getLastInstruction");
        this.guardReference();
        let instr: LLVMValueRef = LLVMGetLastInstruction(this.ref);
        if (instr.isNull()) return false;
        *out = newLLVMValueFromRef(instr);
        return true;
    }
}

func newLLVMBasicBlockFromRef(ref: LLVMBasicBlockRef) -> LLVMBasicBlock {
    trace("newLLVMBasicBlockFromRef");
    assert_with_msg(!ref.isNull(), "Passed invalid reference to newLLVMBasicBlockFromRef");
    return LLVMBasicBlock {
        ref: ref
    };
}
