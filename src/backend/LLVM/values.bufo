import "prelude.bufo";
import "substr.bufo";
import "./bindings.bufo";
import "./basic_block.bufo";
import "../LLVM/types.bufo";

struct LLVMValue {
    ref: LLVMValueRef;
    func equals(&this, other: &LLVMValue) -> bool {
        todo_with_msg("LLVMValue.equals");
        return false;
    }
    func guardReference(&this) {
        trace("LLVMValue.guardReference");
        assert(!this.ref.isNull(), "LLVM Value is null");
    }

    func isStructValue(&this) -> bool {
        let t: LLVMType = this.getType();
        return t.isStruct();
    }

    func dump(&this) {
        LLVMDumpValue(this.ref);
    }

    func getGlobalType(&this) -> LLVMType {
        trace("LLVMValue.getGlobalType");
        let t: LLVMTypeRef = LLVMGlobalGetValueType(this.ref);
        assert(!t.isNull(), "Could not get global type of LLVMValue");
        return newLLVMTypeFromRef(t);
    }

    func getNthParam(&this, index: usize) -> LLVMValue {
        trace("LLVMValue.getNthParam");
        let param: LLVMValueRef = LLVMGetParam(this.ref, index as u32);
        assert(!param.isNull(), "Could not get parameter of LLVMValue");
        return newLLVMValueFromRef(param);
    }

    func getFirstBasicBlock(&this) -> LLVMBasicBlock {
        trace("LLVMValue.getFirstBasicBlock");
        let block: LLVMBasicBlockRef = LLVMGetFirstBasicBlock(this.ref);
        assert(!block.isNull(), "Could not get first basic block from LLVMValue");
        return newLLVMBasicBlockFromRef(block);
    }

    func getType(&this) -> LLVMType {
        trace("LLVMValue.getType");
        let t: LLVMTypeRef = LLVMTypeOf(this.ref);
        assert(!t.isNull(), "Coult not get type of LLVMValue");
        return newLLVMTypeFromRef(t);
    }
    func setName(&this, name: SubStr) {
        trace("LLVMValue.setName");
        LLVMSetValueName2(this.ref, name.start, name.len);
    }

    func getName(&this) -> SubStr {
        trace("LLVMValue.getName");
        let len: usize = 0;
        let name: &char = LLVMGetValueName2(this.ref, &len);
        return newSubStr(name, 0, len);
    }

    func setInitializer(&this, val: LLVMValue) {
        trace("LLVMValue.setInitializer");
        assert(!val.ref.isNull(), "Expected valid LLVMValue in LLVMValue.setInitializer");
        LLVMSetInitializer(this.ref, val.ref);
    }
}

func newLLVMValueFromRef(ref: LLVMValueRef) -> LLVMValue {
    trace("newLLVMValueFromRef");
    assert(!ref.isNull(), "Passed invalid reference to newLLVMValueFromRef");
    return LLVMValue {
        ref: ref
    };
}
