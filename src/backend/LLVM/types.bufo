import "prelude.bufo";
import "libc.bufo";
import "../../util/lists.bufo";
import "./bindings.bufo";
import "./context.bufo";
import "./values.bufo";

struct LLVMType {
    ref: LLVMTypeRef;
    func equals(&this, other: &LLVMType) -> bool {
        return this.ref.ptr == other.ref.ptr;
    }

    func isFunction(&this) -> bool {
        trace("LLVMType.isFunction");
        return LLVMGetTypeKind(this.ref) == LLVMFunctionTypeKind;
    }

    func getReturnType(&this) -> LLVMType {
        trace("LLVMType.getReturnType");
        assert_with_msg(this.isFunction(), "LLVM.getReturnType() called on non-function");
        let t: LLVMTypeRef = LLVMGetReturnType(this.ref);
        assert_with_msg(!t.isNull(), "Could not get return type");
        return newLLVMTypeFromRef(t);
    }

    func isVoid(&this) -> bool {
        trace("LLVMType.isVoid");
        return LLVMGetTypeKind(this.ref) == LLVMVoidTypeKind;
    }

    func isStruct(&this) -> bool {
        trace("LLVMType.isStruct");
        return LLVMGetTypeKind(this.ref) == LLVMStructTypeKind;
    }

    func isPointer(&this) -> bool {
        trace("LLVMType.isPointer");
        return LLVMGetTypeKind(this.ref) == LLVMPointerTypeKind;
    }

    func toChars(&this) -> &char {
        return LLVMPrintTypeToString(this.ref);
    }

    func intoFunctionType(&this, params: LLVMTypeList, varArg: bool) -> LLVMType {
        trace("LLVMType.intoFunctionType");
        assert(sizeof LLVMType == 8);
        let fn: LLVMTypeRef = LLVMFunctionType(this.ref, params.elements as &LLVMTypeRef, params.length as u32, newLLVMBool(varArg));
        assert_with_msg(!fn.isNull(), "Could not turn LLVMType into a FunctionType");
        return newLLVMTypeFromRef(fn);
    }

    func intoPointerType(&this) -> LLVMType {
        trace("LLVMType.intoPointerType");
        // FIXME: Other address spaces
        let ptr: LLVMTypeRef = LLVMPointerType(this.ref, 0);
        assert_with_msg(!ptr.isNull(), "Could not turn LLVMType into a PointerType");
        return newLLVMTypeFromRef(ptr);
    }

    func intoArrayType(&this, size: u32) -> LLVMType {
        trace("LLVMType.intoArrayType");
        // FIXME: Other address spaces
        let arr: LLVMTypeRef = LLVMArrayType(this.ref, size);
        assert_with_msg(!arr.isNull(), "Could not turn LLVMType into a ArrayType");
        return newLLVMTypeFromRef(arr);
    }

    func getParamTypes(&this) -> &LLVMType {
        trace("LLVMType.getParamTypes");
        let count: u32 = LLVMCountParamTypes(this.ref);
        let _p: Any = calloc(count as usize, sizeof LLVMTypeRef);
        assert_with_msg(_p != null, "Could not allocate memory in LLVMType.getParamTypes");
        let params: &LLVMTypeRef = &*_p;
        LLVMGetParamTypes(this.ref, params);
        todo_with_msg("conv");
        return null;
    }

    func constInt(&this, value: usize, signExtend: bool) -> LLVMValue {
        trace("LLVMType.constInt");
        let s: LLVMBool = newLLVMBool(signExtend);
        let val: LLVMValueRef = LLVMConstInt(this.ref, value, s);
        assert_with_msg(!val.isNull(), "Could not get constant integer");
        return newLLVMValueFromRef(val);
    }

    func constZero(&this) -> LLVMValue {
        trace("LLVMType.constZero");
        let val: LLVMValueRef = LLVMConstNull(this.ref);
        assert_with_msg(!val.isNull(), "Could not get constant zero");
        return newLLVMValueFromRef(val);
    }

    func constFloat(&this, value: f64) -> LLVMValue {
        trace("LLVMType.constFloat");
        let val: LLVMValueRef = LLVMConstReal(this.ref, value);
        assert_with_msg(!val.isNull(), "Could not get constant float");
        return newLLVMValueFromRef(val);
    }
}

func newLLVMTypeFromRef(ref: LLVMTypeRef) -> LLVMType {
    trace("newLLVMTypeFromRef");
    assert_with_msg(!ref.isNull(), "Passed invalid reference to newLLVMTypeFromRef");
    return LLVMType {
        ref: ref,
    };
}
