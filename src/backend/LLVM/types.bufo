import "prelude.bufo";
import "libc.bufo";
import "asm.bufo";
import "string.bufo";
import "../../util/lists.bufo";
import "./bindings.bufo";
import "./context.bufo";
import "./values.bufo";

struct LLVMType {
    ref: LLVM::TypeRef;
}
func equals(this: &LLVMType, other: &LLVMType) -> bool {
    return this.ref.ptr == other.ref.ptr;
}

func isFunction(this: &LLVMType) -> bool {
    return LLVM::GetTypeKind(this.ref) == LLVMFunctionTypeKind;
}

func getReturnType(this: &LLVMType) -> LLVMType {
    assert(isFunction(this), "LLVM::getReturnType() called on non-function");
    let t: LLVM::TypeRef = LLVM::GetReturnType(this.ref);
    assert(!LLVM::isNull(t), "Could not get return type");
    return newLLVMTypeFromRef(t);
}

func isVoid(this: &LLVMType) -> bool {
    return LLVM::GetTypeKind(this.ref) == LLVMVoidTypeKind;
}

func isStruct(this: &LLVMType) -> bool {
    return LLVM::GetTypeKind(this.ref) == LLVMStructTypeKind;
}

func isPointer(this: &LLVMType) -> bool {
    return LLVM::GetTypeKind(this.ref) == LLVMPointerTypeKind;
}

func toChars(this: &LLVMType) -> &char {
    return LLVM::PrintTypeToString(this.ref);
}

func intoFunctionType(this: &LLVMType, params: LLVMTypeList, varArg: bool) -> LLVMType {
    assert(sizeof LLVMType == 8);
    let fn: LLVM::TypeRef = LLVM::FunctionType(this.ref, params.elements as &LLVM::TypeRef, params.length as u32, newLLVMBool(varArg));
    assert(!LLVM::isNull(fn), "Could not turn LLVMType into a FunctionType");
    return newLLVMTypeFromRef(fn);
}

func intoPointerType(this: &LLVMType) -> LLVMType {
    // FIXME: Other address spaces
    let ptr: LLVM::TypeRef = LLVM::PointerType(this.ref, 0);
    assert(!LLVM::isNull(ptr), "Could not turn LLVMType into a PointerType");
    return newLLVMTypeFromRef(ptr);
}

func intoArrayType(this: &LLVMType, size: u32) -> LLVMType {
    // FIXME: Other address spaces
    let arr: LLVM::TypeRef = LLVM::ArrayType(this.ref, size);
    assert(!LLVM::isNull(arr), "Could not turn LLVMType into a ArrayType");
    return newLLVMTypeFromRef(arr);
}

func constInt(this: &LLVMType, value: usize, signExtend: bool) -> LLVMValue {
    let s: LLVMBool = newLLVMBool(signExtend);
    let val: LLVM::ValueRef = LLVM::ConstInt(this.ref, value, s);
    assert(!LLVM::isNull(val), "Could not get constant integer");
    return newLLVMValueFromRef(val);
}

func constZero(this: &LLVMType) -> LLVMValue {
    let val: LLVM::ValueRef = LLVM::ConstNull(this.ref);
    assert(!LLVM::isNull(val), "Could not get constant zero");
    return newLLVMValueFromRef(val);
}

func constFloat(this: &LLVMType, value: f64) -> LLVMValue {
    let val: LLVM::ValueRef = LLVM::ConstReal(this.ref, value);
    assert(!LLVM::isNull(val), "Could not get constant float");
    return newLLVMValueFromRef(val);
}

func getInlineAsm(this: &LLVMType, context: &ASMContext) -> LLVMValue {
    let constraints = collect(context);
    let val = LLVM::GetInlineAsm(this.ref,
        context.code.buffer, context.code.length,
        constraints.buffer, constraints.length,
        newLLVMBool(context.sideEffects), newLLVMBool(context.alignedStack),
        tag(&context.dialect) as u32, newLLVMBool(context.canThrow));
    assert(!LLVM::isNull(val), "Could not generate inline assembly");
    drop(&constraints);
    return newLLVMValueFromRef(val);
}

func newLLVMTypeFromRef(ref: LLVM::TypeRef) -> LLVMType {
    assert(!LLVM::isNull(ref), "Passed invalid reference to newLLVMTypeFromRef");
    return LLVMType {
        ref: ref,
    };
}
