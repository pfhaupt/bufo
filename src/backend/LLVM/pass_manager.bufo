import "prelude.bufo";
import "./module.bufo";
import "./bindings.bufo";

struct LLVMPassManager {
    ref: LLVM::PassManagerRef;
}
func addPromoteMemoryToRegisterPass(this: &LLVMPassManager) {
    LLVM::AddPromoteMemoryToRegisterPass(this.ref);
}
func addAlwaysInlinerPass(this: &LLVMPassManager) {
    LLVM::AddAlwaysInlinerPass(this.ref);
}
func addCFGSimplificationPass(this: &LLVMPassManager) {
    LLVM::AddCFGSimplificationPass(this.ref);
}
func addGlobalDCEPass(this: &LLVMPassManager) {
    LLVM::AddGlobalDCEPass(this.ref);
}

func runOn(this: &LLVMPassManager, mod: LLVMModule) -> bool {
    return runInPassManager(&mod, *this);
}

func newLLVMPassManagerFromRef(ref: LLVM::PassManagerRef) -> LLVMPassManager {
    assert(!LLVM::isNull(ref), "Called newLLVMPassManagerFromRef with invalid reference");
    return LLVMPassManager {
        ref: ref,
    };
}
