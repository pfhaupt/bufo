import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../../util/lists.bufo";
import "../LLVM/bindings.bufo";
import "../LLVM/types.bufo";
import "../LLVM/basic_block.bufo";
import "../LLVM/values.bufo";

struct LLVMBuilder {
    ref: LLVMBuilderRef;
}
func guardReference(this: &LLVMBuilder) {
    trace("LLVMBuilder.guardReference");
    assert(!isNull(this.ref), "LLVM Builder is null");
}
func positionAtEnd(this: &LLVMBuilder, block: LLVMBasicBlock) {
    trace("LLVMBuilder.positionAtEnd");
    guardReference(this);
    LLVMPositionBuilderAtEnd(this.ref, block.ref);
}
func positionBefore(this: &LLVMBuilder, instr: LLVMValue) {
    trace("LLVMBuilder.positionBefore");
    guardReference(this);
    LLVMPositionBuilderBefore(this.ref, instr.ref);
}

func getInsertBlock(this: &LLVMBuilder) -> LLVMBasicBlock {
    trace("LLVMBuilder.getInsertBlock");
    guardReference(this);
    let block: LLVMBasicBlockRef = LLVMGetInsertBlock(this.ref);
    assert(!isNull(block), "Could not get insert block from builder");
    return newLLVMBasicBlockFromRef(block);
}

func buildInsertValue(this: &LLVMBuilder, aggregate: LLVMValue, element: LLVMValue, offset: u32, name: &char) -> LLVMValue {
    trace("LLVMBuilder.buildInsertValue");
    guardReference(this);
    let val: LLVMValueRef = LLVMBuildInsertValue(this.ref, aggregate.ref, element.ref, offset, name);
    assert(!isNull(val), "Could not build insert value in builder");
    return newLLVMValueFromRef(val);
}

func buildAlloca(this: &LLVMBuilder, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildAlloca");
    guardReference(this);
    let _n: String = toString(&name);
    let alloced: LLVMValueRef = LLVMBuildAlloca(this.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(alloced), "Could not build alloca in builder");
    return newLLVMValueFromRef(alloced);
}

func buildStore(this: &LLVMBuilder, ptr: LLVMValue, value: LLVMValue) -> LLVMValue {
    trace("LLVMBuilder.buildStore");
    guardReference(this);
    let value: LLVMValueRef = LLVMBuildStore(this.ref, value.ref, ptr.ref);
    assert(!isNull(value), "Could not build store in builder");
    return newLLVMValueFromRef(value);
}

func buildLoad(this: &LLVMBuilder, pType: LLVMType, ptr: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildLoad");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildLoad2(this.ref, pType.ref, ptr.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build load in builder");
    return newLLVMValueFromRef(value);
}

func buildReturn(this: &LLVMBuilder, value: LLVMValue) {
    trace("LLVMBuilder.buildReturn");
    guardReference(this);
    let value: LLVMValueRef = LLVMBuildRet(this.ref, value.ref);
    assert(!isNull(value), "Could not build return in builder");
}
func buildReturnVoid(this: &LLVMBuilder) {
    trace("LLVMBuilder.buildReturnVoid");
    guardReference(this);
    let value: LLVMValueRef = LLVMBuildRetVoid(this.ref);
    assert(!isNull(value), "Could not build return void in builder");
}
func buildBr(this: &LLVMBuilder, dest: LLVMBasicBlock) -> LLVMValue {
    trace("LLVMBuilder.buildBr");
    guardReference(this);
    assert(!isNull(dest.ref), "Destination for Br is null!");
    let value: LLVMValueRef = LLVMBuildBr(this.ref, dest.ref);
    assert(!isNull(value), "Could not build Br");
    return newLLVMValueFromRef(value);
}
func buildCondBr(this: &LLVMBuilder, cond: LLVMValue, tru: LLVMBasicBlock, fals: LLVMBasicBlock) -> LLVMValue {
    trace("LLVMBuilder.buildCondBr");
    guardReference(this);
    let value: LLVMValueRef = LLVMBuildCondBr(this.ref, cond.ref, tru.ref, fals.ref);
    assert(!isNull(value), "Could not build CondBr");
    return newLLVMValueFromRef(value);
}
func buildIntAdd(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntAdd");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildAdd(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int add");
    return newLLVMValueFromRef(value);
}
func buildIntSub(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntSub");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildSub(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int sub");
    return newLLVMValueFromRef(value);
}
func buildIntMul(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntMul");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildMul(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int mul");
    return newLLVMValueFromRef(value);
}
func buildIntDiv(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntDiv");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = blank;
    if (signed) {
        value = LLVMBuildSDiv(this.ref, lhs.ref, rhs.ref, _n.buffer);
    } else {
        value = LLVMBuildUDiv(this.ref, lhs.ref, rhs.ref, _n.buffer);
    }
    drop(&_n);
    assert(!isNull(value), "Could not build int div");
    return newLLVMValueFromRef(value);
}
func buildIntMod(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntMod");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = blank;
    if (signed) {
        value = LLVMBuildSRem(this.ref, lhs.ref, rhs.ref, _n.buffer);
    } else {
        value = LLVMBuildURem(this.ref, lhs.ref, rhs.ref, _n.buffer);
    }
    drop(&_n);
    assert(!isNull(value), "Could not build int mod");
    return newLLVMValueFromRef(value);
}
func buildFloatAdd(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatAdd");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFAdd(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float add");
    return newLLVMValueFromRef(value);
}
func buildFloatSub(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatSub");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFSub(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float sub");
    return newLLVMValueFromRef(value);
}
func buildFloatMul(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatMul");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFMul(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float mul");
    return newLLVMValueFromRef(value);
}
func buildFloatDiv(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatDiv");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFDiv(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float div");
    return newLLVMValueFromRef(value);
}
func buildFloatMod(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatMod");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFRem(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float mod");
    return newLLVMValueFromRef(value);
}
func buildIntCompare(this: &LLVMBuilder, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntCompare");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildICmp(this.ref, predicate, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int compare");
    return newLLVMValueFromRef(value);
}
func buildFloatCompare(this: &LLVMBuilder, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatCompare");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFCmp(this.ref, predicate, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float compare");
    return newLLVMValueFromRef(value);
}
func buildNot(this: &LLVMBuilder, val: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildNot");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildNot(this.ref, val.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build logical not");
    return newLLVMValueFromRef(value);
}
func buildOr(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildOr");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildOr(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build logical or");
    return newLLVMValueFromRef(value);
}
func buildAnd(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildAnd");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildAnd(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build logical and");
    return newLLVMValueFromRef(value);
}
func buildXor(this: &LLVMBuilder, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildXor");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildXor(this.ref, lhs.ref, rhs.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build logical xor");
    return newLLVMValueFromRef(value);
}
func buildPtrToInt(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildPtrToInt");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildPtrToInt(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build ptr to int");
    return newLLVMValueFromRef(value);
}
func buildIntToPtr(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntToPtr");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildIntToPtr(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int to ptr");
    return newLLVMValueFromRef(value);
}
func buildIntToFloat(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntToFloat");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = blank;
    if (signed) {
        value = LLVMBuildSIToFP(this.ref, val.ref, typ.ref, _n.buffer);
    } else {
        value = LLVMBuildUIToFP(this.ref, val.ref, typ.ref, _n.buffer);
    }
    drop(&_n);
    assert(!isNull(value), "Could not build int to float");
    return newLLVMValueFromRef(value);
}
func buildFloatToInt(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatToInt");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = blank;
    if (signed) {
        value = LLVMBuildFPToSI(this.ref, val.ref, typ.ref, _n.buffer);
    } else {
        value = LLVMBuildFPToUI(this.ref, val.ref, typ.ref, _n.buffer);
    }
    drop(&_n);
    assert(!isNull(value), "Could not build float to int");
    return newLLVMValueFromRef(value);
}
func buildIntSignExtend(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntSignExtend");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildSExt(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int sign extend");
    return newLLVMValueFromRef(value);
}
func buildIntZeroExtend(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntZeroExtend");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildZExt(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int zero extend");
    return newLLVMValueFromRef(value);
}
func buildFloatExtend(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatExtend");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFPExt(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float extend");
    return newLLVMValueFromRef(value);
}
func buildFloatTruncate(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildFloatTruncate");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildFPTrunc(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build float truncate");
    return newLLVMValueFromRef(value);
}
func buildIntTruncate(this: &LLVMBuilder, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildIntTruncate");
    guardReference(this);
    let _n: String = toString(&name);
    let value: LLVMValueRef = LLVMBuildTrunc(this.ref, val.ref, typ.ref, _n.buffer);
    drop(&_n);
    assert(!isNull(value), "Could not build int truncate");
    return newLLVMValueFromRef(value);
}
func buildCall(this: &LLVMBuilder, fn: LLVMValue, fnType: LLVMType, args: LLVMValueList, retType: LLVMType, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildCall");
    guardReference(this);
    assert(sizeof LLVMValue == 8);
    let _n: String = blank;
    if (isVoid(&retType)) {
        // LLVM complains about named calls that return void
        _n = newStringFromStrLit("");
    } else {
        _n = toString(&name);
    }
    let value: LLVMValueRef = LLVMBuildCall2(this.ref, fnType.ref, fn.ref, args.elements as &LLVMValueRef, args.length as u32, _n.buffer);
    drop(&_n);
    clear(&args);
    assert(!isNull(value), "Could not build call");
    return newLLVMValueFromRef(value);
}
func buildGlobalStringPtr(this: &LLVMBuilder, start: &char, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildGlobalStringPtr");
    guardReference(this);
    let _n: String = toString(&name);
    let s: LLVMValueRef = LLVMBuildGlobalStringPtr(this.ref, start, _n.buffer);
    drop(&_n);
    assert(!isNull(s), "Could not build global string");
    return newLLVMValueFromRef(s);
}
func buildStructGEP(this: &LLVMBuilder, typ: LLVMType, aggr: LLVMValue, index: usize, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildStructGEP");
    guardReference(this);
    let _n: String = toString(&name);
    let s: LLVMValueRef = LLVMBuildStructGEP2(this.ref, typ.ref, aggr.ref, index as u32, _n.buffer);
    drop(&_n);
    assert(!isNull(s), "Could not build struct GEP");
    return newLLVMValueFromRef(s);
}
func buildGEP(this: &LLVMBuilder, typ: LLVMType, aggr: LLVMValue, indices: LLVMValueList, name: SubStr) -> LLVMValue {
    trace("LLVMBuilder.buildGEP");
    guardReference(this);
    let _n: String = toString(&name);
    assert(sizeof LLVMValue == 8);
    let s: LLVMValueRef = LLVMBuildGEP2(this.ref, typ.ref, aggr.ref, indices.elements as &LLVMValueRef, indices.length as u32, _n.buffer);
    drop(&_n);
    clear(&indices);
    assert(!isNull(s), "Could not build GEP");
    return newLLVMValueFromRef(s);
}

func buildUnreachable(this: &LLVMBuilder) {
    trace("LLVMBuilder.buildUnreachable");
    guardReference(this);
    let v: LLVMValueRef = LLVMBuildUnreachable(this.ref);
    assert(!isNull(v), "Could not build unreachable");
}

func newLLVMBuilderFromRef(ref: LLVMBuilderRef) -> LLVMBuilder {
    trace("newLLVMBuilderFromRef");
    assert(!isNull(ref), "Passed invalid reference to newLLVMBuilderFromRef");
    return LLVMBuilder {
        ref: ref,
    };
}
