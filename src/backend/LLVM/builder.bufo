import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../../util/lists.bufo";
import "../LLVM/bindings.bufo";
import "../LLVM/types.bufo";
import "../LLVM/basic_block.bufo";
import "../LLVM/values.bufo";

struct LLVMBuilder {
    ref: LLVMBuilderRef;
    func guardReference(&this) {
        trace("LLVMBuilder.guardReference");
        assert(!this.ref.isNull(), "LLVM Builder is null");
    }
    func positionAtEnd(&this, block: LLVMBasicBlock) {
        trace("LLVMBuilder.positionAtEnd");
        this.guardReference();
        LLVMPositionBuilderAtEnd(this.ref, block.ref);
    }
    func positionBefore(&this, instr: LLVMValue) {
        trace("LLVMBuilder.positionBefore");
        this.guardReference();
        LLVMPositionBuilderBefore(this.ref, instr.ref);
    }

    func getInsertBlock(&this) -> LLVMBasicBlock {
        trace("LLVMBuilder.getInsertBlock");
        this.guardReference();
        let block: LLVMBasicBlockRef = LLVMGetInsertBlock(this.ref);
        assert(!block.isNull(), "Could not get insert block from builder");
        return newLLVMBasicBlockFromRef(block);
    }

    func buildInsertValue(&this, aggregate: LLVMValue, element: LLVMValue, offset: u32, name: &char) -> LLVMValue {
        trace("LLVMBuilder.buildInsertValue");
        this.guardReference();
        let val: LLVMValueRef = LLVMBuildInsertValue(this.ref, aggregate.ref, element.ref, offset, name);
        assert(!val.isNull(), "Could not build insert value in builder");
        return newLLVMValueFromRef(val);
    }

    func buildAlloca(&this, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildAlloca");
        this.guardReference();
        let _n: String = name.toString();
        let alloced: LLVMValueRef = LLVMBuildAlloca(this.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!alloced.isNull(), "Could not build alloca in builder");
        return newLLVMValueFromRef(alloced);
    }

    func buildStore(&this, ptr: LLVMValue, value: LLVMValue) -> LLVMValue {
        trace("LLVMBuilder.buildStore");
        this.guardReference();
        let value: LLVMValueRef = LLVMBuildStore(this.ref, value.ref, ptr.ref);
        assert(!value.isNull(), "Could not build store in builder");
        return newLLVMValueFromRef(value);
    }

    func buildLoad(&this, pType: LLVMType, ptr: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildLoad");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildLoad2(this.ref, pType.ref, ptr.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build load in builder");
        return newLLVMValueFromRef(value);
    }

    func buildReturn(&this, value: LLVMValue) {
        trace("LLVMBuilder.buildReturn");
        this.guardReference();
        let value: LLVMValueRef = LLVMBuildRet(this.ref, value.ref);
        assert(!value.isNull(), "Could not build return in builder");
    }
    func buildReturnVoid(&this) {
        trace("LLVMBuilder.buildReturnVoid");
        this.guardReference();
        let value: LLVMValueRef = LLVMBuildRetVoid(this.ref);
        assert(!value.isNull(), "Could not build return void in builder");
    }
    func buildBr(&this, dest: LLVMBasicBlock) -> LLVMValue {
        trace("LLVMBuilder.buildBr");
        this.guardReference();
        assert(!dest.ref.isNull(), "Destination for Br is null!");
        let value: LLVMValueRef = LLVMBuildBr(this.ref, dest.ref);
        assert(!value.isNull(), "Could not build Br");
        return newLLVMValueFromRef(value);
    }
    func buildCondBr(&this, cond: LLVMValue, tru: LLVMBasicBlock, fals: LLVMBasicBlock) -> LLVMValue {
        trace("LLVMBuilder.buildCondBr");
        this.guardReference();
        let value: LLVMValueRef = LLVMBuildCondBr(this.ref, cond.ref, tru.ref, fals.ref);
        assert(!value.isNull(), "Could not build CondBr");
        return newLLVMValueFromRef(value);
    }
    func buildIntAdd(&this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntAdd");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildAdd(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int add");
        return newLLVMValueFromRef(value);
    }
    func buildIntSub(&this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntSub");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildSub(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int sub");
        return newLLVMValueFromRef(value);
    }
    func buildIntMul(&this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntMul");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildMul(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int mul");
        return newLLVMValueFromRef(value);
    }
    func buildIntDiv(&this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntDiv");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = blank;
        if (signed) {
            value = LLVMBuildSDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
        } else {
            value = LLVMBuildUDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
        }
        _n.drop();
        assert(!value.isNull(), "Could not build int div");
        return newLLVMValueFromRef(value);
    }
    func buildIntMod(&this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntMod");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = blank;
        if (signed) {
            value = LLVMBuildSRem(this.ref, lhs.ref, rhs.ref, _n.chars());
        } else {
            value = LLVMBuildURem(this.ref, lhs.ref, rhs.ref, _n.chars());
        }
        _n.drop();
        assert(!value.isNull(), "Could not build int mod");
        return newLLVMValueFromRef(value);
    }
    func buildFloatAdd(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatAdd");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFAdd(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float add");
        return newLLVMValueFromRef(value);
    }
    func buildFloatSub(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatSub");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFSub(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float sub");
        return newLLVMValueFromRef(value);
    }
    func buildFloatMul(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatMul");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFMul(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float mul");
        return newLLVMValueFromRef(value);
    }
    func buildFloatDiv(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatDiv");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float div");
        return newLLVMValueFromRef(value);
    }
    func buildFloatMod(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatMod");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFRem(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float mod");
        return newLLVMValueFromRef(value);
    }
    func buildIntCompare(&this, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntCompare");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildICmp(this.ref, predicate, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int compare");
        return newLLVMValueFromRef(value);
    }
    func buildFloatCompare(&this, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatCompare");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFCmp(this.ref, predicate, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float compare");
        return newLLVMValueFromRef(value);
    }
    func buildNot(&this, val: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildNot");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildNot(this.ref, val.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build logical not");
        return newLLVMValueFromRef(value);
    }
    func buildOr(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildOr");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildOr(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build logical or");
        return newLLVMValueFromRef(value);
    }
    func buildAnd(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildAnd");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildAnd(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build logical and");
        return newLLVMValueFromRef(value);
    }
    func buildXor(&this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildXor");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildXor(this.ref, lhs.ref, rhs.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build logical xor");
        return newLLVMValueFromRef(value);
    }
    func buildPtrToInt(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildPtrToInt");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildPtrToInt(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build ptr to int");
        return newLLVMValueFromRef(value);
    }
    func buildIntToPtr(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntToPtr");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildIntToPtr(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int to ptr");
        return newLLVMValueFromRef(value);
    }
    func buildIntToFloat(&this, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntToFloat");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = blank;
        if (signed) {
            value = LLVMBuildSIToFP(this.ref, val.ref, typ.ref, _n.chars());
        } else {
            value = LLVMBuildUIToFP(this.ref, val.ref, typ.ref, _n.chars());
        }
        _n.drop();
        assert(!value.isNull(), "Could not build int to float");
        return newLLVMValueFromRef(value);
    }
    func buildFloatToInt(&this, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatToInt");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = blank;
        if (signed) {
            value = LLVMBuildFPToSI(this.ref, val.ref, typ.ref, _n.chars());
        } else {
            value = LLVMBuildFPToUI(this.ref, val.ref, typ.ref, _n.chars());
        }
        _n.drop();
        assert(!value.isNull(), "Could not build float to int");
        return newLLVMValueFromRef(value);
    }
    func buildIntSignExtend(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntSignExtend");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildSExt(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int sign extend");
        return newLLVMValueFromRef(value);
    }
    func buildIntZeroExtend(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntZeroExtend");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildZExt(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int zero extend");
        return newLLVMValueFromRef(value);
    }
    func buildFloatExtend(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatExtend");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFPExt(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float extend");
        return newLLVMValueFromRef(value);
    }
    func buildFloatTruncate(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatTruncate");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildFPTrunc(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build float truncate");
        return newLLVMValueFromRef(value);
    }
    func buildIntTruncate(&this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntTruncate");
        this.guardReference();
        let _n: String = name.toString();
        let value: LLVMValueRef = LLVMBuildTrunc(this.ref, val.ref, typ.ref, _n.chars());
        _n.drop();
        assert(!value.isNull(), "Could not build int truncate");
        return newLLVMValueFromRef(value);
    }
    func buildCall(&this, fn: LLVMValue, args: LLVMValueList, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildCall");
        this.guardReference();
        assert(sizeof LLVMValue == 8);
        let typ: LLVMType = fn.getGlobalType();
        assert(typ.isFunction(), "Call expected LLVMType to be a function!");
        let ret: LLVMType = typ.getReturnType();
        let _n: String = blank;
        if (ret.isVoid()) {
            // LLVM complains about named calls that return void
            _n = newStringFromStrLit("");
        } else {
            _n = name.toString();
        }
        let value: LLVMValueRef = LLVMBuildCall2(this.ref, typ.ref, fn.ref, args.elements as &LLVMValueRef, args.length as u32, _n.chars());
        _n.drop();
        args.clear();
        assert(!value.isNull(), "Could not build call");
        return newLLVMValueFromRef(value);
    }
    func buildGlobalStringPtr(&this, start: &char, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildGlobalStringPtr");
        this.guardReference();
        let _n: String = name.toString();
        let s: LLVMValueRef = LLVMBuildGlobalStringPtr(this.ref, start, _n.chars());
        _n.drop();
        assert(!s.isNull(), "Could not build global string");
        return newLLVMValueFromRef(s);
    }
    func buildStructGEP(&this, typ: LLVMType, aggr: LLVMValue, index: usize, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildStructGEP");
        this.guardReference();
        let _n: String = name.toString();
        let s: LLVMValueRef = LLVMBuildStructGEP2(this.ref, typ.ref, aggr.ref, index as u32, _n.chars());
        _n.drop();
        assert(!s.isNull(), "Could not build struct GEP");
        return newLLVMValueFromRef(s);
    }
    func buildGEP(&this, typ: LLVMType, aggr: LLVMValue, indices: LLVMValueList, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildGEP");
        this.guardReference();
        let _n: String = name.toString();
        assert(sizeof LLVMValue == 8);
        let s: LLVMValueRef = LLVMBuildGEP2(this.ref, typ.ref, aggr.ref, indices.elements as &LLVMValueRef, indices.length as u32, _n.chars());
        _n.drop();
        indices.clear();
        assert(!s.isNull(), "Could not build GEP");
        return newLLVMValueFromRef(s);
    }

    func buildUnreachable(&this) {
        trace("LLVMBuilder.buildUnreachable");
        this.guardReference();
        let v: LLVMValueRef = LLVMBuildUnreachable(this.ref);
        assert(!v.isNull(), "Could not build unreachable");
    }
}

func newLLVMBuilderFromRef(ref: LLVMBuilderRef) -> LLVMBuilder {
    trace("newLLVMBuilderFromRef");
    assert(!ref.isNull(), "Passed invalid reference to newLLVMBuilderFromRef");
    return LLVMBuilder {
        ref: ref,
    };
}
