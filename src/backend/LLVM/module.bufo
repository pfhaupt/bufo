import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "../LLVM/bindings.bufo";
import "../LLVM/types.bufo";
import "../LLVM/values.bufo";
import "../LLVM/pass_manager.bufo";
import "../LLVM/target.bufo";

struct LLVMModule {
    ref: LLVM::ModuleRef;
}

func print(this: &LLVMModule) {
    let s: &char = LLVM::PrintModuleToString(this.ref);
    C::printf("%s\n", s);
}

func setTriple(this: &LLVMModule, triple: &char) {
    LLVM::SetTarget(this.ref, triple);
}

func setDataLayout(this: &LLVMModule, layout: LLVMDataLayout) {
    LLVM::SetDataLayout(this.ref, layout.ref);
}

func writeToFile(this: &LLVMModule, path: SubStr) -> bool {
    let err: LLVMString = blank;
    let _n: String = toString(&path);
    let code: LLVMBool = LLVM::PrintModuleToFile(this.ref, _n.buffer, &err);
    if (code.val != 0) {
        C::fprintf(stderr, "%s Could not write LLVM Module to file!\n", FATAL_STR);
        C::fprintf(stderr, "%s\n", err.chars);
        drop(&_n);
        return false;
    }
    drop(&_n);
    return true;
}

func verify(this: &LLVMModule) -> bool {
    let err: LLVMString = blank;
    let code: LLVMBool = LLVM::VerifyModule(this.ref, LLVMReturnStatusAction, &err);
    if (code.val != 0) {
        C::fprintf(stderr, "%s LLVM Module verification failed!\n", FATAL_STR);
        C::fprintf(stderr, "%s\n", err.chars);
        return false;
    }
    return true;
}

func addFunction(this: &LLVMModule, name: SubStr, function: LLVMType) -> LLVMValue {
    assert(!LLVM::isNull(function.ref), "Expected valid LLVMType in LLVMModule.addFunction");
    let _n: String = toString(&name);
    let f: LLVM::ValueRef = LLVM::AddFunction(this.ref, _n.buffer, function.ref);
    drop(&_n);
    assert(!LLVM::isNull(f), "Could not add function to module");
    return newLLVMValueFromRef(f);
}
func hasFunction(this: &LLVMModule, name: SubStr) -> bool {
    let _n: String = toString(&name);
    let f: LLVM::ValueRef = LLVM::GetNamedFunction(this.ref, _n.buffer);
    drop(&_n);
    return !LLVM::isNull(f);
}
func getFunction(this: &LLVMModule, name: SubStr) -> LLVMValue {
    let _n: String = toString(&name);
    let f: LLVM::ValueRef = LLVM::GetNamedFunction(this.ref, _n.buffer);
    drop(&_n);
    assert(!LLVM::isNull(f), "Could not get function from module");
    return newLLVMValueFromRef(f);
}
func addGlobal(this: &LLVMModule, typ: LLVMType, space: u32, name: SubStr) -> LLVMValue {
    assert(!LLVM::isNull(typ.ref), "Expected valid LLVMType in LLVMModule.addGlobal");
    let _n: String = toString(&name);
    let g: LLVM::ValueRef = LLVM::AddGlobalInAddressSpace(this.ref, typ.ref, _n.buffer, space);
    drop(&_n);
    assert(!LLVM::isNull(g), "Could not add global in module");
    return newLLVMValueFromRef(g);
}
func getGlobal(this: &LLVMModule, name: SubStr) -> LLVMValue {
    let _n: String = toString(&name);
    let g: LLVM::ValueRef = LLVM::GetNamedGlobal(this.ref, _n.buffer);
    drop(&_n);
    assert(!LLVM::isNull(g), "Could not get global in module");
    return newLLVMValueFromRef(g);
}

func createPassManager(this: &LLVMModule) -> LLVMPassManager {
    let pm: LLVM::PassManagerRef = LLVM::CreatePassManager();
    assert(!LLVM::isNull(pm), "Could not create pass manager for module");
    return newLLVMPassManagerFromRef(pm);
}
func runInPassManager(this: &LLVMModule, pm: LLVMPassManager) -> bool {
    assert(!LLVM::isNull(this.ref));
    assert(!LLVM::isNull(pm.ref));
    return LLVM::RunPassManager(pm.ref, this.ref) == 1;
}

func newLLVMModuleFromRef(ref: LLVM::ModuleRef) -> LLVMModule {
    assert(!LLVM::isNull(ref), "Passed invalid reference to newLLVMModuleFromRef");
    return LLVMModule {
        ref: ref
    };
}
