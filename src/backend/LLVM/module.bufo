import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "../LLVM/bindings.bufo";
import "../LLVM/types.bufo";
import "../LLVM/values.bufo";
import "../LLVM/pass_manager.bufo";
import "../LLVM/target.bufo";

struct LLVMModule {
    ref: LLVMModuleRef;
}

func print(this: &LLVMModule) {
    let s: &char = LLVMPrintModuleToString(this.ref);
    printf("%s\n", s);
}

func setTriple(this: &LLVMModule, triple: &char) {
    trace("LLVMModule.setTriple");
    LLVMSetTarget(this.ref, triple);
}

func setDataLayout(this: &LLVMModule, layout: LLVMDataLayout) {
    trace("LLVMModule.setDataLayout");
    LLVMSetDataLayout(this.ref, layout.ref);
}

func writeToFile(this: &LLVMModule, path: SubStr) -> bool {
    trace("LLVMModule.writeToFile");
    let err: LLVMString = blank;
    let _n: String = path.toString();
    let code: LLVMBool = LLVMPrintModuleToFile(this.ref, _n.chars(), &err);
    if (code.val != 0) {
        fprintf(stderr, "%s Could not write LLVM Module to file!\n", FATAL_STR);
        fprintf(stderr, "%s\n", err.chars);
        _n.drop();
        return false;
    }
    printf("%s: Written LLVM Module to %s\n", NOTE_STR, _n.chars());
    _n.drop();
    return true;
}

func verify(this: &LLVMModule) -> bool {
    trace("LLVMModule.verify");
    let err: LLVMString = blank;
    let code: LLVMBool = LLVMVerifyModule(this.ref, LLVMReturnStatusAction, &err);
    if (code.val != 0) {
        fprintf(stderr, "%s LLVM Module verification failed!\n", FATAL_STR);
        fprintf(stderr, "%s\n", err.chars);
        return false;
    }
    return true;
}

func addFunction(this: &LLVMModule, name: SubStr, function: LLVMType) -> LLVMValue {
    trace("LLVMModule.addFunction");
    assert(!isNull(function.ref), "Expected valid LLVMType in LLVMModule.addFunction");
    let _n: String = name.toString();
    let f: LLVMValueRef = LLVMAddFunction(this.ref, _n.chars(), function.ref);
    _n.drop();
    assert(!isNull(f), "Could not add function to module");
    return newLLVMValueFromRef(f);
}
func hasFunction(this: &LLVMModule, name: SubStr) -> bool {
    trace("LLVMModule.hasFunction");
    let _n: String = name.toString();
    let f: LLVMValueRef = LLVMGetNamedFunction(this.ref, _n.chars());
    _n.drop();
    return !isNull(f);
}
func getFunction(this: &LLVMModule, name: SubStr) -> LLVMValue {
    trace("LLVMModule.getFunction");
    let _n: String = name.toString();
    let f: LLVMValueRef = LLVMGetNamedFunction(this.ref, _n.chars());
    _n.drop();
    assert(!isNull(f), "Could not get function from module");
    return newLLVMValueFromRef(f);
}
func addGlobal(this: &LLVMModule, typ: LLVMType, space: u32, name: SubStr) -> LLVMValue {
    trace("LLVMModule.addGlobal");
    assert(!isNull(typ.ref), "Expected valid LLVMType in LLVMModule.addGlobal");
    let _n: String = name.toString();
    let g: LLVMValueRef = LLVMAddGlobalInAddressSpace(this.ref, typ.ref, _n.chars(), space);
    _n.drop();
    assert(!isNull(g), "Could not add global in module");
    return newLLVMValueFromRef(g);
}
func getGlobal(this: &LLVMModule, name: SubStr) -> LLVMValue {
    trace("LLVMModule.getGlobal");
    let _n: String = name.toString();
    let g: LLVMValueRef = LLVMGetNamedGlobal(this.ref, _n.chars());
    _n.drop();
    assert(!isNull(g), "Could not get global in module");
    return newLLVMValueFromRef(g);
}

func createPassManager(this: &LLVMModule) -> LLVMPassManager {
    trace("LLVMModule.createPassManager");
    let pm: LLVMPassManagerRef = LLVMCreatePassManager();
    assert(!isNull(pm), "Could not create pass manager for module");
    return newLLVMPassManagerFromRef(pm);
}
func runInPassManager(this: &LLVMModule, pm: LLVMPassManager) -> bool {
    trace("LLVMModule.runInPassManager");
    assert(!isNull(this.ref));
    assert(!isNull(pm.ref));
    return LLVMRunPassManager(pm.ref, this.ref) == 1;
}

func newLLVMModuleFromRef(ref: LLVMModuleRef) -> LLVMModule {
    trace("newLLVMModuleFromRef");
    assert(!isNull(ref), "Passed invalid reference to newLLVMModuleFromRef");
    return LLVMModule {
        ref: ref
    };
}
