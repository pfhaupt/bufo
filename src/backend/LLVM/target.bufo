import "prelude.bufo";
import "../LLVM/types.bufo";
import "../LLVM/module.bufo";
import "../LLVM/bindings.bufo";

struct LLVMDataLayout {
    ref: &char;
}

struct LLVMTargetData {
    ref: LLVMTargetDataRef;

    func getBitSize(&this, typ: &LLVMType) -> usize {
        trace("LLVMTargetData.getBitSize");
        return LLVMSizeOfTypeInBits(this.ref, typ.ref);
    }
    func getABISize(&this, typ: &LLVMType) -> usize {
        trace("LLVMTargetData.getABISize");
        return LLVMABISizeOfType(this.ref, typ.ref);
    }
    func getStoreSize(&this, typ: &LLVMType) -> usize {
        trace("LLVMTargetData.getStoreSize");
        return LLVMStoreSizeOfType(this.ref, typ.ref);
    }
    func getDataLayout(&this) -> LLVMDataLayout {
        trace("LLVMTargetData.getDataLayout");
        let c: &char = LLVMCopyStringRepOfTargetData(this.ref);
        return LLVMDataLayout {
            ref: c
        };
    }
}

func newLLVMTargetDataFromRef(ref: LLVMTargetDataRef) -> LLVMTargetData {
    return LLVMTargetData {
        ref: ref,
    };
}

struct LLVMTarget {
    ref: LLVMTargetRef;
    func createTargetMachine(&this, triple: &char, cpu: &char, features: &char) -> LLVMTargetMachine {
        trace("LLVMTarget.createTargetMachine");
        let target: LLVMTargetMachineRef = LLVMCreateTargetMachine(
            this.ref,
            triple,
            cpu,
            features,
            0,
            0,
            0
        );
        assert(!target.isNull(), "Could not create target machine");
        return newLLVMTargetMachineFromRef(target);
    }
}

func newLLVMTargetFromRef(ref: LLVMTargetRef) -> LLVMTarget {
    return LLVMTarget {
        ref: ref,
    };
}

struct LLVMTargetMachine {
    ref: LLVMTargetMachineRef;

    func writeToFile(&this, mod: LLVMModule, mode: i32, filepath: &char) {
        trace("LLVMTargetMachine.writeToFile");
        let err: LLVMString = blank;
        if (LLVMTargetMachineEmitToFile(this.ref, mod.ref, filepath, mode, &err) != 0) {
            todo_with_msg("couldnt write file");
        }
    }

    func getTargetData(&this) -> LLVMTargetData {
        trace("LLVMTargetMachine.getTargetData");
        let data: LLVMTargetDataRef = LLVMCreateTargetDataLayout(this.ref);
        assert(!data.isNull(), "Could not get TargetData");
        return newLLVMTargetDataFromRef(data);
    }
}

func newLLVMTargetMachineFromRef(ref: LLVMTargetMachineRef) -> LLVMTargetMachine {
    return LLVMTargetMachine {
        ref: ref,
    };
}
