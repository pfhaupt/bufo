import "prelude.bufo";
import "../LLVM/types.bufo";
import "../LLVM/module.bufo";
import "../LLVM/bindings.bufo";

struct LLVMDataLayout {
    ref: &char;
}

struct LLVMTargetData {
    ref: LLVMTargetDataRef;
}

func getBitSize(this: &LLVMTargetData, typ: &LLVMType) -> usize {
    trace("LLVMTargetData.getBitSize");
    return LLVM.SizeOfTypeInBits(this.ref, typ.ref);
}
func getABISize(this: &LLVMTargetData, typ: &LLVMType) -> usize {
    trace("LLVMTargetData.getABISize");
    return LLVM.ABISizeOfType(this.ref, typ.ref);
}
func getStoreSize(this: &LLVMTargetData, typ: &LLVMType) -> usize {
    trace("LLVMTargetData.getStoreSize");
    return LLVM.StoreSizeOfType(this.ref, typ.ref);
}
func getDataLayout(this: &LLVMTargetData) -> LLVMDataLayout {
    trace("LLVMTargetData.getDataLayout");
    let c: &char = LLVM.CopyStringRepOfTargetData(this.ref);
    return LLVMDataLayout {
        ref: c
    };
}

func newLLVMTargetDataFromRef(ref: LLVMTargetDataRef) -> LLVMTargetData {
    return LLVMTargetData {
        ref: ref,
    };
}

struct LLVMTarget {
    ref: LLVMTargetRef;
}

func createTargetMachine(this: &LLVMTarget, triple: &char, cpu: &char, features: &char) -> LLVMTargetMachine {
    trace("LLVMTarget.createTargetMachine");
    let target: LLVMTargetMachineRef = LLVM.CreateTargetMachine(
        this.ref,
        triple,
        cpu,
        features,
        0,
        0,
        0
    );
    assert(!isNull(target), "Could not create target machine");
    return newLLVMTargetMachineFromRef(target);
}

func newLLVMTargetFromRef(ref: LLVMTargetRef) -> LLVMTarget {
    return LLVMTarget {
        ref: ref,
    };
}

struct LLVMTargetMachine {
    ref: LLVMTargetMachineRef;
}

func writeToFile(this: &LLVMTargetMachine, mod: LLVMModule, mode: i32, filepath: &char) {
    trace("LLVMTargetMachine.writeToFile");
    let err: LLVMString = blank;
    if (LLVM.TargetMachineEmitToFile(this.ref, mod.ref, filepath, mode, &err) != 0) {
        todo_with_msg("couldnt write file");
    }
}

func getTargetData(this: &LLVMTargetMachine) -> LLVMTargetData {
    trace("LLVMTargetMachine.getTargetData");
    let data: LLVMTargetDataRef = LLVM.CreateTargetDataLayout(this.ref);
    assert(!isNull(data), "Could not get TargetData");
    return newLLVMTargetDataFromRef(data);
}

func newLLVMTargetMachineFromRef(ref: LLVMTargetMachineRef) -> LLVMTargetMachine {
    return LLVMTargetMachine {
        ref: ref,
    };
}
