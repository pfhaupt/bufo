
import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "../frontend/lexer.bufo";
import "../bufo.bufo";

import "./byte_buffer.bufo";

@os(WINDOWS) import "windows.bufo";
@os(WINDOWS) import "winapi/functions.bufo";

struct GPR { r: u8; }
comptime RAX: GPR = GPR { r: 0 };
comptime RCX: GPR = GPR { r: 1 };
comptime RDX: GPR = GPR { r: 2 };
comptime RBX: GPR = GPR { r: 3 };
comptime RSP: GPR = GPR { r: 4 };
comptime RBP: GPR = GPR { r: 5 };
comptime RSI: GPR = GPR { r: 6 };
comptime RDI: GPR = GPR { r: 7 };
comptime R8 : GPR = GPR { r: 8 };
comptime R9 : GPR = GPR { r: 9 };
comptime R10: GPR = GPR { r: 10 };
comptime R11: GPR = GPR { r: 11 };
comptime R12: GPR = GPR { r: 12 };
comptime R13: GPR = GPR { r: 13 };
comptime R14: GPR = GPR { r: 14 };
comptime R15: GPR = GPR { r: 15 };

struct FPR { r: u8; }
comptime XMM0: FPR = FPR { r: 0 };
comptime XMM1: FPR = FPR { r: 1 };
comptime XMM2: FPR = FPR { r: 2 };
comptime XMM3: FPR = FPR { r: 3 };
comptime XMM4: FPR = FPR { r: 4 };
comptime XMM5: FPR = FPR { r: 5 };

comptime ADDR_INDIRECT: u8 = 0;
comptime ADDR_DISP8   : u8 = 1;
comptime ADDR_DISP32  : u8 = 2;
comptime ADDR_REG     : u8 = 3;

struct ImmI8  { b: u8;  }
struct ImmI16 { b: u16; }
struct ImmI32 { b: u32; }
struct ImmI64 { b: u64; }
struct ImmF32 { b: f32; }
struct ImmF64 { b: f64; }

struct Assembler {
}

func pushImm(bytes: &ByteBuffer, imm: ImmI32) {
    trace("pushImm(ImmI32)");
    let p = &imm.b as &u8;
    push(bytes, p[0]); push(bytes, p[1]);
    push(bytes, p[2]); push(bytes, p[3]);
}
func pushImm(bytes: &ByteBuffer, imm: ImmI64) {
    trace("pushImm(ImmI64)");
    let p = &imm.b as &u8;
    push(bytes, p[0]); push(bytes, p[1]);
    push(bytes, p[2]); push(bytes, p[3]);
    push(bytes, p[4]); push(bytes, p[5]);
    push(bytes, p[6]); push(bytes, p[7]);
}

func modRM(bytes: &ByteBuffer, addr: u8, opext: u8, reg: GPR) {
    trace("modRM(AddrMode, Op, GPR)");
    let byte = shiftLeft(addr as usize, 6) as u8;
    byte = byte | shiftLeft(opext as usize, 3) as u8;
    byte = byte | (reg.r % 8);
    push(bytes, byte);
}

func modPrefix(bytes: &ByteBuffer, r: GPR) {
    trace("modPrefix(GPR)");
    let rex: u8 = '\x48' as u8;
    if (tag(&r) >= 8) rex = rex | 1;
    push(bytes, rex);
}

func mov(bytes: &ByteBuffer, to: GPR, from: GPR) {
    trace("mov(GPR, GPR)");
    modPrefix(bytes, from);
    push(bytes, '\x89');
    modRM(bytes, ADDR_REG, tag(&from), to);
}

func mov(bytes: &ByteBuffer, r: FPR, imm: ImmF32) {
    trace("mov(FPR, ImmF32)");
    let v = *(&imm.b as &u32);
    mov(bytes, RAX, ImmI32 { b: v });
    push(bytes, '\x66', '\x0F', '\x6E');
    modRM(bytes, ADDR_REG, r.r, RAX);
}
func mov(bytes: &ByteBuffer, r: FPR, imm: ImmF64) {
    trace("mov(FPR, ImmF64)");
    let v = *(&imm.b as &u64);
    mov(bytes, RAX, ImmI64 { b: v });
    push(bytes, '\x66', '\x48', '\x0F', '\x6E');
    modRM(bytes, ADDR_REG, r.r, RAX);
}

func mov(bytes: &ByteBuffer, r: GPR, imm: ImmI32) {
    trace("mov(GPR, ImmI32)");
    let opcode = (('\xb8' as u8) + (r.r % 8)) as char;
    push(bytes, opcode);
    pushImm(bytes, imm);
}
func mov(bytes: &ByteBuffer, r: GPR, imm: ImmI64) {
    trace("mov(GPR, ImmI64)");
    let opcode = (('\xb8' as u8) + (r.r % 8)) as char;
    modPrefix(bytes, r);
    push(bytes, opcode);
    pushImm(bytes, imm);
}

func push(bytes: &ByteBuffer, reg: GPR) {
    trace("push(GPR)");
    push(bytes, '\xFF');
    modRM(bytes, ADDR_REG, 6, reg);
}

func pop(bytes: &ByteBuffer, reg: GPR) {
    trace("pop(GPR)");
    push(bytes, '\x8F');
    modRM(bytes, ADDR_REG, 0, reg);
}

func mov(bytes: &ByteBuffer, r: GPR, offset: u32, imm: ImmI64) {
    trace("mov(GPR, u32, ImmI64)");
    mov(bytes, RBX, imm);
    assert(offset < 256, "only single byte offset for now");
    push(bytes, '\x48', '\x89', '\x5C', '\x24');
    push(bytes, offset as char);
}

func add(bytes: &ByteBuffer, r: GPR, imm: ImmI32) {
    trace("add(GPR, ImmI32)");
    modPrefix(bytes, r);
    push(bytes, '\x81');
    modRM(bytes, ADDR_REG, 0, r);
    pushImm(bytes, imm);
}

func sub(bytes: &ByteBuffer, r: GPR, imm: ImmI32) {
    trace("sub(GPR, ImmI32)");
    modPrefix(bytes, r);
    push(bytes, '\x81');
    modRM(bytes, ADDR_REG, 5, r);
    pushImm(bytes, imm);
}

func call(bytes: &ByteBuffer, r: GPR) {
    trace("call(GPR)");
    push(bytes, '\xFF');
    modRM(bytes, ADDR_REG, 2, r);
}

func push(bytes: &ByteBuffer, imm: ImmI64) {
    trace("push(ImmI64)");
    mov(bytes, RAX, imm);
    push(bytes, '\xFF');
    modRM(bytes, ADDR_REG, 6, RAX);
}

