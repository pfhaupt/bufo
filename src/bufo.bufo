import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "cmd.bufo";
import "./util/span.bufo";
import "./util/flags.bufo";
import "./util/arena.bufo";
import "./util/lists.bufo";
import "./frontend/nodes.bufo";
import "./frontend/lexer.bufo";
import "./frontend/parser.bufo";
import "./middleend/types.bufo";
import "./middleend/checker.bufo";
import "./backend/irgen.bufo";
import "./backend/cfa.bufo";
import "./backend/interp.bufo";
import "./backend/codegen_llvm.bufo";

@os(WINDOWS) import "windows.bufo";
@os(WINDOWS) import "winapi/functions.bufo";

@os(LINUX) import "linux.bufo";
@os(LINUX) import "posix/functions.bufo";
@os(LINUX) config {
    linker: "-lm",
}

let flagParser = FlagParser {};
struct Flags {
    file: &String;
    out: &String;
    verbose: &bool;
    warnSimple: &bool;
    warnExtra: &bool;
    warnUnused: &bool;
    target: &String;
    checkOnly: &bool;
    emitASM: &bool;
    emitBIR: &bool;
    emitLLVM: &bool;
    dontLink: &bool;
    linkDynamic: &bool;
    debug: &bool;
    trace: &bool;
}
let flags = Flags {};
func main(argc: i32, argv: &&char) -> i32 {
    setupStdHandles();
    @os(WINDOWS) if (!tryFind("cl.exe")) {
        C::fprintf(stderr, "%s: Developer environment is not initialized properly!\n", ERR_STR);
        C::fprintf(stderr, "%s: Could not find `cl.exe`.\n", NOTE_STR);
        C::fprintf(stderr, "%s: You can activate it by running `vcvarsall.bat x64` from your Visual Studio installation in the current terminal.\n", NOTE_STR);
        C::fprintf(stderr, "%s: You can find it here: `C:\\Program Files\\Microsoft Visual Studio\\<year>\\<version>", NOTE_STR);
        C::fprintf(stderr,    "\\VC\\Auxiliary\\Build\\vcvarsall.bat`.\n");
        C::fprintf(stderr, "%s: In the future the compiler will initialize this environment itself, but until then you will", NOTE_STR);
        C::fprintf(stderr,    " have to initialize the environment every time you start the terminal.\n");
        return 1;
    }
    for (let i: usize = 0; i < PARSED_TYPE_BUILTIN; i = i + 1) {
        push(&typeNodes, ParsedTypeNode {
            span: blank,
            kind: PARSED_TYPE_BUILTIN,
        });
    }
    flags.file = addStringFlag(&flagParser, "The input file", FLAG_MODE_MANDATORY);
    flags.out = addStringFlag(&flagParser, "o", "output", "The output file", FLAG_MODE_SINGLE | FLAG_MODE_MANDATORY);
    flags.verbose = addBoolFlag(&flagParser, "v", "verbose", "Enable verbose output");
    flags.warnSimple = addBoolFlag(&flagParser, "w", "warn", "Enable warnings");
    flags.warnExtra = addBoolFlag(&flagParser, "--warn-extra", "Enable extra warnings");
    flags.warnUnused = addBoolFlag(&flagParser, "--warn-unused", "Enable warnings about unused expression values, functions, etc.");
    let warnAll = addBoolFlag(&flagParser, "--warn-all", "Enable all warnings");
    flags.target = addStringFlag(&flagParser, "t", "target", "The target to compile for. Must be either Windows or Linux.");
    flags.checkOnly = addBoolFlag(&flagParser, "--check-only", "Stop after semantic analysis");
    flags.emitASM = addBoolFlag(&flagParser, "--emit-asm", "Save the generated assembly code in <output>.asm");
    flags.emitBIR = addBoolFlag(&flagParser, "--emit-bir", "Save the generated bufo IR in <output>.bir");
    flags.emitLLVM = addBoolFlag(&flagParser, "--emit-llvm", "Save the generated LLVM IR in <output>.ll");
    flags.dontLink = addBoolFlag(&flagParser, "--dont-link", "Stop after generating <output>.obj");
    flags.linkDynamic = addBoolFlag(&flagParser, "--link-dynamic", "Use the specified dynamic libraries to link instead of static libraries");
    flags.debug = addBoolFlag(&flagParser, "d", "debug", "Enable debug logs and other debugging measurements");
    flags.trace = addBoolFlag(&flagParser, "--trace", "Trace function calls");
    if (!runOn(&flagParser, argc, argv)) {
        showUsage(&flagParser);
        showHelp(&flagParser);
        return 1;
    }
    if (*flags.debug) debug = debug_active;
    // TODO: Build tracing into the IRGen
    if (*flags.trace) trace = trace_active;
    if (*warnAll) {
        *flags.warnExtra = true;
        *flags.warnSimple = true;
        *flags.warnUnused = true;
    }
    if (*flags.warnExtra && !*flags.warnSimple) {
        C::fprintf(stderr, "error: --warn-extra only works in combination with [-w|--warn]\n");
        return 1;
    }
    // TODO: @os() currently only checks WINDOWS or LINUX, would be cool if we could derive this
    //       from the provided target triple
    if (equals(flags.target, &newStringFromStrLit("x86_64-pc-windows-msvc"))) {
        *flags.target = newStringFromStrLit("WINDOWS");
    } else if (equals(flags.target, &newStringFromStrLit("x86_64-pc-linux-gnu"))) {
        *flags.target = newStringFromStrLit("LINUX");
    } else if (flags.target.length == 0) {
        @os(WINDOWS) *flags.target = newStringFromStrLit("WINDOWS");
        @os(LINUX) *flags.target = newStringFromStrLit("LINUX");
    } else {
        C::fprintf(stderr, "error: Unknown target %s\n", flags.target.buffer);
        showHelp(&flagParser);
        return 1;
    }
    let filepath: String = *flags.file;
    filepath = toAbsolutePath(&filepath);
    let fileSubStr: SubStr = asSubStr(&filepath);
    let string: String = readFileToString(flags.file.buffer);
    let sub: SubStr = newSubStrOfString(&string, 0, string.length);
    let parser: Parser = newParserFromSource(0, sub);
    if (!findStdAndAddToImports(&parser)) return 1;
    addImportRoot(&parser, newSubStrOfStrLit("./std/"));
    let project: ParsedFile = parseProject(&parser, fileSubStr);
    let checker: TypeChecker = newTypeChecker();
    if (!typeCheckProject(&checker, &project)) return 1;
    let generator: IRGen = newIRGenerator(&checker.lookup);
    if (!generateBytecode(&generator, &project)) return 1;
    if (!analyzeControlFlow(&generator)) return 1;
    if (*flags.checkOnly) return 0;
    let interp: IRInterp = newIRInterpreter(&generator);
    let llvmCodegen: LLVMCodegen = newLLVMCodegen(fileSubStr, &generator, &interp);
    if (!generateExecutable(&llvmCodegen, asSubStr(flags.out))) return 1;
    if (*flags.debug) {
        C::printf("files.length         = %llu\n", files.length);
        C::printf("topLevelItems.length = %llu\n", topLevelItems.length);
        C::printf("structDecls.length   = %llu\n", structDecls.length);
        C::printf("funcDecls.length     = %llu\n", funcDecls.length);
        C::printf("blocks.length        = %llu\n", blocks.length);
        C::printf("stmts.length         = %llu\n", stmts.length);
        C::printf("typeNodes.length     = %llu\n", typeNodes.length);
        C::printf("exprs.length         = %llu\n", exprs.length);
    }
    if (!linkExecutable()) return 1;
    drop(&string);
    return 0;
}

func findStdAndAddToImports(parser: &Parser) -> bool {
    let _my_path = getBufoPath();
    let my_path = newStringFromStrLit(_my_path);
    C::free(_my_path);
    let root = getRoot(&my_path);
    @os(WINDOWS) pushStr(&root, "\\std\\");
    @os(LINUX) pushStr(&root, "/std/");
    addImportRoot(parser, asSubStr(&root));
    return true;
}

@os(WINDOWS) func getBufoPath() -> &char {
    // TODO: Get actual size of MAX_PATH, as the user can set this to values other than 260
    comptime MAX_PATH: u32 = 260;
    let buf = ['\0'; 260];
    let length = WinAPI::GetModuleFileNameA(blank, &buf[0], MAX_PATH);
    let buffer = C::malloc(length as usize + 1);
    C::memset(buffer, 0, length as usize + 1);
    C::memcpy(buffer, &buf, length as usize);
    return buffer as &char;
}

@os(LINUX) func getBufoPath() -> &char {
    let buffer = C::malloc(1024);
    C::memset(buffer, 0, 1024);
    let n = readlink("/proc/self/exe", buffer, 1024);
    if (n < 0) {
        C::free(buffer);
        return null;
    }
    return buffer;
}

@os(WINDOWS) func linkExecutable() -> bool {
    if (*flags.dontLink) {
        return true;
    }
    if (!equals(flags.target, &newStringFromStrLit("WINDOWS"))) {
        C::fprintf(stderr, "%s: Cross-linking is not supported yet. Run with `--dont-link` to generate an object file.\n", ERR_STR);
        return false;
    }
    // if we find a non-standard linker, we'll use that one instead of the normal Windows linker.
    // On my system, linking the selfhost takes as long as doing the whole rest of the pipeline,
    // type checking, comptime evaluation etc.
    // radlink.exe brings down linking times from 1.8 seconds to 0.8 seconds, which is very nice.
    // radlink: https://github.com/EpicGamesExt/raddebugger
    let s: String = blank;
    if (tryFind("radlink.exe")) {
        s = newStringFromStrLit("radlink.exe ");
    } else if (tryFind("link.exe")) {
        s = newStringFromStrLit("link.exe ");
    } else {
        C::fprintf(stderr, "error: Could not find a linker in PATH. Did you forget to initialize a developer environment?\n");
        C::fprintf(stderr, "note: Currently we support the normal Visual Studio `link.exe`, and experimentally `radlink.exe` for improved linking times.\n");
        return false;
    }
    pushString(&s, flags.out);
    pushStr(&s, ".obj ");
    pushStr(&s, "/DEFAULTLIB:libcmt ");
    pushStr(&s, "/OUT:");
    pushString(&s, flags.out);
    for (let i: usize = 0; i < configs.length; i = i + 1) {
        let flag = at(&configs, i);
        if (flag.ignored) continue;
        for (let j: usize = 0; j < flag.configs.length; j = j + 1) {
            pushChar(&s, ' ');
            let _flag = at(&flag.configs, j);
            match (_flag) {
                &Config::Static(name) => {
                    if (*flags.linkDynamic) continue;
                    pushStr(&s, "\"");
                    pushSubStr(&s, &name.content);
                    pushStr(&s, "\"");
                }
                &Config::Dynamic(name) => {
                    if (!*flags.linkDynamic) continue;
                    pushStr(&s, "\"");
                    pushSubStr(&s, &name.content);
                    pushStr(&s, "\"");
                }
                &Config::Libpath(name) => {
                    let _p = toString(&name.content);
                    if (dirExists(_p.buffer)) {
                        pushStr(&s, "/LIBPATH:\"");
                        pushString(&s, &_p);
                        pushStr(&s, "\"");
                    }
                    drop(&_p);
                }
                &Config::Linker(name) => {
                    pushSubStr(&s, &name.content);
                }
                unknown => {
                    C::fprintf(stderr, "%s linkExecutable: Unknown tag %hhu!\n", FATAL_STR, tag(unknown));
                    C::exit(2);
                }
            }
        }
    }
    if (!*flags.verbose) {
        pushStr(&s, " /NOLOGO");
    }
    let cmd: Cmd = newCmdFromStrLit(s.buffer);
    cmd.log = *flags.verbose;
    let success = runSync(&cmd);
    drop(&s);
    return success;
}

@os(LINUX) func linkExecutable() -> bool {
    if (*flags.dontLink) {
        return true;
    }
    if (!equals(flags.target, &newStringFromStrLit("LINUX"))) {
        C::fprintf(stderr, "%s: Cross-linking is not supported yet. Run with `--dont-link` to generate an object file.\n", ERR_STR);
        return false;
    }
    let s: String = newStringFromStrLit("ld ");
    pushStr(&s, "-dynamic-linker ");
    pushStr(&s, "/lib64/ld-linux-x86-64.so.2 ");
    pushStr(&s, "/lib64/crt1.o ");
    pushString(&s, flags.out);
    pushStr(&s, ".obj ");
    pushStr(&s, "-lc ");
    pushStr(&s, "-o ");
    pushString(&s, flags.out);
    for (let i: usize = 0; i < configs.length; i = i + 1) {
        let flag = at(&configs, i);
        if (flag.ignored) continue;
        for (let j: usize = 0; j < flag.configs.length; j = j + 1) {
            let _flag = at(&flag.configs, j);
            match (_flag) {
                // TODO: Instead of using `-l`, figure out the full paths ourselves and pass that to ld
                &Config::Static(name) => {
                    if (*flags.linkDynamic) continue;
                    pushChar(&s, ' ');
                    pushStr(&s, "-l:");
                    pushSubStr(&s, &name.content);
                }
                &Config::Dynamic(name) => {
                    if (!*flags.linkDynamic) continue;
                    pushChar(&s, ' ');
                    pushSubStr(&s, &name.content);
                }
                &Config::Libpath(name) => {
                    let _p = toString(&name.content);
                    if (dirExists(_p.buffer)) {
                        pushChar(&s, ' ');
                        pushStr(&s, "-L");
                        pushString(&s, &_p);
                    }
                    drop(&_p);
                }
                &Config::Linker(name) => {
                    pushChar(&s, ' ');
                    pushSubStr(&s, &name.content);
                }
                unknown => {
                    C::fprintf(stderr, "%s linkExecutable: Unknown tag %hhu!\n", FATAL_STR, tag(unknown));
                    C::exit(2);
                }
            }
        }
    }
    let cmd: Cmd = newCmdFromStrLit(s.buffer);
    cmd.log = *flags.verbose;
    let success = runSync(&cmd);
    drop(&s);
    return success;
}
