import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "cmd.bufo";
import "./util/span.bufo";
import "./util/flags.bufo";
import "./util/arena.bufo";
import "./frontend/nodes.bufo";
import "./frontend/lexer.bufo";
import "./frontend/parser.bufo";
import "./middleend/types.bufo";
import "./middleend/checker.bufo";
import "./backend/irgen.bufo";
import "./backend/interp.bufo";
import "./backend/codegen_llvm.bufo";

let flagParser = FlagParser {};
struct Flags {
    file: &String;
    out: &String;
    verbose: &bool;
}
let flags = Flags {};
func main(argc: i32, argv: &&char) -> i32 {
    setupStdHandles();
    for (let i: usize = 0; i < PARSED_TYPE_BUILTIN; i = i + 1) {
        push(&typeNodes, ParsedTypeNode {
            span: blank,
            kind: PARSED_TYPE_BUILTIN,
        });
    }
    for (let i: usize = 0; i < TYPE_COUNT; i = i + 1) {
        push(&types, blank);
    }
    flags.file = addStringFlag(&flagParser, "The input file", FLAG_MODE_MANDATORY);
    flags.out = addStringFlag(&flagParser, "o", "output", "The output file", FLAG_MODE_SINGLE | FLAG_MODE_MANDATORY);
    flags.verbose = addBoolFlag(&flagParser, "v", "verbose", "Enable verbose output");
    if (!runOn(&flagParser, argc, argv)) return 1;
    let filepath: String = *flags.file;
    filepath = filepath.toAbsolutePath();
    let fileSubStr: SubStr = filepath.asSubStr();
    let string: String = readFileToString(flags.file.chars());
    let sub: SubStr = newSubStrOfString(&string, 0, string.length);
    let parser: Parser = newParserFromSource(0, sub);
    addImportRoot(&parser, newSubStrOfStrLit("./std/"));
    let project: ParsedModule = parseProject(&parser, fileSubStr);
    let checker: TypeChecker = newTypeChecker();
    if (!typeCheckProject(&checker, &project)) return 1;
    let generator: IRGen = newIRGenerator();
    if (!generateBytecode(&generator, &project)) return 1;
    let interp: IRInterp = newIRInterpreter(&generator);
    let llvmCodegen: LLVMCodegen = newLLVMCodegen(fileSubStr, &generator, &interp);
    if (!generateExecutable(&llvmCodegen, flags.out.asSubStr())) return 1;
    if (PRINT_DEBUG) {
        printf("modules.length       = %llu\n", modules.length);
        printf("topLevelItems.length = %llu\n", topLevelItems.length);
        printf("structDecls.length   = %llu\n", structDecls.length);
        printf("funcDecls.length     = %llu\n", funcDecls.length);
        printf("methods.length       = %llu\n", methods.length);
        printf("blocks.length        = %llu\n", blocks.length);
        printf("stmts.length         = %llu\n", stmts.length);
        printf("typeNodes.length     = %llu\n", typeNodes.length);
        printf("exprs.length         = %llu\n", exprs.length);
    }
    let s: String = newStringFromStrLit("link.exe ");
    s.pushString(flags.out);
    s.pushStr(".obj");
    s.pushStr(" /DEFAULTLIB:libcmt /OUT:");
    s.pushString(flags.out);
    for (let i: usize = 0; i < compilerFlags.length; i = i + 1) {
        s.pushChar(' ');
        let flag: &ParsedCompilerFlag = at(&compilerFlags, i);
        if (flag.flag.content.equals(&COMPILER_FLAG_LIBRARY)) {
            s.pushSubStr(&flag.value.content);
            s.pushStr(".lib");
        } else if (flag.flag.content.equals(&COMPILER_FLAG_LIBPATH)) {
            s.pushStr("/LIBPATH:");
            s.pushSubStr(&flag.value.content);
        } else if (flag.flag.content.equals(&COMPILER_FLAG_LINKER)) {
            s.pushSubStr(&flag.value.content);
        } else {
            unreachable("Exhaustive handling of compiler_flags");
        }
    }
    let cmd: Cmd = newCmdFromStrLit(s.chars());
    cmd.log = *flags.verbose;
    if (!cmd.runSync()) return 1;
    string.drop();
    return 0;
}
