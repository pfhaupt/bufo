import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "cmd.bufo";
import "./util/span.bufo";
import "./util/flags.bufo";
import "./util/arena.bufo";
import "./util/lists.bufo";
import "./frontend/nodes.bufo";
import "./frontend/lexer.bufo";
import "./frontend/parser.bufo";
import "./middleend/types.bufo";
import "./middleend/checker.bufo";
import "./backend/irgen.bufo";
import "./backend/interp.bufo";
import "./backend/codegen_llvm.bufo";

let flagParser = FlagParser {};
struct Flags {
    file: &String;
    out: &String;
    verbose: &bool;
    warnSimple: &bool;
    warnExtra: &bool;
    warnUnused: &bool;
}
let flags = Flags {};
func main(argc: i32, argv: &&char) -> i32 {
    setupStdHandles();
    for (let i: usize = 0; i < PARSED_TYPE_BUILTIN; i = i + 1) {
        push(&typeNodes, ParsedTypeNode {
            span: blank,
            kind: PARSED_TYPE_BUILTIN,
        });
    }
    for (let i: usize = 0; i < TYPE_COUNT; i = i + 1) {
        push(&types, blank);
    }
    flags.file = addStringFlag(&flagParser, "The input file", FLAG_MODE_MANDATORY);
    flags.out = addStringFlag(&flagParser, "o", "output", "The output file", FLAG_MODE_SINGLE | FLAG_MODE_MANDATORY);
    flags.verbose = addBoolFlag(&flagParser, "v", "verbose", "Enable verbose output");
    flags.warnSimple = addBoolFlag(&flagParser, "w", "warn", "Enable warnings");
    flags.warnExtra = addBoolFlag(&flagParser, "--warn-extra", "Enable extra warnings");
    flags.warnUnused = addBoolFlag(&flagParser, "--warn-unused", "Enable warnings about unused expression values, functions, etc.");
    if (!runOn(&flagParser, argc, argv)) {
        showUsage(&flagParser);
        showHelp(&flagParser);
        return 1;
    }
    if (*flags.warnExtra && !*flags.warnSimple) {
        fprintf(stderr, "error: --warn-extra only works in combination with [-w|--warn]\n");
        return 1;
    }
    let filepath: String = *flags.file;
    filepath = toAbsolutePath(&filepath);
    let fileSubStr: SubStr = asSubStr(&filepath);
    let string: String = readFileToString(flags.file.buffer);
    let sub: SubStr = newSubStrOfString(&string, 0, string.length);
    let parser: Parser = newParserFromSource(0, sub);
    addImportRoot(&parser, newSubStrOfStrLit("./std/"));
    let project: ParsedFile = parseProject(&parser, fileSubStr);
    let checker: TypeChecker = newTypeChecker();
    if (!typeCheckProject(&checker, &project)) return 1;
    let generator: IRGen = newIRGenerator();
    if (!generateBytecode(&generator, &project)) return 1;
    let interp: IRInterp = newIRInterpreter(&generator);
    let llvmCodegen: LLVMCodegen = newLLVMCodegen(fileSubStr, &generator, &interp);
    if (!generateExecutable(&llvmCodegen, asSubStr(flags.out))) return 1;
    if (PRINT_DEBUG) {
        printf("files.length         = %llu\n", files.length);
        printf("topLevelItems.length = %llu\n", topLevelItems.length);
        printf("structDecls.length   = %llu\n", structDecls.length);
        printf("funcDecls.length     = %llu\n", funcDecls.length);
        printf("blocks.length        = %llu\n", blocks.length);
        printf("stmts.length         = %llu\n", stmts.length);
        printf("typeNodes.length     = %llu\n", typeNodes.length);
        printf("exprs.length         = %llu\n", exprs.length);
    }
    if (!linkExecutable()) return 1;
    drop(&string);
    return 0;
}

@os(WINDOWS) func linkExecutable() -> bool {
    let s: String = newStringFromStrLit("link.exe ");
    pushString(&s, flags.out);
    pushStr(&s, ".obj");
    pushStr(&s, " /DEFAULTLIB:libcmt /OUT:");
    pushString(&s, flags.out);
    for (let i: usize = 0; i < configs.length; i = i + 1) {
        let flag = at(&configs, i);
        for (let j: usize = 0; j < flag.configs.length; j = j + 1) {
            pushChar(&s, ' ');
            let _flag = at(&flag.configs, j);
            if (_flag.kind == CONFIG_LIBNAME) {
                pushStr(&s, "\"");
                pushSubStr(&s, &_flag.value.content);
                pushStr(&s, ".lib\"");
            } else if (_flag.kind == CONFIG_LIBPATH) {
                pushStr(&s, "/LIBPATH:\"");
                pushSubStr(&s, &_flag.value.content);
                pushStr(&s, "\"");
            } else if (_flag.kind == CONFIG_LINKER) {
                pushSubStr(&s, &_flag.value.content);
            } else {
                unreachable("Exhaustive handling of compiler__flags");
            }
        }
    }
    for (let i: usize = 0; i < compilerFlags.length; i = i + 1) {
        pushChar(&s, ' ');
        let flag: &ParsedCompilerFlag = at(&compilerFlags, i);
        if (equals(&flag.flag.content, &COMPILER_FLAG_LIBRARY)) {
            pushStr(&s, "\"");
            pushSubStr(&s, &flag.value.content);
            pushStr(&s, ".lib\"");
        } else if (equals(&flag.flag.content, &COMPILER_FLAG_LIBPATH)) {
            pushStr(&s, "/LIBPATH:\"");
            pushSubStr(&s, &flag.value.content);
            pushStr(&s, "\"");
        } else if (equals(&flag.flag.content, &COMPILER_FLAG_LINKER)) {
            pushSubStr(&s, &flag.value.content);
        } else {
            unreachable("Exhaustive handling of compiler_flags");
        }
    }
    if (!*flags.verbose) {
        pushStr(&s, " /NOLOGO");
    }
    let cmd: Cmd = newCmdFromStrLit(s.buffer);
    cmd.log = *flags.verbose;
    let success = runSync(&cmd);
    drop(&s);
    return success;
}

@os(LINUX) func linkExecutable() -> bool {
    let s: String = newStringFromStrLit("ld ");
    pushStr(&s, "-dynamic-linker ");
    pushStr(&s, "/lib64/ld-linux-x86-64.so.2 ");
    pushStr(&s, "/lib64/crt1.o ");
    pushString(&s, flags.out);
    pushStr(&s, ".obj ");
    pushStr(&s, "-lc ");
    pushStr(&s, "-o ");
    pushString(&s, flags.out);
    for (let i: usize = 0; i < compilerFlags.length; i = i + 1) {
        pushChar(&s, ' ');
        let flag: &ParsedCompilerFlag = at(&compilerFlags, i);
        if (equals(&flag.flag.content, &COMPILER_FLAG_LIBRARY)) {
            pushStr(&s, "-l");
            pushSubStr(&s, &flag.value.content);
        } else if (equals(&flag.flag.content, &COMPILER_FLAG_LIBPATH)) {
            pushStr(&s, "-L");
            pushSubStr(&s, &flag.value.content);
        } else if (equals(&flag.flag.content, &COMPILER_FLAG_LINKER)) {
            pushSubStr(&s, &flag.value.content);
        } else {
            unreachable("Exhaustive handling of compiler_flags");
        }
    }
    let cmd: Cmd = newCmdFromStrLit(s.buffer);
    cmd.log = *flags.verbose;
    let success = runSync(&cmd);
    drop(&s);
    return success;
}
