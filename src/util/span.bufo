import "prelude.bufo";
import "string.bufo";
import "substr.bufo";
import "../frontend/nodes.bufo";
import "./arena.bufo";

struct Span {
    file: usize;
    start: usize;
    end: usize;
}
func equals(this: &Span, other: &Span) -> bool {
    return this.file == other.file && this.start == other.start && this.end == other.end;
}
func print(this: &Span) {
    let s: String = toString(this);
    print(&s);
    drop(&s);
}
func toString(this: &Span) -> String {
    // FIXME: The spans report in bytes, but the formatting makes it look like line and column
    let s: String = toString(&at(&files, this.file).origin);
    pushChar(&s, ':');
    pushNumber(&s, this.start);
    pushChar(&s, ':');
    pushNumber(&s, this.end);
    return s;
}
func comesBefore(this: &Span, other: &Span) -> bool {
    return this.start < other.start;
}

func newSpan(file: usize, start: usize, end: usize) -> Span {
    assert(end >= start, "Invalid size for newSpan()");
    return Span {
        file: file,
        start: start,
        end: end,
    };
}
func newSpanBetween(start: &Span, end: &Span) -> Span {
    // (100:105)+(104:109)
    assert(end.end >= start.end, "newSpanBetween: End Span can't end before Start Span.");
    assert(start.start <= end.start, "newSpanBetween: Start Span can't start after End Span.");
    assert(start.file == end.file, "newSpanBetween: Spans can't be in different files.");
    return Span {
        file: start.file,
        start: start.start,
        end: end.end
    };
}
func defaultSpan() -> Span {
    return Span {
        file: 0,
        start: 0,
        end: 0
    };
}
