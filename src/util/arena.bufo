import "prelude.bufo";
import "libc.bufo";
import "./span.bufo";
import "../frontend/nodes.bufo";
import "../middleend/types.bufo";

struct ArenaBlock {
    elements: Any;
    length: usize;
    capacity: usize;
    elemSize: usize;
    next: &ArenaBlock;
}

func push(this: &ArenaBlock, elem: Any, newCap: usize) {
    if (this.next != null) {
        push(this.next, elem, newCap);
        return;
    } else if (this.length == this.capacity) {
        this.next = allocateBlock(newCap, this.elemSize);
        push(this.next, elem, newCap);
        return;
    }
    assert(this.length < this.capacity);
    memcpy((this.elements as &usize) + this.length * this.elemSize, elem, this.elemSize);
    this.length = this.length + 1;
}
func at(this: &ArenaBlock, index: usize) -> Any {
    if (index >= this.capacity) {
        assert(this.next != null, "Out of bounds access in ArenaBlock");
        return at(this.next, index - this.capacity);
    }
    assert(index < this.length, "Out of bounds access in ArenaBlock");
    return (this.elements as &usize) + index * this.elemSize;
}
func last(this: &ArenaBlock) -> Any {
    assert(this.length > 0, "ArenaBlock.last() called on empty Arena");
    assert(this.next == null, "ArenaBlock.last() called on block in the middle of a chain");
    return at(this, this.length - 1);
}
func indexOf(this: &ArenaBlock, elem: Any) -> usize {
    if (this.elements <= elem && (elem as usize) <= (this.elements as usize) + this.capacity * this.elemSize) {
        let index: usize = ((elem as usize) - (this.elements as usize)) / this.elemSize;
        assert(index < this.length, "ArenaBlock.indexOf() does not contain the element");
        return index;
    } else {
        assert(this.next != null, "ArenaBlock.indexOf() does not contain the element");
        return this.capacity + indexOf(this.next, elem);
    }
}

comptime ARENA_SIZE_SMALL: usize = 16;
comptime ARENA_SIZE_MEDIUM: usize = 128;
comptime ARENA_SIZE_LARGE: usize = 1024;
comptime ARENA_SIZE_HUGE: usize = 8192;
func allocateBlock(cap: usize, size: usize) -> &ArenaBlock {
    let mem: Any = calloc(1, sizeof ArenaBlock);
    assert(mem != null, "Could not allocate ArenaBlock instance");
    let elements: Any = calloc(cap, size);
    assert(elements != null, "Could not allocate ArenaBlock elements");
    let block: &ArenaBlock = mem as &ArenaBlock;
    *block = ArenaBlock {
        elements: elements,
        length: 0,
        capacity: cap,
        next: null,
        elemSize: size,
    };
    return block;
}

struct ParsedConfigArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedConfigArena, elem: ParsedConfig) {
    trace("ParsedConfigArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_SMALL, sizeof ParsedConfig);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_SMALL);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedConfigArena, index: usize) -> &ParsedConfig {
    trace("ParsedConfigArena.at");
    assert(this.start != null, "ParsedConfigArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedConfig;
}
func last(this: &ParsedConfigArena) -> &ParsedConfig {
    trace("ParsedConfigArena.last");
    assert(this.end != null, "ParsedConfigArena.last() called on empty Arena");
    return last(this.end) as &ParsedConfig;
}
func indexOf(this: &ParsedConfigArena, elem: &ParsedConfig) -> usize {
    trace("ParsedConfigArena.indexOf");
    assert(this.start != null, "ParsedConfigArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedFileArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedFileArena, elem: ParsedFile) {
    trace("ParsedFileArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedFile);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedFileArena, index: usize) -> &ParsedFile {
    trace("ParsedFileArena.at");
    assert(this.start != null, "ParsedFileArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedFile;
}
func last(this: &ParsedFileArena) -> &ParsedFile {
    trace("ParsedFileArena.last");
    assert(this.end != null, "ParsedFileArena.last() called on empty Arena");
    return last(this.end) as &ParsedFile;
}
func indexOf(this: &ParsedFileArena, elem: &ParsedFile) -> usize {
    trace("ParsedFileArena.indexOf");
    assert(this.start != null, "ParsedFileArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedTopLevelItemArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedTopLevelItemArena, elem: ParsedTopLevelItem) {
    trace("ParsedTopLevelItemArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedTopLevelItem);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedTopLevelItemArena, index: usize) -> &ParsedTopLevelItem {
    trace("ParsedTopLevelItemArena.at");
    assert(this.start != null, "ParsedTopLevelItemArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedTopLevelItem;
}
func last(this: &ParsedTopLevelItemArena) -> &ParsedTopLevelItem {
    trace("ParsedTopLevelItemArena.last");
    assert(this.end != null, "ParsedTopLevelItemArena.last() called on empty Arena");
    return last(this.end) as &ParsedTopLevelItem;
}
func indexOf(this: &ParsedTopLevelItemArena, elem: &ParsedTopLevelItem) -> usize {
    trace("ParsedTopLevelItemArena.indexOf");
    assert(this.start != null, "ParsedTopLevelItemArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedModuleArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedModuleArena, elem: ParsedModule) {
    trace("ParsedModuleArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_SMALL, sizeof ParsedModule);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_SMALL);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedModuleArena, index: usize) -> &ParsedModule {
    trace("ParsedModuleArena.at");
    assert(this.start != null, "ParsedModuleArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedModule;
}
func last(this: &ParsedModuleArena) -> &ParsedModule {
    trace("ParsedModuleArena.last");
    assert(this.end != null, "ParsedModuleArena.last() called on empty Arena");
    return last(this.end) as &ParsedModule;
}
func indexOf(this: &ParsedModuleArena, elem: &ParsedModule) -> usize {
    trace("ParsedModuleArena.indexOf");
    assert(this.start != null, "ParsedModuleArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedStructDeclArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedStructDeclArena, elem: ParsedStructDecl) {
    trace("ParsedStructDeclArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_SMALL, sizeof ParsedStructDecl);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_SMALL);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedStructDeclArena, index: usize) -> &ParsedStructDecl {
    trace("ParsedStructDeclArena.at");
    assert(this.start != null, "ParsedStructDeclArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedStructDecl;
}
func last(this: &ParsedStructDeclArena) -> &ParsedStructDecl {
    trace("ParsedStructDeclArena.last");
    assert(this.end != null, "ParsedStructDeclArena.last() called on empty Arena");
    return last(this.end) as &ParsedStructDecl;
}
func indexOf(this: &ParsedStructDeclArena, elem: &ParsedStructDecl) -> usize {
    trace("ParsedStructDeclArena.indexOf");
    assert(this.start != null, "ParsedStructDeclArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedUnionDeclArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedUnionDeclArena, elem: ParsedUnionDecl) {
    trace("ParsedUnionDeclArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedUnionDecl);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedUnionDeclArena, index: usize) -> &ParsedUnionDecl {
    trace("ParsedUnionDeclArena.at");
    assert(this.start != null, "ParsedUnionDeclArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedUnionDecl;
}
func last(this: &ParsedUnionDeclArena) -> &ParsedUnionDecl {
    trace("ParsedUnionDeclArena.last");
    assert(this.end != null, "ParsedUnionDeclArena.last() called on empty Arena");
    return last(this.end) as &ParsedUnionDecl;
}
func indexOf(this: &ParsedUnionDeclArena, elem: &ParsedUnionDecl) -> usize {
    trace("ParsedUnionDeclArena.indexOf");
    assert(this.start != null, "ParsedUnionDeclArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedUnionVariantArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedUnionVariantArena, elem: ParsedUnionVariant) {
    trace("ParsedUnionVariantArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedUnionVariant);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedUnionVariantArena, index: usize) -> &ParsedUnionVariant {
    trace("ParsedUnionVariantArena.at");
    assert(this.start != null, "ParsedUnionVariantArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedUnionVariant;
}
func last(this: &ParsedUnionVariantArena) -> &ParsedUnionVariant {
    trace("ParsedUnionVariantArena.last");
    assert(this.end != null, "ParsedUnionVariantArena.last() called on empty Arena");
    return last(this.end) as &ParsedUnionVariant;
}
func indexOf(this: &ParsedUnionVariantArena, elem: &ParsedUnionVariant) -> usize {
    trace("ParsedUnionVariantArena.indexOf");
    assert(this.start != null, "ParsedUnionVariantArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedFuncDeclArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedFuncDeclArena, elem: ParsedFuncDecl) {
    trace("ParsedFuncDeclArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_LARGE, sizeof ParsedFuncDecl);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_LARGE);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedFuncDeclArena, index: usize) -> &ParsedFuncDecl {
    trace("ParsedFuncDeclArena.at");
    assert(this.start != null, "ParsedFuncDeclArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedFuncDecl;
}
func last(this: &ParsedFuncDeclArena) -> &ParsedFuncDecl {
    trace("ParsedFuncDeclArena.last");
    assert(this.end != null, "ParsedFuncDeclArena.last() called on empty Arena");
    return last(this.end) as &ParsedFuncDecl;
}
func indexOf(this: &ParsedFuncDeclArena, elem: &ParsedFuncDecl) -> usize {
    trace("ParsedFuncDeclArena.indexOf");
    assert(this.start != null, "ParsedFuncDeclArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedBlockArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedBlockArena, elem: ParsedBlock) {
    trace("ParsedBlockArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedBlock);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedBlockArena, index: usize) -> &ParsedBlock {
    trace("ParsedBlockArena.at");
    assert(this.start != null, "ParsedBlockArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedBlock;
}
func last(this: &ParsedBlockArena) -> &ParsedBlock {
    trace("ParsedBlockArena.last");
    assert(this.end != null, "ParsedBlockArena.last() called on empty Arena");
    return last(this.end) as &ParsedBlock;
}
func indexOf(this: &ParsedBlockArena, elem: &ParsedBlock) -> usize {
    trace("ParsedBlockArena.indexOf");
    assert(this.start != null, "ParsedBlockArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedStmtArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedStmtArena, elem: ParsedStmt) {
    trace("ParsedStmtArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_LARGE, sizeof ParsedStmt);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_LARGE);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedStmtArena, index: usize) -> &ParsedStmt {
    trace("ParsedStmtArena.at");
    assert(this.start != null, "ParsedStmtArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedStmt;
}
func last(this: &ParsedStmtArena) -> &ParsedStmt {
    trace("ParsedStmtArena.last");
    assert(this.end != null, "ParsedStmtArena.last() called on empty Arena");
    return last(this.end) as &ParsedStmt;
}
func indexOf(this: &ParsedStmtArena, elem: &ParsedStmt) -> usize {
    trace("ParsedStmtArena.indexOf");
    assert(this.start != null, "ParsedStmtArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedExprArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedExprArena, elem: ParsedExpr) {
    trace("ParsedExprArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_HUGE, sizeof ParsedExpr);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_HUGE);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedExprArena, index: usize) -> &ParsedExpr {
    trace("ParsedExprArena.at");
    assert(this.start != null, "ParsedExprArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedExpr;
}
func last(this: &ParsedExprArena) -> &ParsedExpr {
    trace("ParsedExprArena.last");
    assert(this.end != null, "ParsedExprArena.last() called on empty Arena");
    return last(this.end) as &ParsedExpr;
}
func indexOf(this: &ParsedExprArena, elem: &ParsedExpr) -> usize {
    trace("ParsedExprArena.indexOf");
    assert(this.start != null, "ParsedExprArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedTypeNodeArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedTypeNodeArena, elem: ParsedTypeNode) {
    trace("ParsedTypeNodeArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_HUGE, sizeof ParsedTypeNode);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_HUGE);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedTypeNodeArena, index: usize) -> &ParsedTypeNode {
    trace("ParsedTypeNodeArena.at");
    assert(this.start != null, "ParsedTypeNodeArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedTypeNode;
}
func last(this: &ParsedTypeNodeArena) -> &ParsedTypeNode {
    trace("ParsedTypeNodeArena.last");
    assert(this.end != null, "ParsedTypeNodeArena.last() called on empty Arena");
    return last(this.end) as &ParsedTypeNode;
}
func indexOf(this: &ParsedTypeNodeArena, elem: &ParsedTypeNode) -> usize {
    trace("ParsedTypeNodeArena.indexOf");
    assert(this.start != null, "ParsedTypeNodeArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct TypeArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &TypeArena, elem: Type) {
    trace("TypeArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_HUGE, sizeof Type);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_HUGE);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &TypeArena, index: usize) -> &Type {
    trace("TypeArena.at");
    assert(this.start != null, "TypeArena.at() called on empty Arena");
    return at(this.start, index) as &Type;
}
func last(this: &TypeArena) -> &Type {
    trace("TypeArena.last");
    assert(this.end != null, "TypeArena.last() called on empty Arena");
    return last(this.end) as &Type;
}
func indexOf(this: &TypeArena, elem: &Type) -> usize {
    trace("TypeArena.indexOf");
    assert(this.start != null, "TypeArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct DLLArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &DLLArena, elem: DLL) {
    trace("DLLArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_SMALL, sizeof DLL);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_SMALL);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &DLLArena, index: usize) -> &DLL {
    trace("DLLArena.at");
    assert(this.start != null, "DLLArena.at() called on empty Arena");
    return at(this.start, index) as &DLL;
}
func last(this: &DLLArena) -> &DLL {
    trace("DLLArena.last");
    assert(this.end != null, "DLLArena.last() called on empty Arena");
    return last(this.end) as &DLL;
}
func indexOf(this: &DLLArena, elem: &DLL) -> usize {
    trace("DLLArena.indexOf");
    assert(this.start != null, "DLLArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

struct ParsedPatternArena {
    start: &ArenaBlock;
    end: &ArenaBlock;
    length: usize;
}

func push(this: &ParsedPatternArena, elem: ParsedPattern) {
    trace("ParsedPatternArena.push");
    if (this.start == null) {
        this.start = allocateBlock(ARENA_SIZE_MEDIUM, sizeof ParsedPattern);
        assert(this.end == null);
        this.end = this.start;
    }
    push(this.end, &elem, ARENA_SIZE_MEDIUM);
    if (this.end.next != null) this.end = this.end.next;
    this.length = this.length + 1;
}
func at(this: &ParsedPatternArena, index: usize) -> &ParsedPattern {
    trace("ParsedPatternArena.at");
    assert(this.start != null, "ParsedPatternArena.at() called on empty Arena");
    return at(this.start, index) as &ParsedPattern;
}
func last(this: &ParsedPatternArena) -> &ParsedPattern {
    trace("ParsedPatternArena.last");
    assert(this.end != null, "ParsedPatternArena.last() called on empty Arena");
    return last(this.end) as &ParsedPattern;
}
func indexOf(this: &ParsedPatternArena, elem: &ParsedPattern) -> usize {
    trace("ParsedPatternArena.indexOf");
    assert(this.start != null, "ParsedPatternArena.indexOf() called on empty Arena");
    return indexOf(this.start, elem);
}

