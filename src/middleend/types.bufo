import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "../util/arena.bufo";
import "../util/lists.bufo";
import "../frontend/nodes.bufo";
import "../frontend/context.bufo";
import "./checker.bufo";

func nextMultipleOf(a: usize, b: usize) -> usize {
    if (a % b == 0) return a;
    return a + (b - (a % b));
}

comptime TYPE_INVALID: usize = 0;
comptime TYPE_UNKNOWN: usize = 1;
comptime TYPE_U8: usize      = 2;
comptime TYPE_U16: usize     = 3;
comptime TYPE_U32: usize     = 4;
comptime TYPE_U64: usize     = 5;
comptime TYPE_I8: usize      = 6;
comptime TYPE_I16: usize     = 7;
comptime TYPE_I32: usize     = 8;
comptime TYPE_I64: usize     = 9;
comptime TYPE_USIZE: usize   = 10;
comptime TYPE_ANY: usize     = 11;
comptime TYPE_BOOL: usize    = 12;
comptime TYPE_NONE: usize    = 13;
comptime TYPE_CHAR: usize    = 14;
comptime TYPE_F32: usize     = 15;
comptime TYPE_F64: usize     = 16;
comptime TYPE_COUNT: usize   = 17;

let types: TypeArena = blank;

comptime TYPE_KIND_UNKNOWN: usize = 0;
comptime TYPE_KIND_PRIMITIVE: usize = 1;
comptime TYPE_KIND_POINTER: usize = 2;
comptime TYPE_KIND_STRUCT: usize = 3;
comptime TYPE_KIND_ARRAY: usize = 4;
comptime TYPE_KIND_FUNCTION: usize = 5;
comptime TYPE_KIND_MODULE: usize = 6;
struct Type {
    kind: usize;
    typeIndex: usize;
    fnParams: TCStateList;
    arraySize: usize;
}

func getMangledName(this: &Type) -> String {
    if (this.kind == TYPE_KIND_PRIMITIVE) {
        // OPT: Make these Strings comptime
        if (this.typeIndex == TYPE_U8) return newStringFromStrLit("u8");
        else if (this.typeIndex == TYPE_U16) return newStringFromStrLit("u16");
        else if (this.typeIndex == TYPE_U32) return newStringFromStrLit("u32");
        else if (this.typeIndex == TYPE_U64) return newStringFromStrLit("u64");
        else if (this.typeIndex == TYPE_I8) return newStringFromStrLit("i8");
        else if (this.typeIndex == TYPE_I16) return newStringFromStrLit("i16");
        else if (this.typeIndex == TYPE_I32) return newStringFromStrLit("i32");
        else if (this.typeIndex == TYPE_I64) return newStringFromStrLit("i64");
        else if (this.typeIndex == TYPE_USIZE) return newStringFromStrLit("U");
        else if (this.typeIndex == TYPE_ANY) return newStringFromStrLit("A");
        else if (this.typeIndex == TYPE_BOOL) return newStringFromStrLit("B");
        else if (this.typeIndex == TYPE_NONE) return newStringFromStrLit("N");
        else if (this.typeIndex == TYPE_CHAR) return newStringFromStrLit("c");
        else if (this.typeIndex == TYPE_F32) return newStringFromStrLit("f32");
        else if (this.typeIndex == TYPE_F64) return newStringFromStrLit("f64");
        else todo_with_msg("what type is this");
    } else if (this.kind == TYPE_KIND_POINTER) {
        let s: String = newStringFromStrLit("P");
        let _s: String = getMangledName(at(&types, this.typeIndex));
        pushString(&s, &_s);
        drop(&_s);
        return s;
    } else if (this.kind == TYPE_KIND_STRUCT) {
        let s: String = newStringFromStrLit("S");
        let decl: &ParsedStructDecl = at(&structDecls, this.typeIndex);
        let hash: usize = hash(&decl.name.content, 3);
        if (hash < 10) pushNumber(&s, 0);
        if (hash < 100) pushNumber(&s, 0);
        pushNumber(&s, hash);
        return s;
    } else if (this.kind == TYPE_KIND_FUNCTION) {
        let s: String = newStringFromStrLit("F");
        let r = getMangledName(at(&types, this.typeIndex));
        pushString(&s, &r);
        drop(&r);
        for (let i: usize = 0; i < this.fnParams.length; i = i + 1) {
            if (i != this.fnParams.length - 1) pushChar(&s, '.');
            let p = getMangledName(at(&types, getType(at(&this.fnParams, i))));
            pushString(&s, &p);
            drop(&p);
        }
        return s;
    } else if (this.kind == TYPE_KIND_ARRAY) {
        let s: String = newStringFromStrLit("A");
        let r = getMangledName(at(&types, this.typeIndex));
        pushString(&s, &r);
        drop(&r);
        pushNumber(&s, this.arraySize);
        return s;
    } else if (this.kind == TYPE_KIND_UNKNOWN) {
        todo_with_msg("mangled type unknown???");
    } else {
        unreachable("Exhaustive handling of types in Type.getMangledName");
    }
}

func getID(this: &Type) -> usize {
    return indexOf(&types, this);
}

func equals(this: &Type, other: &Type) -> bool {
    if (this.kind == TYPE_KIND_POINTER) {
        if (other.kind == TYPE_KIND_PRIMITIVE)
            if (other.typeIndex == TYPE_ANY)
                return true;
        if (other.kind != TYPE_KIND_POINTER) return false;
        return equals(at(&types, this.typeIndex), at(&types, other.typeIndex));
    }
    if (this.kind == TYPE_KIND_PRIMITIVE)
        if (other.kind == TYPE_KIND_POINTER)
            if (this.typeIndex == TYPE_ANY)
                return true;
    if (this.kind != other.kind)
        return false;
    if (this.kind == TYPE_KIND_ARRAY) {
        return equals(at(&types, this.typeIndex), at(&types, other.typeIndex));
    }
    if (this.kind == TYPE_KIND_FUNCTION) {
        if (this.fnParams.length != other.fnParams.length)
            return false;
        if (!equals(at(&types, this.typeIndex), at(&types, other.typeIndex)))
            return false;
        for (let i: usize = 0; i < this.fnParams.length; i = i + 1) {
            let p1 = at(&types, getType(at(&this.fnParams, i)));
            let p2 = at(&types, getType(at(&other.fnParams, i)));
            if (!equals(p1, p2))
                return false;
        }
        return true;
    }
    if (this.kind == TYPE_KIND_PRIMITIVE
        || this.kind == TYPE_KIND_ARRAY
        || this.kind == TYPE_KIND_STRUCT
        || this.kind == TYPE_KIND_MODULE)
        return this.typeIndex == other.typeIndex;
    todo_with_msg("Type.equals");
}

func isUnknown(this: &Type) -> bool {
    return this.kind == TYPE_KIND_UNKNOWN;
}
func isFloat(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    return this.typeIndex == TYPE_F32
        || this.typeIndex == TYPE_F64;
}
func isInteger(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    if (isSignedInteger(this)) return true;
    return isUnsignedInteger(this);
}
func isSignedInteger(this: &Type) -> bool {
    return this.typeIndex == TYPE_I8
        || this.typeIndex == TYPE_I16
        || this.typeIndex == TYPE_I32
        || this.typeIndex == TYPE_I64;
}
func isUnsignedInteger(this: &Type) -> bool {
    return this.typeIndex == TYPE_U8
        || this.typeIndex == TYPE_U16
        || this.typeIndex == TYPE_U32
        || this.typeIndex == TYPE_U64
        || this.typeIndex == TYPE_USIZE;
}
func isChar(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    return this.typeIndex == TYPE_CHAR;
}
func isBoolean(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    return this.typeIndex == TYPE_BOOL;
}
func isNone(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    return this.typeIndex == TYPE_NONE;
}
func isAny(this: &Type) -> bool {
    if (this.kind != TYPE_KIND_PRIMITIVE) return false;
    return this.typeIndex == TYPE_ANY;
}
func isPrimitive(this: &Type) -> bool {
    return this.kind == TYPE_KIND_PRIMITIVE;
}
func isFunction(this: &Type) -> bool {
    return this.kind == TYPE_KIND_FUNCTION;
}
comptime FUNC_TYPE_VARIADIC: usize = pow2(0);
comptime FUNC_TYPE_NORETURN: usize = pow2(1);
func isVariadic(this: &Type) -> bool {
    if (!isFunction(this)) return false;
    return (this.arraySize & FUNC_TYPE_VARIADIC) != 0;
}
func isNoreturn(this: &Type) -> bool {
    if (!isFunction(this)) return false;
    return (this.arraySize & FUNC_TYPE_NORETURN) != 0;
}
func isPointer(this: &Type) -> bool {
    if (this.kind == TYPE_KIND_POINTER) return true;
    if (this.kind == TYPE_KIND_PRIMITIVE)
        return this.typeIndex == TYPE_ANY;
    return false;
}
func isStructPointer(this: &Type) -> bool {
    if (!isPointer(this)) return false;
    return isStruct(getUnderlyingType(this, false));
}
func isPointerTo(this: &Type, typ: usize) -> bool {
    if (!isPointer(this)) return false;
    return this.typeIndex == typ;
}
func isModule(this: &Type) -> bool {
    return this.kind == TYPE_KIND_MODULE;
}
func isStruct(this: &Type) -> bool {
    return this.kind == TYPE_KIND_STRUCT;
}
func isArray(this: &Type) -> bool {
    return this.kind == TYPE_KIND_ARRAY;
}
func isStructArray(this: &Type) -> bool {
    if (!isArray(this)) return false;
    return isStruct(getUnderlyingType(this, false));
}
func getUnderlyingType(this: &Type, deep: bool) -> &Type {
    let underlying: &Type = this;
    if (this.kind == TYPE_KIND_PRIMITIVE)
        assert(this.typeIndex != TYPE_ANY, "Type.getUnderlyingType() is not defined for Any");
    assert(isPointer(this) || isArray(this), "type.getUnderlyingType() called on non-pointer non-array");
    while (isPointer(underlying) || isArray(underlying)) {
        underlying = at(&types, underlying.typeIndex);
        if (!deep) break;
    }
    return underlying;
}
func toString(this: &Type) -> String {
    trace("Type.toString");
    if (this.kind == TYPE_KIND_PRIMITIVE) {
        // OPT: Make these Strings comptime
        if (this.typeIndex == TYPE_U8) return newStringFromStrLit("u8");
        else if (this.typeIndex == TYPE_U16) return newStringFromStrLit("u16");
        else if (this.typeIndex == TYPE_U32) return newStringFromStrLit("u32");
        else if (this.typeIndex == TYPE_U64) return newStringFromStrLit("u64");
        else if (this.typeIndex == TYPE_I8) return newStringFromStrLit("i8");
        else if (this.typeIndex == TYPE_I16) return newStringFromStrLit("i16");
        else if (this.typeIndex == TYPE_I32) return newStringFromStrLit("i32");
        else if (this.typeIndex == TYPE_I64) return newStringFromStrLit("i64");
        else if (this.typeIndex == TYPE_USIZE) return newStringFromStrLit("usize");
        else if (this.typeIndex == TYPE_ANY) return newStringFromStrLit("Any");
        else if (this.typeIndex == TYPE_BOOL) return newStringFromStrLit("bool");
        else if (this.typeIndex == TYPE_NONE) return newStringFromStrLit("none");
        else if (this.typeIndex == TYPE_CHAR) return newStringFromStrLit("char");
        else if (this.typeIndex == TYPE_F32) return newStringFromStrLit("f32");
        else if (this.typeIndex == TYPE_F64) return newStringFromStrLit("f64");
        else todo_with_msg("what type is this");
    } else if (this.kind == TYPE_KIND_POINTER) {
        let s: String = newStringFromStrLit("&");
        let _s: String = toString(at(&types, this.typeIndex));
        pushString(&s, &_s);
        drop(&_s);
        return s;
    } else if (this.kind == TYPE_KIND_STRUCT) {
        let decl: &ParsedStructDecl = at(&structDecls, this.typeIndex);
        return getFullName(decl);
    } else if (this.kind == TYPE_KIND_FUNCTION) {
        let s: String = newStringFromStrLit("func (");
        for (let i: usize = 0; i < this.fnParams.length; i = i + 1) {
            let param = at(&this.fnParams, i);
            let p: String = blank;
            if (isType(param)) {
                p = toString(at(&types, getType(param)));
            } else {
                p = newStringFromStrLit("<unknown>");
            }
            pushString(&s, &p);
            drop(&p);
            if (i != this.fnParams.length - 1) {
                pushChar(&s, ',');
                pushChar(&s, ' ');
            }
        }
        if (isVariadic(this)) {
            pushStr(&s, "...");
        }
        pushChar(&s, ')');
        let rt = at(&types, this.typeIndex);
        if (!isNone(rt)) {
            pushStr(&s, " -> ");
            let r = toString(rt);
            pushString(&s, &r);
            drop(&r);
        }
        return s;
    } else if (this.kind == TYPE_KIND_ARRAY) {
        let s: String = newStringFromStrLit("[");
        let _s: String = toString(at(&types, this.typeIndex));
        pushString(&s, &_s);
        drop(&_s);
        pushChar(&s, ';');
        pushChar(&s, ' ');
        pushNumber(&s, this.arraySize);
        pushChar(&s, ']');
        return s;
    } else if (this.kind == TYPE_KIND_UNKNOWN) {
        return newStringFromStrLit("<unknown>");
    } else {
        unreachable("Exhaustive handling of types in Type.toString");
    }
}
func getAlignment(this: &Type) -> usize {
    if (this.kind == TYPE_KIND_POINTER) {
        return 8;
    } else if (this.kind == TYPE_KIND_FUNCTION) {
        return 8;
    } else if (this.kind == TYPE_KIND_PRIMITIVE) {
        if (this.typeIndex == TYPE_UNKNOWN) unreachable("Type.getAlignment(TYPE_UNKNOWN) called");
        else if (this.typeIndex == TYPE_NONE)
            return 0;
        else if (this.typeIndex == TYPE_I8 || this.typeIndex == TYPE_U8 || this.typeIndex == TYPE_CHAR)
            return 1;
        else if (this.typeIndex == TYPE_BOOL)
            return 1;
        else if (this.typeIndex == TYPE_I16 || this.typeIndex == TYPE_U16)
            return 2;
        else if (this.typeIndex == TYPE_I32 || this.typeIndex == TYPE_U32 || this.typeIndex == TYPE_F32)
            return 4;
        else if (this.typeIndex == TYPE_I64 || this.typeIndex == TYPE_U64 || this.typeIndex == TYPE_F64)
            return 8;
        else if (this.typeIndex == TYPE_USIZE || this.typeIndex == TYPE_ANY)
            return 8;
        else {
            unreachable("Exhaustive handling of primitive types in Type.getAlignment");
        }
    } else if (this.kind == TYPE_KIND_ARRAY) {
        let t: &Type = at(&types, this.typeIndex);
        return getAlignment(t);
    } else if (this.kind == TYPE_KIND_STRUCT) {
        let info: &ParsedStructDecl = at(&structDecls, this.typeIndex);
        assert(isSuccess(&info.typeState), "Can only get alignment of valid structs");
        let maxAlign: usize = 1;
        for (let i: usize = 0; i < info.context.fieldLength; i = i + 1) {
            let td: &ParsedTypeNode = at(&typeNodes, getFieldTypeAtIndex(&info.context, i));
            assert(isSuccess(&td.typeState), "Expected valid field type");
            let tt: &Type = at(&types, getType(&td.typeState));
            let _a: usize = getAlignment(tt);
            if (_a > maxAlign) maxAlign = _a;
        }
        return maxAlign;
    } else {
        unreachable("Exhaustive handling of type kinds in Type.getAlignment");
    }
}
func getSize(this: &Type) -> usize {
    if (this.kind == TYPE_KIND_POINTER) {
        return 8;
    } else if (this.kind == TYPE_KIND_FUNCTION) {
        return 8;
    } else if (this.kind == TYPE_KIND_PRIMITIVE) {
        if (this.typeIndex == TYPE_UNKNOWN) unreachable("Type.getSize(TYPE_UNKNOWN) called");
        else if (this.typeIndex == TYPE_NONE)
            return 0;
        else if (this.typeIndex == TYPE_I8 || this.typeIndex == TYPE_U8 || this.typeIndex == TYPE_CHAR)
            return 1;
        else if (this.typeIndex == TYPE_BOOL)
            return 1;
        else if (this.typeIndex == TYPE_I16 || this.typeIndex == TYPE_U16)
            return 2;
        else if (this.typeIndex == TYPE_I32 || this.typeIndex == TYPE_U32 || this.typeIndex == TYPE_F32)
            return 4;
        else if (this.typeIndex == TYPE_I64 || this.typeIndex == TYPE_U64 || this.typeIndex == TYPE_F64)
            return 8;
        else if (this.typeIndex == TYPE_USIZE || this.typeIndex == TYPE_ANY)
            return 8;
        else {
            unreachable("Exhaustive handling of primitive types in Type.getSize");
        }
    } else if (this.kind == TYPE_KIND_MODULE) {
        return 0;
    } else if (this.kind == TYPE_KIND_ARRAY) {
        let t: &Type = at(&types, this.typeIndex);
        return getSize(t) * this.arraySize;
    } else if (this.kind == TYPE_KIND_STRUCT) {
        let info: &ParsedStructDecl = at(&structDecls, this.typeIndex);
        assert(isSuccess(&info.typeState), "Can only get size of valid structs");
        let size: usize = 0;
        let maxAlign: usize = 1;
        for (let i: usize = 0; i < info.context.fieldLength; i = i + 1) {
            let td: &ParsedTypeNode = at(&typeNodes, getFieldTypeAtIndex(&info.context, i));
            assert(isSuccess(&td.typeState), "Expected valid field type");
            let tt: &Type = at(&types, getType(&td.typeState));
            let _a: usize = getAlignment(tt);
            size = size + getSize(tt);
            size = nextMultipleOf(size, _a);
            if (_a > maxAlign) maxAlign = _a;
        }
        size = nextMultipleOf(size, maxAlign);
        return size;
    } else {
        unreachable("Exhaustive handling of type kinds in Type.getSize");
    }
}
func getParam(fnType: &Type, id: usize) -> &TCState {
    assert(isFunction(fnType), "getParam() called on non-function type");
    assert(id < fnType.fnParams.length, "Out of bounds access in getParam()");
    return at(&fnType.fnParams, id);
}
func getMaxFloatValue(this: &Type) -> f64 {
    assert(isFloat(this), "Type.getMaxFloatValue() called on non-Float");
    if (this.typeIndex == TYPE_F32) {
        let VAL: i32 = 2139095039;
        return *(&VAL as &f32) as f64;
    } else {
        let VAL: i64 = 9218868437227405311;
        return *(&VAL as &f64);
    }
}
func intoPointer(this: &Type) -> usize {
    return getID(newType(TYPE_KIND_POINTER, getID(this)));
}

func newType(kind: usize, id: usize) -> &Type {
    if (kind == TYPE_KIND_PRIMITIVE) {
        assert(id < TYPE_COUNT, "newType() attempted to use general purpose types");
        let t: &Type = at(&types, id);
        (*t).kind = kind;
        (*t).typeIndex = id;
        return t;
    }
    push(&types, Type {
        kind: kind,
        typeIndex: id,
    });
    return last(&types);
}

