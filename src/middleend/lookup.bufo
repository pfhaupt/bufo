import "prelude.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../util/arena.bufo";
import "../frontend/token.bufo";
import "../frontend/nodes.bufo";
import "../frontend/context.bufo";
import "../frontend/parser.bufo";
import "./checker.bufo";
import "./types.bufo";

struct Lookup {
    modules: ModuleLookupList;
}

func insertModule(this: &Lookup, mod: &ParsedModule) -> &ModuleLookup {
    trace("Lookup.insertModule");
    let lookup: ModuleLookup = ModuleLookup {
        globalID: getID(mod),
        origin: mod.origin,
        imports: blank,
        functions: blank,
        structs: blank,
        variables: blank,
    };
    // Global Scope
    push(&lookup.variables, blank);
    push(&this.modules, lookup);
    return last(&this.modules);
}

func resolveFunctionByName(this: &Lookup, currentModule: usize, name: &Token) -> FunctionLookupList {
    trace("Lookup.resolveFunctionByName");
    // FIXME: Would be cool if this method didn't create copies of the FunctionLookups
    let currModule: &ModuleLookup = at(&this.modules, currentModule);
    let list: FunctionLookupList = resolveFunctionByName(currModule, name);
    for (let i: usize = 0; i < currModule.imports.length; i = i + 1) {
        let imp: &ImportLookup = at(&currModule.imports, i);
        let importedModule: &ModuleLookup = at(&this.modules, imp.moduleID);
        let importList: FunctionLookupList = resolveFunctionByName(importedModule, name);
        extend(&list, &importList);
    }
    return list;
}

func resolveAllFunctionsWithReturnType(this: &Lookup, currentModule: usize, name: &Token, typ: &Type, list: &FunctionLookupList) -> bool {
    trace("Lookup.resolveAllFunctionsWithReturnType");
    // FIXME: Would be cool if this method didn't create copies of the FunctionLookups
    let currModule: &ModuleLookup = at(&this.modules, currentModule);
    if (!resolveAllFunctionsWithReturnType(currModule, name, typ, list)) {
        return false;
    }
    for (let i: usize = 0; i < currModule.imports.length; i = i + 1) {
        let imp: &ImportLookup = at(&currModule.imports, i);
        let importedModule: &ModuleLookup = at(&this.modules, imp.moduleID);
        if (!resolveAllFunctionsWithReturnType(importedModule, name, typ, list)) {
            return false;
        }
    }
    return true;
}

func resolveAllStructsWithField(this: &Lookup, currentModule: usize, name: &Token, typ: &Type) -> StructLookupList {
    trace("Lookup.resolveAllStructsWithField");
    // FIXME: Would be cool if this method didn't create copies of the StructLookups
    let currModule = at(&this.modules, currentModule);
    let list = resolveAllStructsWithField(currModule, name, typ);
    for (let i: usize = 0; i < currModule.imports.length; i = i + 1) {
        let imp = at(&currModule.imports, i);
        let importedModule = at(&this.modules, imp.moduleID);
        let importList = resolveAllStructsWithField(importedModule, name, typ);
        extend(&list, &importList);
    }
    return list;
}

func resolveVariableByName(this: &Lookup, currentModule: usize, name: &Token, scopes: &ScopeLookupList, var: &VariableLookup) -> bool {
    trace("Lookup.resolveVariableByName");
    debug(toString(&name.content).buffer);
    // FIXME: The commented loop underflows
    // for (let i: usize = scopes.length - 1; i >= 0; i = i - 1) {
    for (let _i: usize = 0; _i < scopes.length; _i = _i + 1) {
        let i: usize = scopes.length - _i - 1;
        let s: &ScopeLookup = at(scopes, i);
        for (let j: usize = 0; j < s.variables.length; j = j + 1) {
            let v: &VariableLookup = at(&s.variables, j);
            if (equals(&v.name.content, &name.content)) {
                debug("Variable found in current module");
                *var = *v;
                return true;
            }
        }
    }
    let mod: &ModuleLookup = at(&this.modules, currentModule);
    let globalScope: &ScopeLookup = at(&mod.variables, 0);
    for (let j: usize = 0; j < globalScope.variables.length; j = j + 1) {
        let v: &VariableLookup = at(&globalScope.variables, j);
        if (equals(&v.name.content, &name.content)) {
            debug("Variable found in global scope");
            *var = *v;
            return true;
        }
    }
    for (let i: usize = 0; i < mod.imports.length; i = i + 1) {
        let imp: usize = at(&mod.imports, i).moduleID;
        let mod: &ModuleLookup = at(&this.modules, imp);
        let globalScope: &ScopeLookup = at(&mod.variables, 0);
        for (let j: usize = 0; j < globalScope.variables.length; j = j + 1) {
            let v: &VariableLookup = at(&globalScope.variables, j);
            if (equals(&v.name.content, &name.content)) {
                debug("Variable found in import");
                *var = *v;
                return true;
            }
        }
    }
    debug("Variable not found");
    return false;
}

func resolveTypeByName(this: &Lookup, currentModule: usize, name: &Token, typ: &TypeLookup) -> bool {
    trace("Lookup.resolveTypeByName");
    let currModule: &ModuleLookup = at(&this.modules, currentModule);
    if (resolveTypeByName(currModule, name, typ)) return true;
    for (let i: usize = 0; i < currModule.imports.length; i = i + 1) {
        let imp: &ImportLookup = at(&currModule.imports, i);
        let importedModule: &ModuleLookup = at(&this.modules, imp.moduleID);
        if (resolveTypeByName(importedModule, name, typ)) return true;
    }
    return false;
}

func getTypeLookupForType(this: &Lookup, typ: &Type) -> TypeLookup {
    trace("Lookup.getTypeLookupForType");
    if (isStruct(typ)) {
        let strukt: &ParsedStructDecl = at(&structDecls, typ.typeIndex);
        let modID: usize = strukt.parentModule;
        let s: &StructLookup = getStructByGlobalID(at(&this.modules, modID), getID(strukt));
        return newTypeLookup(TYPE_LOOKUP_STRUCT, s);
    } else {
        unreachable("Lookup.getTypeLookupForType got non-struct type");
    }
}

func searchAllModulesForTypeName(this: &Lookup, name: &Token) -> TypeLookupList {
    trace("Lookup.searchAllModulesForTypeName");
    let list: TypeLookupList = blank;
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let t: TypeLookup = blank;
        if (resolveTypeByName(at(&this.modules, i), name, &t)) {
            push(&list, t);
        }
    }
    return list;
}
func searchAllModulesForFunctionName(this: &Lookup, name: &Token) -> FunctionLookupList {
    trace("Lookup.searchAllModulesForFunctionName");
    let list: FunctionLookupList = blank;
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let t: FunctionLookupList = resolveFunctionByName(at(&this.modules, i), name);
        extend(&list, &t);
    }
    return list;
}
func searchAllModulesForIdentifier(this: &Lookup, name: &Token) -> VariableLookupList {
    trace("Lookup.searchAllModulesForIdentifier");
    let list: VariableLookupList = blank;
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let m: &ModuleLookup = at(&this.modules, i);
        for (let j: usize = 0; j < m.variables.length; j = j + 1) {
            let s: &ScopeLookup = at(&m.variables, j);
            let v: VariableLookup = blank;
            if (getVariableByName(s, name.content, &v)) {
                push(&list, v);
            }
        }
    }
    return list;
}

struct ModuleLookup {
    globalID: usize;
    origin: SubStr;
    imports: ImportLookupList;
    functions: FunctionLookupList;
    structs: StructLookupList;
    variables: ScopeLookupList;
}

func equals(this: &ModuleLookup, other: &ModuleLookup) -> bool {
    return equals(&this.origin, &other.origin);
}

func insertTLI(this: &ModuleLookup, tli: &ParsedTopLevelItem) {
    trace("ModuleLookup.insertTLI");
    if (tli.kind == TLI_FUNC_DECL) {
        let fun: &ParsedFuncDecl = at(&funcDecls, tli.nodeID);
        let lookup: FunctionLookup = FunctionLookup {
            globalID: tli.nodeID,
            parentModule: this.globalID,
            name: fun.name,
            returnType: blank,
            params: blank,
            isVarArg: fun.params.isVarArg,
        };
        push(&this.functions, lookup);
    } else if (tli.kind == TLI_IMPORT) {
        let modID: usize = tli.nodeID;
        assert(modID < modules.length);
        let lookup: ImportLookup = ImportLookup {
            moduleID: modID
        };
        if (contains(&this.imports, &lookup)) {
            todo_with_msg("double import");
        }
        push(&this.imports, lookup);
    } else if (tli.kind == TLI_STRUCT_DECL) {
        let strukt: &ParsedStructDecl = at(&structDecls, tli.nodeID);
        let lookup: StructLookup = StructLookup {
            globalID: tli.nodeID,
            parentModule: this.globalID,
            name: strukt.name,
            fields: blank,
            typeID: getID(newType(TYPE_KIND_STRUCT, tli.nodeID)),
        };
        if (contains(&this.structs, &lookup)) {
            todo_with_msg("double struct");
        }
        push(&this.structs, lookup);
    } else if (tli.kind == TLI_VAR_DECL) {
        let varDecl: &ParsedStmt = at(&stmts, tli.nodeID);
        assert(varDecl.kind == STMT_VAR_DECL);
        let lookup: VariableLookup = VariableLookup {
            globalID: tli.nodeID,
            name: varDecl.varDeclContext.name,
            typeState: blank,
            isComptime: varDecl.varDeclContext.isComptime,
        };
        assert(this.variables.length == 1, "expected to find only the global scope");
        let globalScope: &ScopeLookup = last(&this.variables);
        let loc: Token = blank;
        if (isKnownVariable(globalScope, lookup.name.content, &loc)) {
            todo_with_msg("double global var");
        }
        addVariable(globalScope, lookup);
    } else {
        todo_with_msg("insert tli");
    }
}

func containsDuplicateFunction(this: &ModuleLookup, function: &FunctionLookup, dupl: &&FunctionLookup) -> bool {
    trace("ModuleLookup.containsDuplicateFunction");
    let name: String = getMangledName(at(&funcDecls, function.globalID));
    let duplicate: bool = false;
    for (let i: usize = 0; !duplicate && i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (f == function) continue;
        let n: String = getMangledName(at(&funcDecls, f.globalID));
        if (equals(&name, &n)) {
            *dupl = f;
            duplicate = true;
        }
        drop(&n);
    }
    return duplicate;
}

func getFunctionByGlobalID(this: &ModuleLookup, funcID: usize) -> &FunctionLookup {
    trace("ModuleLookup.getFunctionByGlobalID");
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (f.globalID == funcID) {
            return f;
        }
    }
    unreachable("Lookup failed to find function based on global ID!");
}

func getStructByGlobalID(this: &ModuleLookup, structID: usize) -> &StructLookup {
    trace("ModuleLookup.getStructByGlobalID");
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        if (s.globalID == structID) {
            return s;
        }
    }
    unreachable("Lookup failed to find struct based on global ID!");
}

func resolveFunctionByName(this: &ModuleLookup, name: &Token) -> FunctionLookupList {
    trace("ModuleLookup.resolveFunctionByName");
    let list: FunctionLookupList = blank;
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (equals(&f.name.content, &name.content)) {
            push(&list, *f);
        }
    }
    return list;
}

func resolveAllFunctionsWithReturnType(this: &ModuleLookup, name: &Token, typ: &Type, list: &FunctionLookupList) -> bool {
    trace("ModuleLookup.resolveAllFunctionsWithReturnType");
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (!equals(&f.name.content, &name.content)) {
            continue;
        }
        let t = at(&types, getType(&f.returnType));
        if (equals(t, typ)) {
            push(list, *f);
        }
    }
    return true;
}

func resolveAllStructsWithField(this: &ModuleLookup, name: &Token, typ: &Type) -> StructLookupList {
    trace("ModuleLookup.resolveAllStructsWithField");
    let list: StructLookupList = blank;
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        let v: VariableLookup = blank;
        if (resolveFieldByName(s, name, &v)) {
            assert(isType(&v.typeState));
            let t = at(&types, getType(&v.typeState));
            if (equals(t, typ)) {
                push(&list, *s);
            }
        }
    }
    return list;
}

func resolveTypeByName(this: &ModuleLookup, name: &Token, typ: &TypeLookup) -> bool {
    trace("ModuleLookup.resolveTypeByName");
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        if (equals(&s.name.content, &name.content)) {
            *typ = newTypeLookup(TYPE_LOOKUP_STRUCT, s);
            return true;
        }
    }
    return false;
}

struct ImportLookup {
    moduleID: usize;
}

func equals(this: &ImportLookup, other: &ImportLookup) -> bool {
    return this.moduleID == other.moduleID;
}

struct FunctionLookup {
    globalID: usize;
    parentModule: usize;
    name: Token;
    returnType: TCState;
    params: VariableLookupList;
    isVarArg: bool;
}

func setReturnType(this: &FunctionLookup, typ: TCState) {
    trace("FunctionLookup.setReturnType");
    this.returnType = typ;
}

func addParameter(this: &FunctionLookup, globalID: usize, name: Token, typeState: TCState) {
    trace("FunctionLookup.addParameter");
    push(&this.params, VariableLookup {
        globalID: globalID,
        name: name,
        typeState: typeState,
        // REVIEW: Comptime params?
        isComptime: false,
    });
}

func checkForDuplicateParam(this: &FunctionLookup, name: &Token, dupl: &VariableLookup) -> bool {
    trace("FunctionLookup.checkForDuplicateParam");
    for (let i: usize = 0; i < this.params.length; i = i + 1) {
        let param: &VariableLookup = at(&this.params, i);
        if (equals(&param.name.content, &name.content)) {
            *dupl = *param;
            return true;
        }
    }
    return false;
}

func equals(this: &FunctionLookup, other: &FunctionLookup) -> bool {
    warning("When are two functions equal");
    return equals(&this.name, &other.name);
}

comptime TYPE_LOOKUP_INVALID: usize = 0;
comptime TYPE_LOOKUP_STRUCT: usize = 1;
struct TypeLookup {
    kind: usize;
    actual: Any;
}

func getName(this: &TypeLookup) -> String {
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return toString(&asStruct(this).name.content);
    } else {
        unreachable("Exhaustive handling in TypeLookup.getName");
    }
}

func getLocation(this: &TypeLookup) -> String {
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return toString(&asStruct(this).name.span);
    } else {
        unreachable("Exhaustive handling in TypeLookup.getLocation");
    }
}

func equals(this: &TypeLookup, other: &TypeLookup) -> bool {
    if (this.kind != other.kind) return false;
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return equals(asStruct(this), asStruct(other));
    }
    unreachable("Exhaustive handling in TypeLookup.equals");
}

func isStruct(this: &TypeLookup) -> bool {
    return this.kind == TYPE_LOOKUP_STRUCT;
}

func asStruct(this: &TypeLookup) -> &StructLookup {
    assert(isStruct(this), "Attempted to convert non-struct TypeLookup into StructLookup");
    return this.actual as &StructLookup;
}

func newTypeLookup(kind: usize, actual: Any) -> TypeLookup {
    return TypeLookup {
        kind: kind,
        actual: actual
    };
}

struct StructLookup {
    globalID: usize;
    parentModule: usize;
    name: Token;
    fields: VariableLookupList;
    typeID: usize;
}

func asTypeLookup(this: &StructLookup) -> TypeLookup {
    return newTypeLookup(TYPE_LOOKUP_STRUCT, this);
}
func equals(this: &StructLookup, other: &StructLookup) -> bool {
    if (this.parentModule != other.parentModule) return false;
    return equals(&this.name.content, &other.name.content);
}

func resolveFieldByName(this: &StructLookup, name: &Token, out: &VariableLookup) -> bool {
    trace("StructLookup.resolveFieldByName");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            *out = *f;
            return true;
        }
    }
    return false;
}

func hasField(this: &StructLookup, name: &SubStr) -> bool {
    trace("StructLookup.hasField");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, name)) {
            return true;
        }
    }
    return false;
}

func getIndexByName(this: &StructLookup, name: &Token) -> usize {
    trace("StructLookup.getIndexByName");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            return i;
        }
    }
    assert(hasField(this, &name.content), "StructLookup.getIndexByName() called when StructLookup.hasField() == false");
    unreachable("StructLookup.getIndexByName does not have a field with the given name");
}

func checkForDuplicateField(this: &StructLookup, name: &Token, dupl: &VariableLookup) -> bool {
    trace("StructLookup.checkForDuplicateField");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            *dupl = *f;
            return true;
        }
    }
    return false;
}

func addField(this: &StructLookup, globalID: usize, name: Token, typeState: TCState) {
    trace("StructLookup.addField");
    push(&this.fields, VariableLookup {
        globalID: globalID,
        name: name,
        typeState: typeState,
        // REVIEW: Comptime fields?
        isComptime: false,
    });
}

struct VariableLookup {
    globalID: usize;
    name: Token;
    typeState: TCState;
    isComptime: bool;
}

func isParameter(this: &VariableLookup) -> bool {
    return this.globalID >= NODE_ID_OFFSET;
}

func equals(this: &VariableLookup, other: &VariableLookup) -> bool {
    return equals(&this.name.content, &other.name.content);
}

struct ScopeLookup {
    variables: VariableLookupList;
}

func equals(this: &ScopeLookup, other: &ScopeLookup) -> bool {
    todo_with_msg("when are two scopes equal");
}
func addVariable(this: &ScopeLookup, variable: VariableLookup) {
    trace("ScopeLookup.addVariable");
    push(&this.variables, variable);
}

func isKnownVariable(this: &ScopeLookup, name: SubStr, existing: &Token) -> bool {
    trace("ScopeLookup.isKnownVariable");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *existing = v.name;
            return true;
        }
    }
    return false;
}

func getVarIndexByName(this: &ScopeLookup, name: SubStr, index: &usize) -> bool {
    trace("ScopeLookup.getVarIndexByName");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *index = i;
            return true;
        }
    }
    return false;
}

func getVariableByName(this: &ScopeLookup, name: SubStr, var: &VariableLookup) -> bool {
    trace("ScopeLookup.getVariableByName");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *var = *v;
            return true;
        }
    }
    return false;
}

func getVariableAtIndex(this: &ScopeLookup, index: usize) -> &VariableLookup {
    trace("ScopeLookup.getVariableAtIndex");
    return at(&this.variables, index);
}

func clear(this: &ScopeLookup) {
    clear(&this.variables);
}

