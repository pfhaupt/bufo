import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../util/arena.bufo";
import "../frontend/lexer.bufo";
import "../frontend/token.bufo";
import "../frontend/nodes.bufo";
import "../frontend/context.bufo";
import "../frontend/parser.bufo";
import "./checker.bufo";
import "./types.bufo";

struct Lookup {
    files: ModuleLookupList;
}

func insertFile(this: &Lookup, file: &ParsedFile) -> &ModuleLookup {
    trace("Lookup.insertFile");
    let lookup = ModuleLookup {
        name: newToken(0, &newSubStrOfStrLit("<file module>"), 0, TOKEN_IDENT),
        globalID: getID(file.mod),
        globalLookup: this,
    };
    // Global Scope
    push(&lookup.variables, blank);
    push(&this.files, lookup);
    return last(&this.files);
}

func getFunctionByGlobalID(this: &Lookup, funcID: usize) -> &FunctionLookup {
    trace("FileLookup.getFunctionByGlobalID");
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let f = getFunctionByGlobalID(at(&this.files, i), funcID);
        if (f != null) return f;
    }
    unreachable("Lookup failed to find function based on global ID!");
}
func getModuleByGlobalID(this: &Lookup, modID: usize) -> &ModuleLookup {
    trace("FileLookup.getModuleByGlobalID");
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let m = getModuleByGlobalID(at(&this.files, i), modID);
        if (m != null) return m;
    }
    unreachable("Lookup failed to find module based on global ID!");
}
func getStructByGlobalID(this: &Lookup, structID: usize) -> &StructLookup {
    trace("FileLookup.getStructByGlobalID");
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let m = getStructByGlobalID(at(&this.files, i), structID);
        if (m != null) return m;
    }
    unreachable("Lookup failed to find struct based on global ID!");
}
func getUnionByGlobalDecl(this: &Lookup, decl: &ParsedUnionDecl) -> &UnionLookup {
    trace("FileLookup.getUnionByGlobalDecl");
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let m = getUnionByGlobalDecl(at(&this.files, i), decl);
        if (m != null) return m;
    }
    unreachable("Lookup failed to find union based on global declaration!");
}

func getTypeLookupForType(this: &Lookup, typ: &Type) -> TypeLookup {
    trace("Lookup.getTypeLookupForType");
    if (isStruct(typ)) {
        let strukt: &ParsedStructDecl = at(&structDecls, typ.typeIndex);
        if (strukt.parent.isFile) {
            let fileID: usize = strukt.parent.id as usize;
            let s: &StructLookup = getStructByGlobalID(at(&this.files, fileID), getID(strukt));
            return newTypeLookup(TYPE_LOOKUP_STRUCT, s);
        } else {
            let s: &StructLookup = getStructByGlobalID(this, getID(strukt));
            return newTypeLookup(TYPE_LOOKUP_STRUCT, s);
        }
    } else {
        unreachable("Lookup.getTypeLookupForType got non-struct type");
    }
}

func searchAllFilesForTypeName(this: &Lookup, name: &Token) -> TypeLookupList {
    trace("Lookup.searchAllFilesForTypeName");
    let list: TypeLookupList = blank;
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let t: TypeLookup = blank;
        if (resolveTypeByName(at(&this.files, i), name, &t, false)) {
            push(&list, t);
        }
    }
    return list;
}
func searchAllFilesForFunctionName(this: &Lookup, name: &Token) -> FunctionLookupList {
    trace("Lookup.searchAllFilesForFunctionName");
    let list: FunctionLookupList = blank;
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let t: FunctionLookupList = resolveFunctionByName(at(&this.files, i), name);
        extend(&list, &t);
    }
    return list;
}
func searchAllFilesForIdentifier(this: &Lookup, name: &Token) -> VariableLookupList {
    trace("Lookup.searchAllFilesForIdentifier");
    let list: VariableLookupList = blank;
    for (let i: usize = 0; i < this.files.length; i = i + 1) {
        let m = at(&this.files, i);
        for (let j: usize = 0; j < m.variables.length; j = j + 1) {
            let s: &ScopeLookup = at(&m.variables, j);
            let v: VariableLookup = blank;
            if (getVariableByName(s, name.content, &v)) {
                push(&list, v);
            }
        }
    }
    return list;
}

struct FileLookup {
    globalID: usize;
    origin: SubStr;
    mod: ModuleLookup;
}

func equals(this: &FileLookup, other: &FileLookup) -> bool {
    return equals(&this.origin, &other.origin);
}

func insertTLI(this: &ModuleLookup, tli: &ParsedTopLevelItem) -> bool {
    trace("FileLookup.insertTLI");
    assert(this.globalLookup != null, "insertTLI called on ModuleLookup without Global Lookup");
    if (tli.kind == TLI_FUNC_DECL) {
        let fun: &ParsedFuncDecl = at(&funcDecls, tli.nodeID);
        let lookup: FunctionLookup = FunctionLookup {
            globalID: tli.nodeID,
            parent: tli.parent,
            name: fun.name,
            params: blank,
            fnType: blank,
            isVarArg: fun.params.isVarArg,
        };
        push(&this.functions, lookup);
    } else if (tli.kind == TLI_IMPORT) {
        let fileID: usize = tli.nodeID;
        assert(fileID < files.length);
        let lookup: ImportLookup = ImportLookup {
            span: tli.span,
            fileID: fileID
        };
        if (contains(&this.imports, &lookup)) {
            let loc = toString(&tli.span);
            let _loc = toString(&get(&this.imports, &lookup).span);
            fprintf(stderr, "%s: %s: Can not import the same file twice.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: File already imported here.\n", _loc.buffer, NOTE_STR);
            drop(&_loc);
            drop(&loc);
            return false;
        }
        push(&this.imports, lookup);
    } else if (tli.kind == TLI_MOD_DECL) {
        let modID: usize = tli.nodeID;
        let mod: &ParsedModule = at(&modules, modID);
        let lookup: ModuleLookup = ModuleLookup {
            globalLookup: this.globalLookup,
            parent: at(&modules, this.globalID),
            name: mod.name,
            globalID: modID,
        };
        if (contains(&this.modules, &lookup)) {
            let loc = toString(&tli.span);
            let _loc = toString(&get(&this.modules, &lookup).name.span);
            let name = toString(&mod.name);
            fprintf(stderr, "%s: %s: Module redeclaration.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: Module `%s` already declared here.\n", _loc.buffer, NOTE_STR, name.buffer);
            drop(&name);
            drop(&_loc);
            drop(&loc);
            return false;
        }
        // Global Scope
        push(&lookup.variables, blank);
        for (let i: usize = 0; i < mod.tlis.length; i = i + 1)
            insertTLI(&lookup, at(&topLevelItems, *at(&mod.tlis, i)));
        push(&this.modules, lookup);
    } else if (tli.kind == TLI_STRUCT_DECL) {
        let strukt: &ParsedStructDecl = at(&structDecls, tli.nodeID);
        let lookup: StructLookup = StructLookup {
            globalID: tli.nodeID,
            parent: tli.parent,
            name: strukt.name,
            fields: blank,
            type: newType(TYPE_KIND_STRUCT, tli.nodeID),
        };
        if (contains(&this.structs, &lookup)) {
            let loc = toString(&tli.span);
            let _loc = toString(&get(&this.structs, &lookup).name.span);
            let name = toString(&strukt.name);
            fprintf(stderr, "%s: %s: Struct redeclaration.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: Struct `%s` already declared here.\n", _loc.buffer, NOTE_STR, name.buffer);
            drop(&name);
            drop(&_loc);
            drop(&loc);
            return false;
        }
        push(&this.structs, lookup);
    } else if (tli.kind == TLI_UNION_DECL) {
        let onion: &ParsedUnionDecl = at(&unionDecls, tli.nodeID);
        let lookup: UnionLookup = UnionLookup {
            global: onion,
            parent: tli.parent,
            name: onion.name,
            variants: blank,
            type: newType(TYPE_KIND_UNION, tli.nodeID),
        };
        if (contains(&this.unions, &lookup)) {
            let loc = toString(&tli.span);
            let _loc = toString(&get(&this.unions, &lookup).name.span);
            let name = toString(&onion.name);
            fprintf(stderr, "%s: %s: Union redeclaration.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: Union `%s` already declared here.\n", _loc.buffer, NOTE_STR, name.buffer);
            drop(&name);
            drop(&_loc);
            drop(&loc);
            return false;
        }
        push(&this.unions, lookup);
    } else if (tli.kind == TLI_VAR_DECL) {
        let varDecl: &ParsedStmt = at(&stmts, tli.nodeID);
        assert(varDecl.kind == STMT_VAR_DECL);
        let lookup: VariableLookup = VariableLookup {
            globalID: tli.nodeID,
            name: varDecl.varDeclContext.name,
            typeState: blank,
            isComptime: varDecl.varDeclContext.isComptime,
        };
        assert(this.variables.length == 1, "expected to find only the global scope");
        let globalScope: &ScopeLookup = last(&this.variables);
        let _loc: Token = blank;
        if (isKnownVariable(globalScope, lookup.name.content, &_loc)) {
            let loc = toString(&tli.span);
            let name = toString(&varDecl.varDeclContext.name);
            let _loc = toString(&_loc.span);
            fprintf(stderr, "%s: %s: Variable redeclaration.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: Variable `%s` already declared here.\n", _loc.buffer, NOTE_STR, name.buffer);
            drop(&name);
            drop(&_loc);
            drop(&loc);
            return false;
        }
        addVariable(globalScope, lookup);
    } else if (tli.kind == TLI_CONFIG) {
    } else {
        unreachable("Exhaustive handling of TLI kinds in insertTLI");
    }
    return true;
}
func containsDuplicateFunction(this: &ModuleLookup, function: &FunctionLookup, dupl: &&FunctionLookup) -> bool {
    trace("FileLookup.containsDuplicateFunction");
    assert(this != null, "containsDuplicateFunction called with null-Lookup");
    let name: String = getMangledName(at(&funcDecls, function.globalID));
    let duplicate: bool = false;
    for (let i: usize = 0; !duplicate && i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (f == function) continue;
        let n: String = getMangledName(at(&funcDecls, f.globalID));
        if (equals(&name, &n)) {
            *dupl = f;
            duplicate = true;
        }
        drop(&n);
    }
    return duplicate;
}

struct ImportLookup {
    span: Span;
    fileID: usize;
}

func equals(this: &ImportLookup, other: &ImportLookup) -> bool {
    return this.fileID == other.fileID;
}

struct ModuleLookup {
    globalID: usize;
    globalLookup: &Lookup;
    parent: &ParsedModule;
    name: Token;
    imports: ImportLookupList;
    modules: ModuleLookupList;
    functions: FunctionLookupList;
    structs: StructLookupList;
    unions: UnionLookupList;
    variables: ScopeLookupList;
}

func equals(this: &ModuleLookup, other: &ModuleLookup) -> bool {
    // same name, same parent -> equal
    if (!equals(&this.name.content, &other.name.content)) return false;
    return equals(this.parent, other.parent);
}
func getFunctionByGlobalID(this: &ModuleLookup, funcID: usize) -> &FunctionLookup {
    return getFunctionByGlobalID(this, funcID, true);
}
func getFunctionByGlobalID(this: &ModuleLookup, funcID: usize, checkImport: bool) -> &FunctionLookup {
    trace("ModuleLookup.getFunctionByGlobalID");
    assert(this != null, "getFunctionByGlobalID called with null-Lookup");
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (f.globalID == funcID) {
            return f;
        }
    }
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let mod = at(&this.modules, i);
        let fn = getFunctionByGlobalID(mod, funcID, false);
        if (fn != null) return fn;
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let fn = getFunctionByGlobalID(imp, funcID, false);
            if (fn != null) return fn;
        }
    }
    return null;
}
func getModuleByGlobalID(this: &ModuleLookup, modID: usize) -> &ModuleLookup {
    return getModuleByGlobalID(this, modID, true);
}
func getModuleByGlobalID(this: &ModuleLookup, modID: usize, checkImport: bool) -> &ModuleLookup {
    trace("ModuleLookup.getModuleByGlobalID");
    assert(this != null, "getModuleByGlobalID called with null-Lookup");
    if (this.globalID == modID) return this;
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let m: &ModuleLookup = at(&this.modules, i);
        let lookup = getModuleByGlobalID(m, modID);
        if (lookup != null) return lookup;
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let mod = getModuleByGlobalID(imp, modID, false);
            if (mod != null) return mod;
        }
    }
    return null;
}
func getStructByGlobalID(this: &ModuleLookup, structID: usize) -> &StructLookup {
    return getStructByGlobalID(this, structID, true);
}
func getStructByGlobalID(this: &ModuleLookup, structID: usize, checkImport: bool) -> &StructLookup {
    trace("ModuleLookup.getStructByGlobalID");
    assert(this != null, "getStructByGlobalID called with null-Lookup");
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        if (s.globalID == structID) {
            return s;
        }
    }
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let s = getStructByGlobalID(at(&this.modules, i), structID);
        if (s != null) return s;
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let str = getStructByGlobalID(imp, structID, false);
            if (str != null) return str;
        }
    }
    return null;
}
func getUnionByGlobalDecl(this: &ModuleLookup, decl: &ParsedUnionDecl) -> &UnionLookup {
    return getUnionByGlobalDecl(this, decl, true);
}
func getUnionByGlobalDecl(this: &ModuleLookup, decl: &ParsedUnionDecl, checkImport: bool) -> &UnionLookup {
    trace("ModuleLookup.getUnionByGlobalDecl");
    for (let i: usize = 0; i < this.unions.length; i = i + 1) {
        let e = at(&this.unions, i);
        if (e.global == decl) {
            return e;
        }
    }
    for (let i: usize = 0; i < this.modules.length; i = i + 1) {
        let m = getUnionByGlobalDecl(at(&this.modules, i), decl);
        if (m != null) return m;
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let e = getUnionByGlobalDecl(imp, decl, false);
            if (e != null) return e;
        }
    }
    return null;
}

comptime IDENT_NONE: u32 = 0;
comptime IDENT_FUNC: u32 = 1;
comptime IDENT_VAR: u32 = 2;
comptime IDENT_TYPE: u32 = 3;
func resolveIdentifierByName(this: &ModuleLookup, name: &Token, var: &&VariableLookup, typ: &TypeLookup, fun: &FunctionLookupList) -> u32 {
    trace("ModuleLookup.resolveIdentifierByName");
    assert(this != null, "resolveIdentifierByName called with null-Lookup");
    assert(this.variables.length > 0, "Unexpected length of global variable lookup");
    let global = last(&this.variables);
    for (let i: usize = 0; i < global.variables.length; i = i + 1) {
        let v = at(&global.variables, i);
        if (equals(&v.name.content, &name.content)) {
            *var = v;
            return IDENT_VAR;
        }
    }
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s = at(&this.structs, i);
        if (equals(&s.name.content, &name.content)) {
            *typ = newTypeLookup(TYPE_LOOKUP_STRUCT, s);
            return IDENT_TYPE;
        }
    }
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f = at(&this.functions, i);
        if (equals(&f.name.content, &name.content)) {
            // FIXME: Would be cool if this didn't create a copy
            push(fun, *f);
        }
    }
    if (fun.length > 0) return IDENT_FUNC;
    if (this.parent != null) {
        let parentMod = getModuleByGlobalID(this.globalLookup, getID(this.parent));
        return resolveIdentifierByName(parentMod, name, var, typ, fun);
    }
    return IDENT_NONE;
}

struct MLConfig {
    checkSelf: bool;
    checkImport: bool;
    checkModule: bool;
    checkParent: bool;
}

func resolveModuleByName(this: &ModuleLookup, name: &Token, mod: &&ModuleLookup) -> bool {
    return resolveModuleByName(this, name, mod, MLConfig {
        checkSelf: true,
        checkImport: true,
        checkModule: true,
        checkParent: true,
    });
}
// TODO: Maybe use a struct instead of passing so many boolean values here
func resolveModuleByName(this: &ModuleLookup, name: &Token, mod: &&ModuleLookup, c: MLConfig) -> bool {
    trace("ModuleLookup.resolveModuleByName");
    assert(this != null, "resolveModuleByName called with null-Lookup");
    if (c.checkSelf && equals(&this.name.content, &name.content)) {
        *mod = this;
        return true;
    }
    if (c.checkModule) {
        for (let i: usize = 0; i < this.modules.length; i = i + 1) {
            let submodule = at(&this.modules, i);
            if (resolveModuleByName(submodule, name, mod, MLConfig { checkSelf: true })) return true;
        }
    }
    if (c.checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            if (resolveModuleByName(imp, name, mod, MLConfig { checkSelf: true, checkModule: c.checkModule })) return true;
        }
    }
    if (c.checkParent && this.parent != null) {
        let parentMod = getModuleByGlobalID(this.globalLookup, getID(this.parent));
        return resolveModuleByName(parentMod, name, mod, MLConfig {
            checkSelf: true,
            checkImport: true,
            checkModule: c.checkModule,
            checkParent: true,
        });
    }
    return false;
}

func resolveVariableByName(this: &ModuleLookup, name: &Token, scopes: &ScopeLookupList, var: &VariableLookup) -> bool {
    return resolveVariableByName(this, name, scopes, var, true);
}
func resolveVariableByName(this: &ModuleLookup, name: &Token, scopes: &ScopeLookupList, var: &VariableLookup, checkImport: bool) -> bool {
    trace("ModuleLookup.resolveVariableByName");
    assert(this != null, "resolveVariableByName called with null-Lookup");
    for (let _i: usize = 0; _i < scopes.length; _i = _i + 1) {
        let i: usize = scopes.length - _i - 1;
        let s: &ScopeLookup = at(scopes, i);
        for (let j: usize = 0; j < s.variables.length; j = j + 1) {
            let v: &VariableLookup = at(&s.variables, j);
            if (equals(&v.name.content, &name.content)) {
                *var = *v;
                return true;
            }
        }
    }
    let globalScope: &ScopeLookup = at(&this.variables, 0);
    for (let j: usize = 0; j < globalScope.variables.length; j = j + 1) {
        let v: &VariableLookup = at(&globalScope.variables, j);
        if (equals(&v.name.content, &name.content)) {
            *var = *v;
            return true;
        }
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            if (resolveVariableByName(imp, name, scopes, var, false)) return true;
        }
    }
    if (this.parent != null) {
        let parentMod = getModuleByGlobalID(this.globalLookup, getID(this.parent));
        return resolveVariableByName(parentMod, name, scopes, var, true);
    }
    return false;
}
func resolveAllStructsWithField(this: &ModuleLookup, name: &Token, typ: &Type) -> StructLookupList {
    trace("ModuleLookup.resolveAllStructsWithField");
    assert(this != null, "resolveAllStructsWithField called with null-Lookup");
    let list: StructLookupList = blank;
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        let v: VariableLookup = blank;
        if (resolveFieldByName(s, name, &v)) {
            assert(isType(&v.typeState));
            let t = getType(&v.typeState);
            if (equals(t, typ)) {
                push(&list, *s);
            }
        }
    }
    return list;
}

func resolveTypeByName(this: &ModuleLookup, name: &Token, typ: &TypeLookup) -> bool {
    return resolveTypeByName(this, name, typ, true);
}
func resolveTypeByName(this: &ModuleLookup, name: &Token, typ: &TypeLookup, checkImport: bool) -> bool {
    trace("ModuleLookup.resolveTypeByName");
    assert(this != null, "resolveTypeByName called with null-Lookup");
    for (let i: usize = 0; i < this.structs.length; i = i + 1) {
        let s: &StructLookup = at(&this.structs, i);
        if (equals(&s.name.content, &name.content)) {
            *typ = newTypeLookup(TYPE_LOOKUP_STRUCT, s);
            return true;
        }
    }
    for (let i: usize = 0; i < this.unions.length; i = i + 1) {
        let e: &UnionLookup = at(&this.unions, i);
        if (equals(&e.name.content, &name.content)) {
            *typ = newTypeLookup(TYPE_LOOKUP_UNION, e);
            return true;
        }
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            if (resolveTypeByName(imp, name, typ, false)) return true;
        }
    }
    if (this.parent != null) {
        let parentMod = getModuleByGlobalID(this.globalLookup, getID(this.parent));
        return resolveTypeByName(parentMod, name, typ, true);
    }
    return false;
}
func resolveFunctionByName(this: &ModuleLookup, name: &Token) -> FunctionLookupList {
    return resolveFunctionByName(this, name, true);
}
func resolveFunctionByName(this: &ModuleLookup, name: &Token, checkImport: bool) -> FunctionLookupList {
    trace("ModuleLookup.resolveFunctionByName");
    assert(this != null, "resolveFunctionByName called with null-Lookup");
    let list: FunctionLookupList = blank;
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (equals(&f.name.content, &name.content)) {
            push(&list, *f);
        }
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let _list = resolveFunctionByName(imp, name, false);
            extend(&list, &_list);
        }
    }
    if (this.parent != null) {
        let parentMod = getModuleByGlobalID(this.globalLookup, getID(this.parent));
        let _list = resolveFunctionByName(parentMod, name, true);
        extend(&list, &_list);
    }
    return list;
}

func resolveAllFunctionsWithSignature(this: &ModuleLookup, name: &Token, typ: &Type) -> FunctionLookupList {
    return resolveAllFunctionsWithSignature(this, name, typ, true);
}
func resolveAllFunctionsWithSignature(this: &ModuleLookup, name: &Token, typ: &Type, checkImport: bool) -> FunctionLookupList {
    trace("ModuleLookup.resolveAllFunctionsWithSignature");
    // FIXME: Would be cool if this method didn't create copies of the FunctionLookups
    let list: FunctionLookupList = blank;
    for (let i: usize = 0; i < this.functions.length; i = i + 1) {
        let f: &FunctionLookup = at(&this.functions, i);
        if (!equals(&f.name.content, &name.content)) {
            continue;
        }
        let _rt = getType(&f.fnType);
        assert(isFunction(_rt));
        if (typ.fnParams.length != _rt.fnParams.length) continue;
        let retType1 = at(&types, typ.typeIndex);
        let retType2 = at(&types, _rt.typeIndex);
        if (!isUnknown(retType1)) if (!equals(retType1, retType2)) {
            continue;
        }
        let succ = true;
        for (let j: usize = 0; j < typ.fnParams.length; j = j + 1) {
            let p1 = getParam(typ, j);
            let p2 = getParam(_rt, j);
            if (!isType(p1)) continue;
            let t1 = getType(p1);
            let t2 = getType(p2);
            if (!isUnknown(t1)) if (!equals(t1, t2)) {
                succ = false;
                break;
            }
        }
        if (succ) {
            push(&list, *f);
        }
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            let _list = resolveAllFunctionsWithSignature(imp, name, typ, false);
            extend(&list, &_list);
        }
    }
    return list;
}
func resolveUnionByName(this: &ModuleLookup, name: &Token, onion: &&UnionLookup) -> bool {
    return resolveUnionByName(this, name, onion, true);
}
func resolveUnionByName(this: &ModuleLookup, name: &Token, onion: &&UnionLookup, checkImport: bool) -> bool {
    trace("ModuleLookup.resolveUnionByName");
    for (let i: usize = 0; i < this.unions.length; i = i + 1) {
        let e: &UnionLookup = at(&this.unions, i);
        if (equals(&e.name.content, &name.content)) {
            *onion = e;
            return true;
        }
    }
    if (checkImport) {
        for (let i: usize = 0; i < this.imports.length; i = i + 1) {
            let imp = at(&this.globalLookup.files, at(&this.imports, i).fileID);
            if (resolveUnionByName(imp, name, onion, false)) return true;
        }
    }
    return false;
}
struct FunctionLookup {
    globalID: usize;
    parent: TLIParent;
    name: Token;
    fnType: TCState;
    params: VariableLookupList;
    isVarArg: bool;
}

func addParameter(this: &FunctionLookup, globalID: usize, name: Token, typeState: TCState) {
    trace("FunctionLookup.addParameter");
    push(&this.params, VariableLookup {
        globalID: globalID,
        name: name,
        typeState: typeState,
        // REVIEW: Comptime params?
        isComptime: false,
    });
}

func checkForDuplicateParam(this: &FunctionLookup, name: &Token, dupl: &VariableLookup) -> bool {
    trace("FunctionLookup.checkForDuplicateParam");
    for (let i: usize = 0; i < this.params.length; i = i + 1) {
        let param: &VariableLookup = at(&this.params, i);
        if (equals(&param.name.content, &name.content)) {
            *dupl = *param;
            return true;
        }
    }
    return false;
}

func equals(this: &FunctionLookup, other: &FunctionLookup) -> bool {
    warning("When are two functions equal");
    return equals(&this.name, &other.name);
}

comptime TYPE_LOOKUP_INVALID: usize = 0;
comptime TYPE_LOOKUP_STRUCT: usize = 1;
comptime TYPE_LOOKUP_UNION: usize = 2;
struct TypeLookup {
    kind: usize;
    actual: Any;
}

func getName(this: &TypeLookup) -> String {
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return toString(&asStruct(this).name.content);
    } else if (this.kind == TYPE_LOOKUP_UNION) {
        return toString(&asUnion(this).name.content);
    } else {
        unreachable("Exhaustive handling in TypeLookup.getName");
    }
}

func getLocation(this: &TypeLookup) -> String {
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return toString(&asStruct(this).name.span);
    } else if (this.kind == TYPE_LOOKUP_UNION) {
        return toString(&asUnion(this).name.span);
    } else {
        unreachable("Exhaustive handling in TypeLookup.getLocation");
    }
}

func equals(this: &TypeLookup, other: &TypeLookup) -> bool {
    if (this.kind != other.kind) return false;
    if (this.kind == TYPE_LOOKUP_STRUCT) {
        return equals(asStruct(this), asStruct(other));
    } else if (this.kind == TYPE_LOOKUP_UNION) {
        return equals(asUnion(this), asUnion(other));
    }
    unreachable("Exhaustive handling in TypeLookup.equals");
}

func isStruct(this: &TypeLookup) -> bool {
    return this.kind == TYPE_LOOKUP_STRUCT;
}
func isUnion(this: &TypeLookup) -> bool {
    return this.kind == TYPE_LOOKUP_UNION;
}

func asStruct(this: &TypeLookup) -> &StructLookup {
    assert(isStruct(this), "Attempted to convert non-struct TypeLookup into StructLookup");
    return this.actual as &StructLookup;
}
func asUnion(this: &TypeLookup) -> &UnionLookup {
    assert(isUnion(this), "Attempted to convert non-union TypeLookup into UnionLookup");
    return this.actual as &UnionLookup;
}

func newTypeLookup(kind: usize, actual: Any) -> TypeLookup {
    return TypeLookup {
        kind: kind,
        actual: actual
    };
}

struct StructLookup {
    globalID: usize;
    parent: TLIParent;
    name: Token;
    fields: VariableLookupList;
    type: &Type;
}

func asTypeLookup(this: &StructLookup) -> TypeLookup {
    return newTypeLookup(TYPE_LOOKUP_STRUCT, this);
}
func equals(this: &StructLookup, other: &StructLookup) -> bool {
    if (!equals(&this.parent, &other.parent)) return false;
    return equals(&this.name.content, &other.name.content);
}

func resolveFieldByName(this: &StructLookup, name: &Token, out: &VariableLookup) -> bool {
    trace("StructLookup.resolveFieldByName");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            *out = *f;
            return true;
        }
    }
    return false;
}

func hasField(this: &StructLookup, name: &SubStr) -> bool {
    trace("StructLookup.hasField");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, name)) {
            return true;
        }
    }
    return false;
}

func getIndexByName(this: &StructLookup, name: &Token) -> usize {
    trace("StructLookup.getIndexByName");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            return i;
        }
    }
    assert(hasField(this, &name.content), "StructLookup.getIndexByName() called when StructLookup.hasField() == false");
    unreachable("StructLookup.getIndexByName does not have a field with the given name");
}

func checkForDuplicateField(this: &StructLookup, name: &Token, dupl: &VariableLookup) -> bool {
    trace("StructLookup.checkForDuplicateField");
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f: &VariableLookup = at(&this.fields, i);
        if (equals(&f.name.content, &name.content)) {
            *dupl = *f;
            return true;
        }
    }
    return false;
}

func addField(this: &StructLookup, globalID: usize, name: Token, typeState: TCState) {
    trace("StructLookup.addField");
    push(&this.fields, VariableLookup {
        globalID: globalID,
        name: name,
        typeState: typeState,
        // REVIEW: Comptime fields?
        isComptime: false,
    });
}

struct UnionLookup {
    global: &ParsedUnionDecl;
    parent: TLIParent;
    name: Token;
    variants: UnionVariantLookupList;
    type: &Type;
}

func asTypeLookup(this: &UnionLookup) -> TypeLookup {
    return newTypeLookup(TYPE_LOOKUP_UNION, this);
}
func equals(this: &UnionLookup, other: &UnionLookup) -> bool {
    if (!equals(&this.parent, &other.parent)) return false;
    return equals(&this.name.content, &other.name.content);
}

func resolveVariantByName(this: &UnionLookup, name: &Token, variant: &&UnionVariantLookup) -> bool {
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        let v: &UnionVariantLookup = at(&this.variants, i);
        if (equals(&v.global.name.content, &name.content)) {
            *variant = v;
            return true;
        }
    }
    return false;
}

func checkForDuplicateVariant(this: &UnionLookup, curr: &ParsedUnionVariant, dupl: &&UnionVariantLookup) -> bool {
    trace("UnionLookup.checkForDuplicateVariant");
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        let v: &UnionVariantLookup = at(&this.variants, i);
        if (equals(&v.global.name.content, &curr.name.content)) {
            *dupl = v;
            return true;
        }
    }
    return false;
}
func addVariant(this: &UnionLookup, variant: &ParsedUnionVariant, typeState: TCState) {
    trace("UnionLookup.addVariant");
    let tag = this.variants.length;
    push(&this.variants, UnionVariantLookup {
        global: variant,
        tag: tag,
        typeState: typeState,
    });
}

struct UnionVariantLookup {
    global: &ParsedUnionVariant;
    tag: usize;
    typeState: TCState;
}

func equals(this: &UnionVariantLookup, other: &UnionVariantLookup) -> bool {
    unreachable("UnionVariantLookup.equals");
}
func checkForDuplicateName(this: &UnionVariantLookup, name: &Token, dupl: &&Token) -> bool {
    trace("UnionVariantLookup.checkForDuplicateName");
    return checkForDuplicateName(this.global, name, dupl);
}

func intoStructLookup(this: &UnionVariantLookup) -> StructLookup {
    assert(this.global.kind == UNION_VARIANT_STRUCT, "intoStructLookup() called on non-struct variant");
    let lookup = StructLookup {
        globalID: getID(this.global),
        parent: this.global.parent,
        name: this.global.name,
    };
    for (let i: usize = 0; i < this.global.fields.length; i = i + 1) {
        let field = *at(&this.global.fields, i);
        let name = at(&this.global.names, i);
        assert(isSuccess(&field.typeState), "Expected valid variant field type at this point");
        push(&lookup.fields, VariableLookup {
            globalID: getID(field),
            name: *name,
            typeState: field.typeState,
            isComptime: false
        });
    }
    return lookup;
}

struct VariableLookup {
    globalID: usize;
    name: Token;
    typeState: TCState;
    isComptime: bool;
}

func isParameter(this: &VariableLookup) -> bool {
    return this.globalID >= NODE_ID_OFFSET;
}

func equals(this: &VariableLookup, other: &VariableLookup) -> bool {
    return equals(&this.name.content, &other.name.content);
}

struct ScopeLookup {
    variables: VariableLookupList;
}

func equals(this: &ScopeLookup, other: &ScopeLookup) -> bool {
    todo_with_msg("when are two scopes equal");
}
func addVariable(this: &ScopeLookup, variable: VariableLookup) {
    trace("ScopeLookup.addVariable");
    push(&this.variables, variable);
}

func isKnownVariable(this: &ScopeLookup, name: SubStr, existing: &Token) -> bool {
    trace("ScopeLookup.isKnownVariable");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *existing = v.name;
            return true;
        }
    }
    return false;
}

func getVarIndexByName(this: &ScopeLookup, name: SubStr, index: &usize) -> bool {
    trace("ScopeLookup.getVarIndexByName");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *index = i;
            return true;
        }
    }
    return false;
}

func getVariableByName(this: &ScopeLookup, name: SubStr, var: &VariableLookup) -> bool {
    trace("ScopeLookup.getVariableByName");
    for (let i: usize = 0; i < this.variables.length; i = i + 1) {
        let v: &VariableLookup = at(&this.variables, i);
        if (equals(&v.name.content, &name)) {
            *var = *v;
            return true;
        }
    }
    return false;
}

func getVariableAtIndex(this: &ScopeLookup, index: usize) -> &VariableLookup {
    trace("ScopeLookup.getVariableAtIndex");
    return at(&this.variables, index);
}

func clear(this: &ScopeLookup) {
    clear(&this.variables);
}

