import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "../bufo.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../frontend/context.bufo";
import "../frontend/token.bufo";
import "../frontend/nodes.bufo";
import "./types.bufo";
import "./lookup.bufo";

comptime ERROR_INVALID: usize = 0;
comptime ERROR_LOOKUP_NOT_READY: usize = 1;
comptime ERROR_NO_SUCH_IDENTIFIER: usize = 2;
comptime ERROR_NO_SUCH_FUNCTION: usize = 3;
comptime ERROR_NO_SUCH_METHOD: usize = 4;
comptime ERROR_USE_BEFORE_DECLARATION: usize = 5;
comptime ERROR_FIELD_COUNT_MISMATCH: usize = 6;
comptime ERROR_INDEXED_TYPE_MISMATCH: usize = 7;
comptime ERROR_UNEXPECTED_LITERAL: usize = 8;
comptime ERROR_ARRAY_SIZE_MISMATCH: usize = 9;
comptime ERROR_TYPE_MISMATCH: usize = 10;
comptime ERROR_INVALID_POINTER_ARITHMETIC: usize = 11;
comptime ERROR_DUPLICATE_PARAMETER: usize = 12;
comptime ERROR_DUPLICATE_FIELD: usize = 13;
comptime ERROR_UNKNOWN_FIELD: usize = 14;
comptime ERROR_DUPLICATE_FUNCTION: usize = 15;
comptime ERROR_NO_CALL_CANDIDATE: usize = 16;
comptime ERROR_VARIABLE_REDECLARATION: usize = 17;
comptime ERROR_RECURSIVE_TYPE: usize = 18;
comptime ERROR_DUPLICATE_METHOD: usize = 19;
comptime ERROR_BLANK_FOR_NULL: usize = 20;
comptime ERROR_NON_PRIMITIVE_CAST: usize = 21;
comptime ERROR_INDEXED_ACCESS_ON_NON_ARRAY: usize = 22;
comptime ERROR_RUNTIME_VALUE_IN_COMPTIME_CONTEXT: usize = 23;
comptime ERROR_ANY_DEREF: usize = 24;
comptime ERROR_MEMBER_ACCESS_NON_STRUCT: usize = 25;
comptime ERROR_MEMBER_ACCESS_TOO_MANY_OPTIONS: usize = 26;
comptime ERROR_FUNCTION_CALL_TOO_MANY_OPTIONS: usize = 27;

comptime TCSTATE_INVALID: usize = 0;
comptime TCSTATE_ERROR: usize = 1;
comptime TCSTATE_PLEASE_INFER: usize = 2;
comptime TCSTATE_TYPE: usize = 3;
struct TCState {
    kind: usize;
    typ: usize;
    name: Token;
}

func equals(this: &TCState, other: &TCState) -> bool {
    todo_with_msg("TCState.equals");
}

func isInvalid(this: &TCState) -> bool {
    return this.kind == TCSTATE_INVALID;
}
func wantsInfer(this: &TCState) -> bool {
    return this.kind == TCSTATE_PLEASE_INFER;
}
func isCriticalError(this: &TCState) -> bool {
    if (!isError(this)) return false;
    let err: usize = getError(this);
    return err == ERROR_NO_SUCH_IDENTIFIER
        || err == ERROR_NO_SUCH_FUNCTION
        || err == ERROR_NO_SUCH_METHOD
        || err == ERROR_DUPLICATE_FUNCTION
        || err == ERROR_DUPLICATE_METHOD
        || err == ERROR_DUPLICATE_FIELD;
}
func isError(this: &TCState) -> bool {
    return this.kind == TCSTATE_ERROR;
}

func isSuccess(this: &TCState) -> bool {
    return this.kind == TCSTATE_TYPE;
}

func isType(this: &TCState) -> bool {
    return this.kind == TCSTATE_TYPE;
}

func getType(this: &TCState) -> usize {
    if (!isType(this)) {
        fprintf(stderr, "ERROR: getType(&TCState) called on non-type TCState with kind=%llu\n", this.kind);
        assert(false);
    }
    return this.typ;
}
func getError(this: &TCState) -> usize {
    if (!isError(this)) {
        fprintf(stderr, "ERROR: getError(&TCState) called on non-error TCState with kind=%llu\n", this.kind);
        assert(false);
    }
    return this.typ;
}

func newTCStateSuccess() -> TCState {
    return TCState {
        kind: TCSTATE_TYPE,
        typ: 0,
        name: blank,
    };
}

func newTCStateType(typ: usize) -> TCState {
    return TCState {
        kind: TCSTATE_TYPE,
        typ: typ,
        name: blank,
    };
}

func newTCStateFailure(error: usize) -> TCState {
    return TCState {
        kind: TCSTATE_ERROR,
        typ: error,
        name: blank,
    };
}

func newTCStatePleaseInfer() -> TCState {
    return TCState {
        kind: TCSTATE_PLEASE_INFER,
        typ: 0,
        name: blank,
    };
}

struct TypeChecker {
    isComptimeContext: bool;
    currentModule: usize;
    currentFunction: &FunctionLookup;
    currentMethod: &MethodLookup;
    lookup: Lookup;
    typeError: bool;

    func reportTypeMismatch(&this, span: Span, expected: &Type, got: &Type) -> TCState {
        trace("TypeChecker.reportTypeMismatch");
        let loc: String = toString(&span);
        let typ1: String = expected.toString();
        let typ2: String = got.toString();
        fprintf(stderr, "%s: %s: Type mismatch! Expected type %s, found type %s.\n",
            loc.chars(), ERR_STR, typ1.chars(), typ2.chars());
        typ1.drop();
        typ2.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_TYPE_MISMATCH);
    }

    func reportBinaryTypeMismatch(&this, op: usize, lhsSpan: Span, lhsType: &Type, rhsSpan: Span, rhsType: &Type) -> TCState {
        trace("TypeChecker.reportBinaryTypeMismatch");
        let loc: String = toString(&newSpanBetween(&lhsSpan, &rhsSpan));
        let loc1: String = toString(&lhsSpan);
        let loc2: String = toString(&rhsSpan);
        let typ1: String = lhsType.toString();
        let typ2: String = rhsType.toString();
        fprintf(stderr, "%s: %s: Type mismatch in binary expression! Operation `%s %s %s` is not defined.\n",
            loc.chars(), ERR_STR, typ1.chars(), binOpAsStr(op), typ2.chars());
        fprintf(stderr, "%s: %s: LHS has type %s.\n", loc1.chars(), NOTE_STR, typ1.chars());
        fprintf(stderr, "%s: %s: RHS has type %s.\n", loc2.chars(), NOTE_STR, typ2.chars());
        typ2.drop();
        typ1.drop();
        loc2.drop();
        loc1.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_TYPE_MISMATCH);
    }

    func reportInvalidPointerArithmetics(&this, op: usize, lhsSpan: Span, rhsSpan: Span) -> TCState {
        trace("TypeChecker.reportInvalidPointerArithmetics");
        let loc: String = toString(&newSpanBetween(&lhsSpan, &rhsSpan));
        fprintf(stderr, "%s: %s: Operation `%s` is not allowed in the context of pointer arithmetics.\n",
            loc.chars(), ERR_STR, binOpAsStr(op));
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_INVALID_POINTER_ARITHMETIC);
    }

    func reportDuplicateField(&this, fieldToken: Token, declSpan: Span) -> TCState {
        trace("TypeChecker.reportDuplicateField");
        let duplLoc: String = toString(&fieldToken.span);
        let origLoc: String = toString(&declSpan);
        let name: String = fieldToken.content.toString();
        fprintf(stderr, "%s: %s: Field redeclaration.\n", duplLoc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: Field `%s` already declared here.\n", origLoc.chars(), NOTE_STR, name.chars());
        name.drop();
        origLoc.drop();
        duplLoc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_DUPLICATE_FIELD);
    }

    func reportDuplicateParameter(&this, paramToken: Token, declSpan: Span) -> TCState {
        trace("TypeChecker.reportDuplicateParameter");
        let duplLoc: String = toString(&paramToken.span);
        let origLoc: String = toString(&declSpan);
        let name: String = paramToken.content.toString();
        fprintf(stderr, "%s: %s: Parameter redeclaration.\n", duplLoc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: Parameter `%s` already declared here.\n", origLoc.chars(), NOTE_STR, name.chars());
        name.drop();
        origLoc.drop();
        duplLoc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_DUPLICATE_PARAMETER);
    }

    func reportUnknownField(&this, name: Token, decl: &StructLookup) -> TCState {
        trace("TypeChecker.reportUnknownField");
        let errLoc: String = toString(&name.span);
        let declLoc: String = toString(&decl.name.span);
        let strukt: String = decl.name.content.toString();
        let field: String = name.content.toString();
        fprintf(stderr, "%s: %s: Attempted to access unknown field `%s` of instance of struct %s.\n", errLoc.chars(), ERR_STR, field.chars(), strukt.chars());
        fprintf(stderr, "%s: %s: Struct %s is declared here.\n", declLoc.chars(), NOTE_STR, strukt.chars());
        field.drop();
        strukt.drop();
        declLoc.drop();
        errLoc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_UNKNOWN_FIELD);
    }

    func reportDuplicateFunction(&this, f1: &FunctionLookup, f2: &FunctionLookup) -> TCState {
        trace("TypeChecker.reportDuplicateFunction");
        let errLoc: String = toString(&f1.name.span);
        let duplLoc: String = toString(&f2.name.span);
        let name: String = f1.name.content.toString();
        fprintf(stderr, "%s: %s: Function redeclaration.\n", errLoc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: A function named `%s` with that signature is already declared here.\n", duplLoc.chars(), ERR_STR, name.chars());
        name.drop();
        duplLoc.drop();
        errLoc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_DUPLICATE_FUNCTION);
    }

    func reportDuplicateMethod(&this, m1: &MethodLookup, m2: &MethodLookup) -> TCState {
        trace("TypeChecker.reportDuplicateMethod");
        let errLoc: String = toString(&m1.name.span);
        let duplLoc: String = toString(&m2.name.span);
        let name: String = m1.name.content.toString();
        fprintf(stderr, "%s: %s: Method redeclaration.\n", errLoc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: A method named `%s` with that signature is already declared here.\n", duplLoc.chars(), ERR_STR, name.chars());
        name.drop();
        duplLoc.drop();
        errLoc.drop();
        return newTCStateFailure(ERROR_DUPLICATE_METHOD);
    }

    func reportNoFunctionCallCandidate(&this, callID: usize, functions: &FunctionLookupList) -> TCState {
        trace("TypeChecker.reportNoFunctionCallCandidate");
        let callExpr: &ParsedExpr = exprs.at(callID);
        assert(callExpr.kind == EXPR_CALL, "reportNoFunctionCallCandidate: Expected expr to be a call");
        let loc: String = toString(&callExpr.origToken.span);
        let name: String = callExpr.origToken.content.toString();
        fprintf(stderr, "%s: %s: Could not find matching signature for call to function `%s`.\n", loc.chars(), ERR_STR, name.chars());
        assert(functions.length != 0, "reportNoFunctionCallCandidate: Expected at least one declaration");
        // REVIEW: It was suggested that we could hide this extra info behind a `--verbose` flag, which sounds interesting.
        for (let i: usize = 0; i < functions.length; i = i + 1) {
            let f: &FunctionLookup = at(functions, i);
            let loc: String = toString(&f.name.span);
            fprintf(stderr, "%s: %s: A function with that name is located here.\n", loc.chars(), NOTE_STR);
            loc.drop();
        }
        name.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_NO_CALL_CANDIDATE);
    }

    func reportNoMethodCallCandidate(&this, callID: usize, arguments: &TCStateList, methods: &MethodLookupList) -> TCState {
        trace("TypeChecker.reportNoMethodCallCandidate");
        let binExpr = exprs.at(callID);
        assert(binExpr.kind == EXPR_BINARY);
        let callExpr: &ParsedExpr = exprs.at(binExpr.rhs);
        assert(callExpr.kind == EXPR_CALL, "reportNoMethodCallCandidate: Expected expr to be a call");
        let loc: String = toString(&callExpr.origToken.span);
        let name: String = callExpr.origToken.content.toString();
        fprintf(stderr, "%s: %s: Could not find matching signature for call to method `%s`.\n", loc.chars(), ERR_STR, name.chars());
        assert(methods.length != 0, "reportNoMethodCallCandidate: Expected at least one declaration");
        // REVIEW: It was suggested that we could hide this extra info behind a `--verbose` flag, which sounds interesting.
        for (let i: usize = 0; i < methods.length; i = i + 1) {
            let f: &MethodLookup = at(methods, i);
            let loc: String = toString(&f.name.span);
            fprintf(stderr, "%s: %s: A method with that name is located here.\n", loc.chars(), NOTE_STR);
            loc.drop();
        }
        name.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_NO_CALL_CANDIDATE);
    }

    func reportVariableRedeclaration(&this, newDecl: Token, oldDecl: Token) -> TCState {
        trace("TypeChecker.reportVariableRedeclaration");
        let newLoc: String = toString(&newDecl.span);
        let oldLoc: String = toString(&oldDecl.span);
        let name: String = newDecl.content.toString();
        fprintf(stderr, "%s: %s: Variable redeclaration.\n", newLoc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: Variable `%s` already declared here.\n", oldLoc.chars(), NOTE_STR, name.chars());
        name.drop();
        oldLoc.drop();
        newLoc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_VARIABLE_REDECLARATION);
    }

    func reportRecursiveType(&this, checked: &TypeLookup, cycle: &TypeLookupList) -> TCState {
        trace("TypeChecker.reportRecursiveType");
        let loc: String = getLocation(checked);
        let name: String = getName(checked);
        fprintf(stderr, "%s: %s: Recursive type %s.\n", loc.chars(), ERR_STR, name.chars());
        assert(cycle.length >= 1, "Cycle is empty");
        for (let i: usize = 1; i < cycle.length; i = i + 1) {
            loc = getLocation(at(cycle, i));
            name = getName(at(cycle, i));
            fprintf(stderr, "%s: %s: Chain of recursion also includes type %s.\n", loc.chars(), NOTE_STR, name.chars());
        }
        name.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_RECURSIVE_TYPE);
    }

    func reportNonPrimitiveCast(&this, span: Span, from: &Type, to: &Type) -> TCState {
        trace("TypeChecker.reportNonPrimitiveCast");
        let loc: String = toString(&span);
        let typ1: String = from.toString();
        let typ2: String = to.toString();
        fprintf(stderr, "%s: %s: Non primitive cast from type %s to %s.\n",
            loc.chars(), ERR_STR, typ1.chars(), typ2.chars());
        typ1.drop();
        typ2.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_NON_PRIMITIVE_CAST);
    }

    func reportIndexedAccessOnNonArray(&this, span: Span, typ: &Type) -> TCState {
        trace("TypeChecker.reportIndexedAccessOnNonArray");
        let loc: String = toString(&span);
        let name: String = typ.toString();
        fprintf(stderr, "%s: %s: Indexed Access is only supported for arrays.\n", loc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: Expression has type %s.\n", loc.chars(), NOTE_STR, name.chars());
        name.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_INDEXED_ACCESS_ON_NON_ARRAY);
    }

    func reportRuntimeValueInComptimeContext(&this, ident: Token, var: &VariableLookup) -> TCState {
        trace("TypeChecker.reportRuntimeValueInComptimeContext");
        let loc = toString(&ident.span);
        let otherLoc = toString(&var.name.span);
        let name = ident.content.toString();
        fprintf(stderr, "%s: %s: Variables declared with `let` can't be used in a comptime context.\n", loc.chars(), ERR_STR);
        fprintf(stderr, "%s: %s: Variable `%s` is declared here.\n", otherLoc.chars(), NOTE_STR, name.chars());
        name.drop();
        otherLoc.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_RUNTIME_VALUE_IN_COMPTIME_CONTEXT);
    }

    func reportAnyDereference(&this, expr: &ParsedExpr) -> TCState {
        trace("TypeChecker.reportAnyDereference");
        let loc = toString(&expr.span);
        fprintf(stderr, "%s: %s: Can't dereference expression of type Any.\n", loc.chars(), ERR_STR);
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_ANY_DEREF);
    }

    func reportMemberAccessOnNonStruct(&this, expr: &ParsedExpr, instance: &Type) -> TCState {
        trace("TypeChecker.reportMemberAccessOnNonStruct");
        let loc = toString(&expr.span);
        let t = instance.toString();
        fprintf(stderr, "%s: %s: The Dot-Operator is not defined for values of type %s.\n", loc.chars(), ERR_STR, t.chars());
        t.drop();
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_MEMBER_ACCESS_NON_STRUCT);
    }

    func reportMemberAccessTooManyOptions(&this, expr: &ParsedExpr, structs: &StructLookupList) -> TCState {
        trace("TypeChecker.reportMemberAccessTooManyOptions");
        assert(structs.length > 0);
        let loc = toString(&expr.span);
        fprintf(stderr, "%s: %s: Could not infer which type to use for expression.\n", loc.chars(), ERR_STR);
        for (let i: usize = 0; i < structs.length; i = i + 1) {
            let s = at(structs, i);
            let l = toString(&s.name.span);
            let n = s.name.content.toString();
            fprintf(stderr, "%s: %s: Context allows struct %s to be used.\n", l.chars(), NOTE_STR, n.chars());
            n.drop();
            l.drop();
        }
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_MEMBER_ACCESS_TOO_MANY_OPTIONS);
    }

    func reportFunctionCallTooManyOptions(&this, expr: &ParsedExpr, functions: &FunctionLookupList) -> TCState {
        trace("TypeChecker.reportFunctionCallTooManyOptions");
        assert(functions.length > 0);
        let loc = toString(&expr.span);
        fprintf(stderr, "%s: %s: Could not infer which function to call.\n", loc.chars(), ERR_STR);
        for (let i: usize = 0; i < functions.length; i = i + 1) {
            let f = at(functions, i);
            let l = toString(&f.name.span);
            let n = f.name.content.toString();
            fprintf(stderr, "%s: %s: Context allows this function to be called.\n", l.chars(), NOTE_STR, n.chars());
            n.drop();
            l.drop();
        }
        loc.drop();
        this.typeError = true;
        return newTCStateFailure(ERROR_FUNCTION_CALL_TOO_MANY_OPTIONS);
    }

    func emergencyPrint(&this, where: Span) {
        let t: Token = Token {
            span: where,
            content: newSubStrOfStrLit(""),
            kind: TOKEN_EOF
        };
        t.getLocation().print();
        printf("\n");
    }

    func typeCheckProject(&this, project: &ParsedModule) -> bool {
        trace("TypeChecker.typeCheckProject");
        if (!this.fillLookup()) return false;
        if (!this.typeCheckModules()) return false;
        if (this.findRecursiveTypes()) return false;
        return !this.typeError;
    }

    func dfs(&this, typeLookup: TypeLookup, visited: &TypeLookupList, finished: &TypeLookupList) -> bool {
        trace("TypeChecker.dfs");
        if (contains(finished, &typeLookup))
            return false;
        if (contains(visited, &typeLookup))
            return true;
        push(visited, typeLookup);
        let done: bool = false;
        if (isStruct(&typeLookup)) {
            let strukt: &StructLookup = asStruct(&typeLookup);
            for (let i: usize = 0; i < strukt.fields.length; i = i + 1) {
                let field: &VariableLookup = at(&strukt.fields, i);
                assert(isSuccess(&field.typeState), "Expected valid field type in DFS");
                let fieldTypeID: usize = getType(&field.typeState);
                let fieldType: &Type = types.at(fieldTypeID);
                if (fieldType.isStructArray()) {
                    let typeID: usize = fieldType.typeIndex;
                    let elemType: &Type = types.at(typeID);
                    assert(elemType.isStruct());
                    let structID: usize = elemType.typeIndex;
                    let decl: &ParsedStructDecl = structDecls.at(structID);
                    let mod: &ModuleLookup = at(&this.lookup.modules, decl.parentModule);
                    let strukt: &StructLookup = getStructByGlobalID(mod, structID);
                    if (this.dfs(asTypeLookup(strukt), visited, finished)) {
                        done = true;
                    }
                } else if (fieldType.isStruct()) {
                    let structID: usize = fieldType.typeIndex;
                    let decl: &ParsedStructDecl = structDecls.at(structID);
                    let mod: &ModuleLookup = at(&this.lookup.modules, decl.parentModule);
                    let strukt: &StructLookup = getStructByGlobalID(mod, structID);
                    if (this.dfs(asTypeLookup(strukt), visited, finished)) {
                        done = true;
                    }
                }
            }
        } else {
            todo_with_msg("dfs on non-struct");
        }
        push(finished, typeLookup);
        return done;
    }

    func findRecursiveTypes(&this) -> bool {
        trace("TypeChecker.findRecursiveTypes");
        let recursive: bool = false;
        for (let i: usize = 0; i < structDecls.length; i = i + 1) {
            let decl: &ParsedStructDecl = structDecls.at(i);
            let mod: &ModuleLookup = at(&this.lookup.modules, decl.parentModule);
            let strukt: &StructLookup = getStructByGlobalID(mod, i);
            let visited: TypeLookupList = blank;
            let finished: TypeLookupList = blank;
            if (this.dfs(asTypeLookup(strukt), &visited, &finished)) {
                this.reportRecursiveType(&asTypeLookup(strukt), &visited);
                recursive = true;
            }
        }
        return recursive;
    }

    func fillLookup(&this) -> bool {
        trace("TypeChecker.fillLookup");
        for (let i: usize = 0; i < modules.length; i = i + 1) {
            let mod: &ParsedModule = modules.at(i);
            assert(getID(mod) == i);
            this.currentModule = i;
            let lookup: &ModuleLookup = insertModule(&this.lookup, mod);
            for (let j: usize = 0; j < mod.tliLength; j = j + 1) {
                let tliID: usize = getTopLevelItemAtIndex(mod, j);
                let tli: &ParsedTopLevelItem = topLevelItems.at(tliID);
                if (tli.ignored) continue;
                insertTLI(lookup, tli);
            }
        }
        return true;
    }

    func typeCheckModules(&this) -> bool {
        trace("TypeChecker.typeCheckModules");
        let done: bool = false;
        let success: bool = true;
        // FIXMEEEEEEE: After refactor of methods, this loop has to disappear
        // We can simply check all structs first, then the function signatures
        // and finally all functions, without that LOOKUP_NOT_READY stuff
        while (!done) {
            done = true;
            for (let i: usize = 0; i < modules.length; i = i + 1) {
                let mod: &ParsedModule = modules.at(i);
                assert(getID(mod) == i);
                this.currentModule = i;
                let currModule: &ModuleLookup = at(&this.lookup.modules, i);
                assert(currModule.variables.length == 1, "still deez");
                for (let j: usize = 0; j < mod.tliLength; j = j + 1) {
                    let tliID: usize = getTopLevelItemAtIndex(mod, j);
                    let tli: &ParsedTopLevelItem = topLevelItems.at(tliID);
                    let state: TCState = this.typeCheckTLI(tli);
                    (*tli).typeState = state;
                    if (isError(&state)) {
                        let err: usize = getError(&state);
                        if (err == ERROR_LOOKUP_NOT_READY) {
                            done = false;
                            // break;
                        } else if (isCriticalError(&state)) {
                            // We can't continue here
                            return false;
                        } else {
                            success = false;
                        }
                    }
                }
            }
        }
        return success;
    }

    func typeCheckTLI(&this, tli: &ParsedTopLevelItem) -> TCState {
        trace("TypeChecker.typeCheckTLI");
        if (tli.ignored) return blank;
        this.currentFunction = null;
        this.currentMethod = null;
        let currentModule: &ModuleLookup = at(&this.lookup.modules, this.currentModule);
        assert(currentModule.variables.length == 1, "expected to find only the global scope for TLI VarDecl");
        if (tli.kind == TLI_IMPORT) {
            return newTCStateSuccess();
        } else if (tli.kind == TLI_FUNC_DECL) {
            return this.typeCheckFunction(tli.nodeID, &currentModule.variables);
        } else if (tli.kind == TLI_STRUCT_DECL) {
            return this.typeCheckStructDecl(tli.nodeID);
        } else if (tli.kind == TLI_VAR_DECL) {
            return this.typeCheckVarDecl(tli.nodeID, &currentModule.variables, true);
        } else {
            unreachable("Exhaustive handling of TLI in typeCheckTLI");
        }
    }

    func typeCheckStructDecl(&this, structID: usize) -> TCState {
        trace("TypeChecker.typeCheckStructDecl");
        let strukt: &ParsedStructDecl = structDecls.at(structID);
        if (strukt.ignored) return blank;
        let moduleLookup: &ModuleLookup = at(&this.lookup.modules, this.currentModule);
        let structLookup: &StructLookup = getStructByGlobalID(moduleLookup, structID);
        let context: &StructContext = &strukt.context;
        let result: TCState = newTCStateSuccess();
        if (!getReadyState(structLookup, STRUCT_READY_TO_USE)) {
            if (!getReadyState(structLookup, STRUCT_FIELDS_COMPLETE)) {
                let failure: TCState = blank;
                for (let i: usize = 0; i < context.fieldLength; i = i + 1) {
                    let name: Token = context.getFieldNameAtIndex(i);
                    let typ: usize = context.getFieldTypeAtIndex(i);
                    let dupl: VariableLookup = blank;
                    if (checkForDuplicateField(structLookup, &name, &dupl)) {
                        failure = this.reportDuplicateField(name, dupl.name.span);
                        continue;
                    }
                    let state: TCState = this.typeCheckTypeNode(typ);
                    if (isError(&state)) {
                        failure = state;
                        continue;
                    }
                    addField(structLookup, NODE_ID_OFFSET + i, name, state);
                }
                if (!isInvalid(&failure)) return failure;
                setReadyState(structLookup, STRUCT_FIELDS_COMPLETE);
            }
            if (!getReadyState(structLookup, STRUCT_SIGNATURE_COMPLETE)) {
                let lookup: bool = false;
                let error: usize = 0;
                for (let i: usize = 0; i < context.methodLength; i = i + 1) {
                    let methodID: usize = context.getMethodAtIndex(i);
                    let state: TCState = this.typeCheckMethod(structID, methodID, true);
                    if (isError(&state)) {
                        let err: usize = getError(&state);
                        if (err == ERROR_LOOKUP_NOT_READY) lookup = true;
                        if (isCriticalError(&state)) error = err;
                    }
                    // Don't need to do anything with the StructLookup here because typeCheckMethod
                    // already updates MethodLookup accordingly
                }
                if (error != ERROR_INVALID) return newTCStateFailure(error);
                if (lookup) return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
                setReadyState(structLookup, STRUCT_SIGNATURE_COMPLETE);
            }
            if (!getReadyState(structLookup, STRUCT_METHODS_COMPLETE)) {
                let lookup: bool = false;
                for (let i: usize = 0; i < context.methodLength; i = i + 1) {
                    let methodID: usize = context.getMethodAtIndex(i);
                    let state: TCState = this.typeCheckMethod(structID, methodID, false);
                    if (isError(&state)) {
                        let err: usize = getError(&state);
                        if (err == ERROR_LOOKUP_NOT_READY) lookup = true;
                        if (isCriticalError(&state)) return state;
                    }
                }
                if (lookup) return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
                setReadyState(structLookup, STRUCT_METHODS_COMPLETE);
            }
            setReadyState(structLookup, STRUCT_READY_TO_USE);
        }
        (*strukt).typeState = newTCStateSuccess();
        return result;
    }

    func typeCheckMethod(&this, structID: usize, methodID: usize, onlySignature: bool) -> TCState {
        trace("TypeChecker.typeCheckMethod");
        // REVIEW: We can improve performance by passing the StructLookup instead of the ID
        let method: &ParsedMethod = methods.at(methodID);
        if (method.ignored) return blank;
        let moduleLookup: &ModuleLookup = at(&this.lookup.modules, this.currentModule);
        let structLookup: &StructLookup = getStructByGlobalID(moduleLookup, structID);
        let methodLookup: &MethodLookup = getMethodByGlobalID(structLookup, methodID);
        if (getReadyState(methodLookup, METHOD_BODY_COMPLETE)) {
            assert(getReadyState(methodLookup, METHOD_READY_TO_USE), "Method should be ready to use at this point");
            return method.typeState;
        }
        this.currentMethod = methodLookup;
        if (!getReadyState(methodLookup, METHOD_READY_TO_USE)) {
            if (!getReadyState(methodLookup, METHOD_PARAMS_COMPLETE)) {
                let failure: TCState = blank;
                clear(&methodLookup.params);
                for (let i: usize = 0; i < method.params.paramLength; i = i + 1) {
                    let typ: usize = method.params.getTypeAtIndex(i);
                    let name: Token = method.params.getNameAtIndex(i);
                    let dupl: VariableLookup = blank;
                    if (checkForDuplicateParam(methodLookup, &name, &dupl)) {
                        failure = this.reportDuplicateParameter(name, dupl.name.span);
                        setReadyState(methodLookup, METHOD_PARAMS_COMPLETE);
                        continue;
                    }
                    let state: TCState = this.typeCheckTypeNode(typ);
                    if (isError(&state)) {
                        failure = state;
                        continue;
                    }
                    addParameter(methodLookup, NODE_ID_OFFSET + i, name, state);
                }
                if (!isInvalid(&failure)) return failure;
                setReadyState(methodLookup, METHOD_PARAMS_COMPLETE);
            }
            if (!getReadyState(methodLookup, METHOD_RETTYPE_COMPLETE)) {
                let retState: TCState = this.typeCheckTypeNode(method.retTypeID);
                if (isError(&retState)) return retState;
                setReturnType(methodLookup, retState);
                setReadyState(methodLookup, METHOD_RETTYPE_COMPLETE);
            }
            setReadyState(methodLookup, METHOD_READY_TO_USE);
        }
        if (onlySignature) {
            assert(getReadyState(methodLookup, METHOD_READY_TO_USE), "expected method to be ready for use after checking signature");
            return newTCStateSuccess();
        }
        (*method).typeState = newTCStateSuccess();
        if (!getReadyState(methodLookup, METHOD_DUPLICATE_CHECK)) {
            // FIXME: We need to use usize because the bootstrap doesn't support nested references :^)
            let _dupl: usize = 0;
            if (containsDuplicateMethod(structLookup, methodLookup, &_dupl)) {
                assert(_dupl != 0, "Duplicate MethodLookup is null");
                return this.reportDuplicateMethod(methodLookup, _dupl as &MethodLookup);
            }
            setReadyState(methodLookup, METHOD_DUPLICATE_CHECK);
        }
        if (!getReadyState(methodLookup, METHOD_BODY_COMPLETE)) {
            let scopes: ScopeLookupList = blank;
            let scope: ScopeLookup = blank;
            for (let i: usize = 0; i < methodLookup.params.length; i = i + 1) {
                addVariable(&scope, *(at(&methodLookup.params, i)));
            }
            push(&scopes, scope);
            let blockState: TCState = this.typeCheckBlock(method.body, &scopes);
            pop(&scopes);
            if (isError(&blockState)) return blockState;
            setReadyState(methodLookup, METHOD_BODY_COMPLETE);
        }
        return method.typeState;
    }

    func typeCheckFunction(&this, funcID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckFunction");
        let function: &ParsedFuncDecl = funcDecls.at(funcID);
        if (function.ignored) return blank;
        let moduleLookup: &ModuleLookup = at(&this.lookup.modules, this.currentModule);
        let funcLookup: &FunctionLookup = getFunctionByGlobalID(moduleLookup, funcID);
        if (getReadyState(funcLookup, FUNC_BODY_COMPLETE)) {
            assert(getReadyState(funcLookup, FUNC_READY_TO_USE), "Function should be ready to use at this point");
            return function.typeState;
        }
        this.currentFunction = funcLookup;
        if (!getReadyState(funcLookup, FUNC_READY_TO_USE)) {
            if (!getReadyState(funcLookup, FUNC_PARAMS_COMPLETE)) {
                let failure: TCState = blank;
                clear(&funcLookup.params);
                for (let i: usize = 0; i < function.params.paramLength; i = i + 1) {
                    let typ: usize = function.params.getTypeAtIndex(i);
                    let name: Token = function.params.getNameAtIndex(i);
                    let dupl: VariableLookup = blank;
                    if (checkForDuplicateParam(funcLookup, &name, &dupl)) {
                        failure = this.reportDuplicateParameter(name, dupl.name.span);
                        setReadyState(funcLookup, FUNC_PARAMS_COMPLETE);
                        continue;
                    }
                    let state: TCState = this.typeCheckTypeNode(typ);
                    if (isError(&state)) {
                        failure = state;
                        continue;
                    }
                    addParameter(funcLookup, NODE_ID_OFFSET + i, name, state);
                }
                if (!isInvalid(&failure)) return failure;
                setReadyState(funcLookup, FUNC_PARAMS_COMPLETE);
            }
            if (!getReadyState(funcLookup, FUNC_RETTYPE_COMPLETE)) {
                let retState: TCState = this.typeCheckTypeNode(function.retTypeID);
                if (isError(&retState)) return retState;
                setReturnType(funcLookup, retState);
                setReadyState(funcLookup, FUNC_RETTYPE_COMPLETE);
            }
            setReadyState(funcLookup, FUNC_READY_TO_USE);
        }
        (*function).typeState = newTCStateSuccess();
        if (!getReadyState(funcLookup, FUNC_DUPLICATE_CHECK)) {
            // FIXME: We need to use usize because the bootstrap doesn't support nested references :^)
            let _dupl: usize = 0;
            if (containsDuplicateFunction(moduleLookup, funcLookup, &_dupl)) {
                assert(_dupl != 0, "Duplicate FunctionLookup is null");
                return this.reportDuplicateFunction(funcLookup, _dupl as &FunctionLookup);
            }
            setReadyState(funcLookup, FUNC_DUPLICATE_CHECK);
        }
        if (!getReadyState(funcLookup, FUNC_BODY_COMPLETE)) {
            let scope: ScopeLookup = blank;
            for (let i: usize = 0; i < funcLookup.params.length; i = i + 1) {
                addVariable(&scope, *(at(&funcLookup.params, i)));
            }
            if (!isExtern(function)) {
                push(scopes, scope);
                let blockState: TCState = this.typeCheckBlock(function.body, scopes);
                pop(scopes);
                if (isError(&blockState)) {
                    return blockState;
                }
            }
            setReadyState(funcLookup, FUNC_BODY_COMPLETE);
        }
        return function.typeState;
    }

    func typeCheckBlock(&this, blockID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckBlock");
        let block: &ParsedBlock = blocks.at(blockID);
        if (block.ignored) return blank;
        if (isSuccess(&block.typeState)) {
            return block.typeState;
        }
        push(scopes, ScopeLookup {
            variables: blank,
        });
        let curr: usize = scopes.length;
        // REVIEW: Do we want to make blocks expressions?
        let blockState: TCState = newTCStateSuccess();
        for (let i: usize = 0; i < block.stmtLength; i = i + 1) {
            let stmtState: TCState = this.typeCheckStmt(getStmtAtIndex(block, i), scopes);
            if (isError(&stmtState)) {
                let err: usize = getError(&stmtState);
                if (err == ERROR_LOOKUP_NOT_READY) {
                    blockState = stmtState;
                    break;
                } else {
                    blockState = stmtState;
                }
            }
        }
        let after: usize = scopes.length;
        pop(scopes);
        assert(after == curr, "Stack imbalance");
        if (isError(&blockState)) return blockState;
        (*block).typeState = newTCStateSuccess();
        return block.typeState;
    }

    func typeCheckStmt(&this, stmtID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckStmt");
        let stmt: &ParsedStmt = stmts.at(stmtID);
        if (stmt.ignored) return blank;
        if (stmt.kind == STMT_BLOCK) {
            let blockState: TCState = this.typeCheckBlock(stmt.block, scopes);
            if (isError(&blockState)) return blockState;
            (*stmt).typeState = blockState;
            return blockState;
        } else if (stmt.kind == STMT_VAR_DECL) {
            return this.typeCheckVarDecl(stmtID, scopes, false);
        } else if (stmt.kind == STMT_EXPR) {
            if (isSuccess(&stmt.typeState))
                return stmt.typeState;
            let exprState: TCState = this.typeCheckExpr(stmt.expr, scopes);
            if (isError(&exprState)) return exprState;
            if (wantsInfer(&exprState)) todo_with_msg("stmt expr infer");
            let expr: &ParsedExpr = exprs.at(stmt.expr);
            if (!isType(&exprState)) {
                printf("%llu\n", exprState.kind);
                todo_with_msg("what is it then");
            }
            let exprType: &Type = types.at(getType(&exprState));
            if (!exprType.isNone() && !isAssignment(expr) && *flags.verbose) {
                let loc: String = toString(&expr.span);
                fprintf(stderr, "%s: %s: Unused expression value.\n", loc.chars(), WARN_STR);
                loc.drop();
            }
            (*stmt).typeState = exprState;
            return newTCStateSuccess();
        } else if (stmt.kind == STMT_IF) {
            if (isSuccess(&stmt.typeState))
                return stmt.typeState;
            let condState: TCState = this.typeCheckExpr(stmt.expr, scopes);
            let thenState: TCState = this.typeCheckStmt(stmt.ifContext.thenBody, scopes);
            let elseState: TCState = newTCStateSuccess();
            if (stmt.ifContext.hasElse) {
                elseState = this.typeCheckStmt(stmt.ifContext.elseBody, scopes);
            }
            if (isError(&condState)) return condState;
            if (isError(&thenState)) return thenState;
            if (isError(&elseState)) return elseState;
            let boolType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
            if (wantsInfer(&condState)) {
                condState = this.inferTypeOntoExpr(stmt.expr, boolType.getID());
                assert(isType(&condState), "Could not infer type onto if-condition");
            }
            let condType: &Type = types.at(getType(&condState));
            if (!condType.isBoolean()) {
                return this.reportTypeMismatch(exprs.at(stmt.expr).span, boolType, condType);
            }
            let state: TCState = newTCStateSuccess();
            (*stmt).typeState = state;
            return state;
        } else if (stmt.kind == STMT_RETURN_EXPR) {
            if (isSuccess(&stmt.typeState))
                return stmt.typeState;
            let exprState: TCState = this.typeCheckExpr(stmt.expr, scopes);
            if (isError(&exprState)) return exprState;
            if (this.currentFunction != null) {
                assert(getReadyState(this.currentFunction, FUNC_READY_TO_USE), "Function is not ready");
                let _retType: &Type = types.at(getType(&this.currentFunction.returnType));
                if (_retType.isNone()) todo_with_msg("unexpected ret expr where empty function");
                let retState: &TCState = &this.currentFunction.returnType;
                assert(isSuccess(retState), "ready to use function has invalid return type");
                assert(isType(retState), "ready to use function has non-type as return type");
                if (wantsInfer(&exprState)) {
                    exprState = this.inferTypeOntoExpr(stmt.expr, getType(retState));
                    if (isError(&exprState)) return exprState;
                    assert(isType(&exprState), "Failed to infer type of return expression");
                }
                let exprType: &Type = types.at(getType(&exprState));
                let retType: &Type = types.at(getType(retState));
                if (!exprType.equals(retType)) {
                    return this.reportTypeMismatch(stmt.span, retType, exprType);
                }
                (*stmt).typeState = *retState;
                return newTCStateSuccess();
            } else if (this.currentMethod != null) {
                assert(getReadyState(this.currentMethod, METHOD_READY_TO_USE), "Method is not ready");
                let _retType: &Type = types.at(getType(&this.currentMethod.returnType));
                if (_retType.isNone()) todo_with_msg("unexpected ret expr where empty method");
                let retState: &TCState = &this.currentMethod.returnType;
                assert(isSuccess(retState), "ready to use method has invalid return type");
                assert(isType(retState), "ready to use method has non-type as return type");
                if (wantsInfer(&exprState)) {
                    exprState = this.inferTypeOntoExpr(stmt.expr, getType(retState));
                    if (isError(&exprState)) return exprState;
                    assert(isType(&exprState), "Failed to infer type of return expression");
                }
                let exprType: &Type = types.at(getType(&exprState));
                let retType: &Type = types.at(getType(retState));
                if (!exprType.equals(retType)) {
                    return this.reportTypeMismatch(stmt.span, retType, exprType);
                }
                (*stmt).typeState = *retState;
                return newTCStateSuccess();
            } else {
                unreachable("Expected to be either in a method or function, got none of both");
            }
        } else if (stmt.kind == STMT_RETURN_EMPTY) {
            if (this.currentFunction != null) {
                assert(getReadyState(this.currentFunction, FUNC_READY_TO_USE), "Function is not ready");
                let retType: &Type = types.at(getType(&this.currentFunction.returnType));
                if (!retType.isNone()) {
                    printf("%s\n", toString(&stmt.span).chars());
                    printf("%llu %llu\n", retType.kind, retType.typeIndex);
                    todo_with_msg("function returns something, but we wrote return;");
                }
                (*stmt).typeState = newTCStateSuccess();
                return newTCStateSuccess();
            } else if (this.currentMethod != null) {
                assert(getReadyState(this.currentMethod, METHOD_READY_TO_USE), "Method is not ready");
                let retType: &Type = types.at(getType(&this.currentMethod.returnType));
                if (!retType.isNone()) todo_with_msg("method returns something, but we wrote return;");
                (*stmt).typeState = newTCStateSuccess();
                return newTCStateSuccess();
            } else {
                unreachable("Expected to be either in a method or function, got none of both");
            }
        } else if (stmt.kind == STMT_WHILE) {
            if (isSuccess(&stmt.typeState))
                return stmt.typeState;
            let condState: TCState = this.typeCheckExpr(stmt.expr, scopes);
            let bodyState: TCState = this.typeCheckStmt(stmt.block, scopes);
            let stepState: TCState = this.typeCheckExpr(stmt.step, scopes);
            if (isError(&condState)) return condState;
            if (isError(&bodyState)) return bodyState;
            if (isError(&stepState)) return stepState;
            let boolType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
            if (wantsInfer(&condState)) {
                condState = this.inferTypeOntoExpr(stmt.expr, boolType.getID());
                assert(isType(&condState), "Could not infer type onto while-condition");
            }
            let condType: &Type = types.at(getType(&condState));
            if (!condType.isBoolean()) {
                return this.reportTypeMismatch(exprs.at(stmt.expr).span, boolType, condType);
            }
            (*stmt).typeState = newTCStateSuccess();
            return newTCStateSuccess();
        } else if (stmt.kind == STMT_BREAK || stmt.kind == STMT_CONTINUE) {
            (*stmt).typeState = newTCStateSuccess();
            return newTCStateSuccess();
        } else {
            this.emergencyPrint(stmt.span);
            unreachable("Exhaustive handling of stmts in typeCheckStmt");
        }
    }

    func typeCheckVarDecl(&this, varDeclID: usize, scopes: &ScopeLookupList, globalScope: bool) -> TCState {
        trace("TypeChecker.typeCheckVarDecl");
        let varDecl: &ParsedStmt = stmts.at(varDeclID);
        if (varDecl.ignored) return blank;
        assert(varDecl.kind == STMT_VAR_DECL, "Stmt expected to be a VarDecl");
        let context: VarDeclContext = varDecl.varDeclContext;
        let last: &ScopeLookup = last(scopes);
        let typeState: TCState = blank;
        let exprState: TCState = blank;
        if (isSuccess(&varDecl.typeState)) {
            typeState = varDecl.typeState;
            exprState = varDecl.typeState;
        } else {
            let loc: Token = blank;
            // REVIEW: Warn about shadowing?
            if (!globalScope && isKnownVariable(last, context.name.content, &loc)) {
                return this.reportVariableRedeclaration(context.name, loc);
            }
            if (context.typeID != TYPE_INVALID) {
                typeState = this.typeCheckTypeNode(context.typeID);
                if (isError(&typeState)) return typeState;
                if (!isType(&typeState)) todo_with_msg("let type is not a type");
            }
            this.isComptimeContext = context.isComptime;
            exprState = this.typeCheckExpr(context.exprID, scopes);
            this.isComptimeContext = false;
            if (context.typeID == TYPE_INVALID) {
                // let var = expr;
                assert(isInvalid(&typeState), "`let var = expr;` got valid type state??");
                if (isError(&exprState)) return exprState;
                if (wantsInfer(&exprState)) {
                    todo_with_msg("`let var = expr;` wants inferred expr");
                }
                if (!isType(&exprState)) todo_with_msg("let expr is not a type");
                typeState = exprState;
            } else {
                // let var: type = expr;
                if (wantsInfer(&exprState)) {
                    exprState = this.inferTypeOntoExpr(context.exprID, getType(&typeState));
                }
                if (isType(&exprState)) {
                    let typeType: &Type = types.at(getType(&typeState));
                    let exprType: &Type = types.at(getType(&exprState));
                    if (!typeType.equals(exprType)) {
                        let exprNode: &ParsedExpr = exprs.at(context.exprID);
                        exprState = this.reportTypeMismatch(exprNode.span, typeType, exprType);
                    }
                }
            }
        }
        if (globalScope) {
            let index: usize = 0;
            assert(getVarIndexByName(last, context.name.content, &index), "Could not find variable in global scope");
            let var: &VariableLookup = getVariableAtIndex(last, index);
            (*var).typeState = typeState;
        } else {
            addVariable(last, VariableLookup {
                globalID: getID(varDecl),
                name: context.name,
                typeState: typeState,
                isComptime: context.isComptime,
            });
        }
        if (isError(&exprState)) return exprState;
        (*varDecl).typeState = typeState;
        return typeState;
    }

    func typeCheckExpr(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExpr");
        let expr: &ParsedExpr = exprs.at(exprID);
        if (expr.ignored) return blank;
        if (isSuccess(&expr.typeState)) return expr.typeState;
        let state: TCState = blank;
        if (expr.kind == EXPR_EMPTY) {
            state = newTCStateSuccess();
        } else if (expr.kind == EXPR_INT_LIT) {
            state = newTCStatePleaseInfer();
        } else if (expr.kind == EXPR_STRING_LIT) {
            let ct: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_CHAR);
            let st: &Type = newType(TYPE_KIND_POINTER, ct.getID());
            state = newTCStateType(st.getID());
        } else if (expr.kind == EXPR_CHAR_LIT) {
            let t: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_CHAR);
            state = newTCStateType(t.getID());
        } else if (expr.kind == EXPR_ARRAY_LIT) {
            let context: &ArrayContext = &expr.arrayContext;
            assert(context.elemLength != 0, "Zero sized Array Literal spotted");
            let elemIndex: usize = context.getElementAtIndex(0);
            let elemState: TCState = this.typeCheckExpr(elemIndex, scopes);
            if (isError(&elemState)) return elemState;
            if (wantsInfer(&elemState)) return elemState;
            let elemTypeID: usize = getType(&elemState);
            if (context.size == 0) {
                let elemType: &Type = types.at(elemTypeID);
                let lastErrState: TCState = blank;
                for (let i: usize = 1; i < context.elemLength; i = i + 1) {
                    let nextIndex: usize = context.getElementAtIndex(i);
                    let nextState: TCState = this.typeCheckExpr(nextIndex, scopes);
                    if (isError(&nextState)) {
                        lastErrState = nextState;
                        continue;
                    }
                    let nextType: &Type = types.at(getType(&nextState));
                    if (!nextType.equals(elemType)) {
                        let loc = toString(&exprs.at(elemIndex).span);
                        let t = elemType.toString();
                        lastErrState = this.reportTypeMismatch(exprs.at(nextIndex).span, elemType, nextType);
                        fprintf(stderr, "%s: %s: Array elements inferred to be type %s here.\n", loc.chars(), NOTE_STR, t.chars());
                        t.drop();
                        loc.drop();
                    }
                }
                if (!isInvalid(&lastErrState)) return lastErrState;
                let t: &Type = newType(TYPE_KIND_ARRAY, elemTypeID);
                (*t).arraySize = context.elemLength;
                state = newTCStateType(t.getID());
            } else {
                let t: &Type = newType(TYPE_KIND_ARRAY, elemTypeID);
                (*t).arraySize = context.size;
                state = newTCStateType(t.getID());
            }
        } else if (expr.kind == EXPR_NAME) {
            state = this.typeCheckIdentifier(exprID, scopes);
        } else if (expr.kind == EXPR_UNARY) {
            state = this.typeCheckUnary(exprID, scopes);
        } else if (expr.kind == EXPR_BINARY) {
            state = this.typeCheckExprBinary(exprID, scopes);
        } else if (expr.kind == EXPR_CALL) {
            state = this.typeCheckExprCall(exprID, scopes);
        } else if (expr.kind == EXPR_SIZEOF) {
            state = this.typeCheckExprSizeof(exprID, scopes);
        } else if (expr.kind == EXPR_STRUCT_INIT) {
            state = this.typeCheckExprStructInit(exprID, scopes);
        } else if (expr.kind == EXPR_AS) {
            state = this.typeCheckExprAs(exprID, scopes);
        } else if (expr.kind == EXPR_NULL) {
            state = newTCStatePleaseInfer();
        } else if (expr.kind == EXPR_BLANK) {
            state = newTCStatePleaseInfer();
        } else if (expr.kind == EXPR_TRUE || expr.kind == EXPR_FALSE) {
            let t: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
            state = newTCStateType(t.getID());
        } else {
            unreachable("Exhaustive handling of expressions in typeCheckExpr");
        }
        if (isError(&state)) return state;
        (*expr).typeState = state;
        return state;
    }

    func typeCheckExprSizeof(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprSizeof");
        let expr: &ParsedExpr = exprs.at(exprID);
        if (isSuccess(&expr.typeState)) return expr.typeState;
        assert(expr.kind == EXPR_SIZEOF);
        let typeState: TCState = this.typeCheckTypeNode(expr.lhs);
        if (isError(&typeState)) return typeState;
        let ut: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_USIZE);
        return newTCStateType(ut.getID());
    }

    func typeCheckExprAs(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprAs");
        let expr: &ParsedExpr = exprs.at(exprID);
        assert(expr.kind == EXPR_AS);
        let exprState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let typeState: TCState = this.typeCheckTypeNode(expr.rhs);
        if (isError(&exprState)) return exprState;
        if (isError(&typeState)) return typeState;
        assert(isType(&typeState), "typeCheckExprAs Type is not a Type");
        let typeType: &Type = types.at(getType(&typeState));
        if (wantsInfer(&exprState)) exprState = this.inferTypeOntoExpr(expr.lhs, typeType.getID());
        if (isError(&exprState)) return exprState;
        assert(isType(&exprState), "Expected <expr> in `<expr> as <type>` to have a valid type after infer");
        let exprType: &Type = types.at(getType(&exprState));
        if (typeType.isPointer() && exprType.isPointer()) {
            // PTR as PTR is allowed
        } else if (exprType.isPointer() && typeType.isInteger()) {
            if (typeType.getSize() != exprType.getSize()) {
                let loc = toString(&expr.span);
                let from = exprType.toString();
                let to = typeType.toString();
                fprintf(stderr, "%s: %s: Casting pointer of type %s to integer of type %s.\n",
                    loc.chars(), WARN_STR, from.chars(), to.chars());
                to.drop();
                from.drop();
                loc.drop();
            }
        } else if (exprType.isInteger() && typeType.isPointer()) {
            if (typeType.getSize() != exprType.getSize()) {
                let loc = toString(&expr.span);
                let from = exprType.toString();
                let to = typeType.toString();
                fprintf(stderr, "%s: %s: Casting integer of type %s to pointer of type %s.\n",
                    loc.chars(), WARN_STR, from.chars(), to.chars());
                to.drop();
                from.drop();
                loc.drop();
            }
        } else if (!typeType.isPrimitive()) {
            return this.reportNonPrimitiveCast(expr.span, exprType, typeType);
        } else if (!exprType.isPrimitive()) {
            return this.reportNonPrimitiveCast(expr.span, exprType, typeType);
        }
        if (typeType.getSize() < exprType.getSize() && *flags.verbose) {
            let loc: String = toString(&expr.span);
            let tName: String = typeType.toString();
            let oName: String = exprType.toString();
            fprintf(stderr, "%s: %s: Lossy type cast: Target type (%s) is smaller than original type (%s).\n",
                loc.chars(), WARN_STR, tName.chars(), oName.chars());
            oName.drop();
            tName.drop();
            loc.drop();
        }
        return typeState;
    }

    func typeCheckUnary(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckUnary");
        let expr: &ParsedExpr = exprs.at(exprID);
        assert(expr.kind == EXPR_UNARY);
        let exprState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        if (isError(&exprState)) return exprState;
        if (wantsInfer(&exprState)) return exprState; // Can't be done in here
        if (expr.op == UNARY_COMPTIME) {
            return exprState;
        } else if (expr.op == UNARY_DEREF) {
            let exprType: &Type = types.at(getType(&exprState));
            if (exprType.isPrimitive()) {
                if (exprType.typeIndex == TYPE_ANY) {
                    return this.reportAnyDereference(expr);
                }
            }
            if (!exprType.isPointer()) {
                todo_with_msg("deref non-pointer");
            }
            let underlying: &Type = exprType.getUnderlyingType(false);
            return newTCStateType(underlying.getID());
        } else if (expr.op == UNARY_REF) {
            let exprType: &Type = types.at(getType(&exprState));
            let t: &Type = newType(TYPE_KIND_POINTER, exprType.getID());
            return newTCStateType(t.getID());
        } else if (expr.op == UNARY_NOT) {
            let exprType: &Type = types.at(getType(&exprState));
            if (!exprType.isBoolean()) {
                let loc: String = toString(&expr.span);
                let t: String = exprType.toString();
                fprintf(stderr, "%s: %s: Logical Not is not defined for type %s.\n", loc.chars(), ERR_STR, t.chars());
                t.drop();
                loc.drop();
                this.typeError = true;
                return newTCStateFailure(ERROR_TYPE_MISMATCH);
            }
            return exprState;
        } else if (expr.op == UNARY_MINUS) {
            let exprType: &Type = types.at(getType(&exprState));
            if (!exprType.isSignedInteger() && !exprType.isFloat()) {
                let loc: String = toString(&expr.span);
                let t: String = exprType.toString();
                fprintf(stderr, "%s: %s: Negation is not defined for type %s.\n", loc.chars(), ERR_STR, t.chars());
                t.drop();
                loc.drop();
                this.typeError = true;
                return newTCStateFailure(ERROR_TYPE_MISMATCH);
            }
            return exprState;
        } else {
            unreachable("Exhaustive handling of ops in typeCheckUnary");
        }
    }

    func typeCheckExprCall(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprCall");
        // REVIEW: Would be cool if the call base could be any expression, not just an identifier
        let expr: &ParsedExpr = exprs.at(exprID);
        assert(expr.kind == EXPR_CALL);
        let name: Token = expr.origToken;
        let functions: FunctionLookupList = resolveFunctionByName(&this.lookup, this.currentModule, &name);
        if (functions.length == 0) {
            let loc: String = name.getLocation();
            let n: String = name.content.toString();
            fprintf(stderr, "%s: %s: Call to unknown function `%s`.\n", loc.chars(), ERR_STR, n.chars());
            let alternatives: FunctionLookupList = searchAllModulesForFunctionName(&this.lookup, &name);
            for (let i: usize = 0; i < alternatives.length; i = i + 1) {
                let t: &FunctionLookup = at(&alternatives, i);
                let loc: String = t.name.getLocation();
                fprintf(stderr, "%s: %s: A function with that name is located here. Import the module to use it.\n", loc.chars(), NOTE_STR);
                loc.drop();
            }
            n.drop();
            loc.drop();
            this.typeError = true;
            return newTCStateFailure(ERROR_NO_SUCH_FUNCTION);
        }
        let callContext: &ArrayContext = &expr.arrayContext;
        let arguments: TCStateList = blank;
        for (let i: usize = 0; i < callContext.elemLength; i = i + 1) {
            let argID: usize = callContext.getElementAtIndex(i);
            let arg: TCState = this.typeCheckExpr(argID, scopes);
            if (isError(&arg)) return arg;
            push(&arguments, arg);
        }
        assert(arguments.length == callContext.elemLength);
        let candidates: FunctionLookupList = blank;
        let mark: TCState = this.markFunctionCallCandidates(callContext, &functions, &candidates, &arguments);
        if (isError(&mark)) return mark;
        // functions contains all functions with the same amount of arguments and
        // candidates where infer-semantics could validate the function
        // e.g. foo(i: i32) + foo(i: u64) for foo(5)
        let globalID: usize = 0;
        let sweep: TCState = this.selectFunctionCallCandidate(exprID, callContext, &functions, &candidates, &arguments, &globalID);
        if (isError(&sweep)) return sweep;
        if (wantsInfer(&sweep)) return sweep;
        assert(isType(&sweep));
        (*expr).lhs = globalID;
        return sweep;
    }

    func markFunctionCallCandidates(
        &this,
        callContext: &ArrayContext,
        functions: &FunctionLookupList,
        candidates: &FunctionLookupList,
        arguments: &TCStateList,
    ) -> TCState {
        trace("TypeChecker.markFunctionCallCandidates");
        for (let i: usize = 0; i < functions.length; i = i + 1) {
            let f: &FunctionLookup = at(functions, i);
            if (!getReadyState(f, FUNC_READY_TO_USE)) {
                return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
            }
            if (!f.isVarArg && f.params.length != arguments.length) {
                continue;
            }
            let paramCheck = this.typeCheckFunctionParameters(&f.params, callContext, arguments, true);
            if (isError(&paramCheck)) {
                continue;
            }
            push(candidates, *f);
        }
        return newTCStateSuccess();
    }

    func selectFunctionCallCandidate(
        &this,
        exprID: usize,
        callContext: &ArrayContext,
        functions: &FunctionLookupList,
        candidates: &FunctionLookupList,
        arguments: &TCStateList,
        funcID: &usize,
    ) -> TCState {
        trace("TypeChecker.selectFunctionCallCandidate");
        if (candidates.length == 0) {
            return this.reportNoFunctionCallCandidate(exprID, functions);
        } else if (candidates.length > 1) {
            return newTCStatePleaseInfer();
        }
        assert(candidates.length == 1, "selectFunctionCallCandidate: Expected exactly one candidate");
        let f: &FunctionLookup = at(candidates, 0);
        assert(getReadyState(f, FUNC_READY_TO_USE), "Expected markFunctionCallCandidates to validate FUNC_READY_TO_USE");
        let paramCheck = this.typeCheckFunctionParameters(&f.params, callContext, arguments, false);
        if (isError(&paramCheck)) return paramCheck;
        *funcID = f.globalID;
        let retType: TCState = f.returnType;
        assert(isSuccess(&retType), "selectFunctionCallCandidate: Expected valid function return type");
        return retType;
    }

    func typeCheckFunctionArguments(&this, params: &VariableLookupList, callContext: &ArrayContext, arguments: &TCStateList, checkOnly: bool) -> TCState {
        trace("TypeChecker.typeCheckFunctionArguments");
        if (params.length != callContext.elemLength) {
            todo_with_msg("typeCheckFunctionArguments: param count mismatch");
        }
        for (let i: usize = 0; i < callContext.elemLength; i = i + 1) {
            let param = at(params, i);
            let pTypeID = getType(&param.typeState);
            let argID: usize = callContext.getElementAtIndex(i);
            let arg: TCState = this.tryInferTypeOntoExpr(argID, pTypeID, checkOnly);
            if (isError(&arg)) {
                todo_with_msg("typeCheckFunctionArguments: arg param couldnt infer");
            }
            push(arguments, arg);
        }
        assert(arguments.length == callContext.elemLength);
        return newTCStateSuccess();
    }

    func typeCheckFunctionParameters(&this, params: &VariableLookupList, callContext: &ArrayContext, arguments: &TCStateList, checkOnly: bool) -> TCState {
        let succ = true;
        for (let j: usize = 0; j < params.length; j = j + 1) {
            let argState: TCState = *at(arguments, j);
            let param: &VariableLookup = at(params, j);
            let paramState: &TCState = &param.typeState;
            assert(isSuccess(paramState), "Expected valid function parameter");
            let paramType: &Type = types.at(getType(paramState));
            if (wantsInfer(&argState)) {
                argState = this.tryInferTypeOntoExpr(callContext.getElementAtIndex(j), paramType.getID(), checkOnly);
                if (isError(&argState)) {
                    todo_with_msg("error when inferring type of param onto argument");
                }
                assert(isType(&argState), "Did not infer type of param onto argument properly");
            }
            let argType: &Type = types.at(getType(&argState));
            if (!argType.equals(paramType)) {
                if (!checkOnly) {
                    let e = exprs.at(callContext.getElementAtIndex(j));
                    this.reportTypeMismatch(e.span, paramType, argType);
                }
                succ = false;
                break;
            }
        }
        if (!succ) return newTCStateFailure(ERROR_TYPE_MISMATCH);
        return newTCStateSuccess();
    }

    func markMethodCallCandidates(
        &this,
        callContext: &ArrayContext,
        methods: &MethodLookupList,
        candidates: &MethodLookupList,
        arguments: &TCStateList,
    ) -> TCState {
        trace("TypeChecker.markMethodCallCandidates");
        for (let i: usize = 0; i < methods.length; i = i + 1) {
            let m: &MethodLookup = at(methods, i);
            if (!getReadyState(m, METHOD_READY_TO_USE)) {
                return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
            }
            if (m.isStatic) {
                // Not handled here
                continue;
            }
            if (m.params.length != arguments.length) {
                continue;
            }
            assert(m.params.length != 0, "not a static method");
            let thisParam: &VariableLookup = at(&m.params, 0);
            let thisParamState: TCState = thisParam.typeState;
            assert(isSuccess(&thisParamState), "Expected valid this parameter");
            let paramType: &Type = types.at(getType(&thisParamState));
            let instType: &Type = types.at(getType(at(arguments, 0)));
            if (!instType.equals(paramType)) {
                if (paramType.isPointer() && !instType.isPointer()) {
                    let under: &Type = paramType.getUnderlyingType(false);
                    if (!instType.equals(under)) {
                        continue;
                    }
                } else {
                    todo_with_msg("how can this happen");
                }
            }
            let match = true;
            for (let j: usize = 1; j < m.params.length; j = j + 1) {
                let argState: TCState = *at(arguments, j);
                let param: &VariableLookup = at(&m.params, j);
                let paramState: &TCState = &param.typeState;
                assert(isSuccess(paramState), "Expected valid method parameter");
                let paramType: &Type = types.at(getType(paramState));
                if (wantsInfer(&argState)) {
                    argState = this.tryInferTypeOntoExpr(callContext.getElementAtIndex(j - 1), paramType.getID(), true);
                    if (isError(&argState)) {
                        todo_with_msg("error when inferring type of param onto argument");
                    }
                    assert(isType(&argState), "Did not infer type of param onto argument properly");
                }
                let argType: &Type = types.at(getType(&argState));
                if (!argType.equals(paramType)) {
                    match = false;
                    break;
                }
            }
            if (!match) {
                continue;
            }
            push(candidates, *m);
        }
        return newTCStateSuccess();
    }

    func selectMethodCallCandidate(
        &this,
        exprID: usize,
        callContext: &ArrayContext,
        methods: &MethodLookupList,
        candidates: &MethodLookupList,
        arguments: &TCStateList,
        funcID: &usize,
        scopes: &ScopeLookupList,
    ) -> TCState {
        trace("TypeChecker.selectMethodCallCandidate");
        if (candidates.length == 0) {
            return this.reportNoMethodCallCandidate(exprID, arguments, methods);
        } else if (candidates.length > 1) {
            return newTCStatePleaseInfer();
        }
        assert(candidates.length == 1, "selectMethodCallCandidate: Expected exactly one candidate");
        let m: &MethodLookup = at(candidates, 0);
        assert(getReadyState(m, METHOD_READY_TO_USE), "Expected markMethodCallCandidates to validate METHOD_READY_TO_USE");
        let thisParam: &VariableLookup = at(&m.params, 0);
        let thisParamState: TCState = thisParam.typeState;
        assert(isSuccess(&thisParamState), "Expected valid this parameter");
        let paramType: &Type = types.at(getType(&thisParamState));
        let instType: &Type = types.at(getType(at(arguments, 0)));
        if (!instType.equals(paramType)) {
            if (paramType.isPointer() && !instType.isPointer()) {
                let under: &Type = paramType.getUnderlyingType(false);
                assert(instType.equals(under), "method call instance type doesn't match");
                let expr = exprs.at(exprID);
                (*expr).lhs = intoPointer(exprs.at(expr.lhs));
                let patched: TCState = this.typeCheckExpr(expr.lhs, scopes);
                assert(isSuccess(&patched), "patched instance failed");
                assert(isType(&patched), "patched instance state is not a type");
                assert(types.at(getType(&patched)).equals(paramType), "patched instance type does not match");
            } else {
                todo_with_msg("how can this happen");
            }
        }
        for (let j: usize = 1; j < m.params.length; j = j + 1) {
            let argState: &TCState = at(arguments, j);
            let param: &VariableLookup = at(&m.params, j);
            let paramState: &TCState = &param.typeState;
            assert(isSuccess(paramState), "Expected valid method parameter");
            let paramType: &Type = types.at(getType(paramState));
            if (wantsInfer(argState)) {
                *argState = this.inferTypeOntoExpr(callContext.getElementAtIndex(j - 1), paramType.getID());
                assert(!isError(argState), "selectMethodCallCandidate: Expected infer to be success");
                assert(isType(argState), "selectMethodCallCandidate: Expected infer to be success");
            }
            let argType: &Type = types.at(getType(argState));
            assert(argType.equals(paramType), "selectMethodCallCandidate: Expected argument to match parameter");
        }
        *funcID = m.globalID;
        let retType: TCState = m.returnType;
        assert(isSuccess(&retType), "selectMethodCallCandidate: Expected valid method return type");
        return retType;
    }

    func typeCheckExprStructInit(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        // REVIEW: This function will later also do union declarations
        trace("TypeChecker.typeCheckExprStructInit");
        let expr: &ParsedExpr = exprs.at(exprID);
        assert(expr.kind == EXPR_STRUCT_INIT);
        let name: Token = expr.origToken;
        let lookup: TypeLookup = blank;
        if (!resolveTypeByName(&this.lookup, this.currentModule, &name, &lookup)) {
            let loc: String = name.getLocation();
            let _n: String = name.content.toString();
            fprintf(stderr, "%s: %s: Use of undeclared type identifier `%s`.\n", loc.chars(), ERR_STR, _n.chars());
            let alternatives: TypeLookupList = searchAllModulesForTypeName(&this.lookup, &name);
            for (let i: usize = 0; i < alternatives.length; i = i + 1) {
                let t: &TypeLookup = at(&alternatives, i);
                if (isStruct(t)) {
                    let s: &StructLookup = asStruct(t);
                    let loc: String = s.name.getLocation();
                    fprintf(stderr, "%s: %s: A struct with that name is located here. Import the module to use it.\n", loc.chars(), NOTE_STR);
                    loc.drop();
                }
            }
            _n.drop();
            loc.drop();
            this.typeError = true;
            return newTCStateFailure(ERROR_NO_SUCH_IDENTIFIER);
        }
        if (isStruct(&lookup)) {
            let context: &StructInitContext = &expr.structInitContext;
            let structLookup: &StructLookup = asStruct(&lookup);
            if (!getReadyState(structLookup, STRUCT_FIELDS_COMPLETE))
                return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
            let hits: usize = 0;
            assert(structLookup.fields.length < 50, "Sorry, I need to hack this for now");
            for (let i: usize = 0; i < context.fieldLength; i = i + 1) {
                let name: Token = context.getFieldNameAtIndex(i);
                let exprID: usize = context.getFieldExprAtIndex(i);
                let exprState: TCState = this.typeCheckExpr(exprID, scopes);
                if (isError(&exprState)) return exprState;
                if (!hasField(structLookup, &name.content)) {
                    return this.reportUnknownField(name, structLookup);
                }
                let fieldIndex: usize = getIndexByName(structLookup, &name);
                let bit: usize = shiftLeft(1, fieldIndex);
                if ((hits & bit) != 0) {
                    todo_with_msg("duplicate field");
                } else {
                    hits = hits | bit;
                }
                let field: &VariableLookup = at(&structLookup.fields, fieldIndex);
                let fieldState: &TCState = &field.typeState;
                assert(isSuccess(fieldState), "Struct is ready to go, but field type is invalid?");
                assert(name.content.equals(&field.name.content), "Seems like my hack doesn't work");
                let fieldType: &Type = types.at(getType(fieldState));
                if (wantsInfer(&exprState))
                    exprState = this.inferTypeOntoExpr(exprID, fieldType.getID());
                let exprType: &Type = types.at(getType(&exprState));
                if (!fieldType.equals(exprType)) {
                    return this.reportTypeMismatch(exprs.at(exprID).span, fieldType, exprType);
                }
            }
            return newTCStateType(structLookup.typeID);
        } else {
            unreachable("typeCheckExprStructInit got non-struct");
        }
    }

    func typeCheckIdentifier(&this, exprID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckIdentifier");
        let expr: &ParsedExpr = exprs.at(exprID);
        assert(expr.kind == EXPR_NAME);
        let name: Token = expr.origToken;
        let var: VariableLookup = blank;
        if (!resolveVariableByName(&this.lookup, this.currentModule, &name, scopes, &var)) {
            let loc: String = name.getLocation();
            let _name: String = name.content.toString();
            fprintf(stderr, "%s: %s: Use of undeclared identifier `%s`.\n", loc.chars(), ERR_STR, _name.chars());
            let alternatives: VariableLookupList = searchAllModulesForIdentifier(&this.lookup, &name);
            for (let i: usize = 0; i < alternatives.length; i = i + 1) {
                let t: &VariableLookup = at(&alternatives, i);
                let loc: String = t.name.getLocation();
                fprintf(stderr, "%s: %s: A variable with that name is located here. Import the module to use it.\n", loc.chars(), NOTE_STR);
                loc.drop();
            }
            _name.drop();
            loc.drop();
            this.typeError = true;
            return newTCStateFailure(ERROR_NO_SUCH_IDENTIFIER);
        }
        if (this.isComptimeContext && !var.isComptime) {
            this.reportRuntimeValueInComptimeContext(name, &var);
        }
        let state: TCState = var.typeState;
        if (isInvalid(&state)) {
            return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
        }
        if (isError(&state)) return state;
        assert(expr.op == 0);
        let _loc: Token = blank;
        if (isKnownVariable(at(scopes, 0), name.content, &_loc)) {
            (*expr).op = 1;
        }
        (*expr).lhs = var.globalID;
        (*expr).typeState = state;
        return state;
    }

    func typeCheckExprBinary(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprBinary");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY, "Expr expected to be Binary");
        if (expr.op == BIN_DOT) {
            return this.typeCheckExprMemberAccess(binID, scopes);
        } else if (expr.op == BIN_ASSIGN) {
            return this.typeCheckExprAssign(binID, scopes);
        } else if (expr.op == BIN_INDEXED_ACCESS) {
            return this.typeCheckExprIndexedAccess(binID, scopes);
        } else if (isArithmetic(expr)) {
            return this.typeCheckExprArithmetic(binID, scopes);
        } else if (isComparison(expr)) {
            return this.typeCheckExprComparison(binID, scopes);
        } else if (isLogical(expr)) {
            return this.typeCheckExprLogical(binID, scopes);
        } else if (isBitwise(expr)) {
            return this.typeCheckExprBitwise(binID, scopes);
        } else {
            this.emergencyPrint(expr.span);
            unreachable("Exhaustive handling of ops in typeCheckExprBinary");
        }
    }

    func typeCheckExprIndexedAccess(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprIndexedAccess");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY);
        assert(expr.op == BIN_INDEXED_ACCESS);
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        if (!isType(&lhsState)) todo_with_msg("indexed access, original LHS is not a type");
        let lhsTypeID: usize = getType(&lhsState);
        let lhsType: &Type = types.at(lhsTypeID);
        if (!lhsType.isArray() && !lhsType.isPointer()) {
            return this.reportIndexedAccessOnNonArray(expr.span, lhsType);
        }
        if (wantsInfer(&rhsState)) {
            let usizeType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_USIZE);
            rhsState = this.inferTypeOntoExpr(expr.rhs, usizeType.getID());
        }
        if (!isType(&rhsState)) todo_with_msg("indexed access, could not infer type to RHS");
        let rhsTypeID: usize = getType(&rhsState);
        let rhsType: &Type = types.at(rhsTypeID);
        // FIXME: Put those into a single check
        if (!rhsType.isPrimitive() || rhsTypeID != TYPE_USIZE) {
            let loc: String = toString(&expr.span);
            let typ: String = rhsType.toString();
            fprintf(stderr, "%s: %s: Expected index of array access to be type usize, got %s.\n", loc.chars(), ERR_STR, typ.chars());
            typ.drop();
            loc.drop();
            this.typeError = true;
            return newTCStateFailure(ERROR_INDEXED_TYPE_MISMATCH);
        }
        let underlyingID: usize = lhsType.typeIndex;
        let underlyingType: &Type = types.at(underlyingID);
        assert(underlyingType.getID() == underlyingID);
        return newTCStateType(underlyingID);
    }

    func typeCheckExprLogical(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprLogical");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY);
        assert(isLogical(expr));
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        let maybeInfer: TCState = this.checkIfInferIsNeeded(expr.lhs, &lhsState, expr.rhs, &rhsState);
        if (isError(&maybeInfer)) {
            todo_with_msg("couldn't infer in logical");
        }
        if (wantsInfer(&maybeInfer)) return maybeInfer;
        let lhsType: &Type = types.at(getType(&lhsState));
        let rhsType: &Type = types.at(getType(&rhsState));
        let boolType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
        let result = newTCStateType(boolType.getID());
        if (!lhsType.isBoolean()) {
            result = this.reportTypeMismatch(exprs.at(expr.lhs).span, boolType, lhsType);
        }
        if (!rhsType.isBoolean()) {
            result = this.reportTypeMismatch(exprs.at(expr.rhs).span, boolType, rhsType);
        }
        return result;
    }

    func typeCheckExprBitwise(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprBitwise");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY);
        assert(isBitwise(expr));
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        let maybeInfer: TCState = this.checkIfInferIsNeeded(expr.lhs, &lhsState, expr.rhs, &rhsState);
        if (isError(&maybeInfer)) {
            todo_with_msg("couldn't infer in bitwise");
        }
        if (wantsInfer(&maybeInfer)) return maybeInfer;
        let lhsType: &Type = types.at(getType(&lhsState));
        let rhsType: &Type = types.at(getType(&rhsState));
        if (!lhsType.equals(rhsType) || !lhsType.isInteger() || !rhsType.isInteger()) {
            return this.reportBinaryTypeMismatch(
                expr.op,
                exprs.at(expr.lhs).span, lhsType,
                exprs.at(expr.rhs).span, rhsType,
            );
        }
        return lhsState;
    }

    func typeCheckExprAssign(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprAssign");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY);
        assert(expr.op == BIN_ASSIGN);
        let lhsExpr: &ParsedExpr = exprs.at(expr.lhs);
        if (!isLValue(lhsExpr)) {
            this.emergencyPrint(lhsExpr.span);
            todo_with_msg("invalid l-value");
        }
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        let maybeInfer: TCState = this.checkIfInferIsNeeded(expr.lhs, &lhsState, expr.rhs, &rhsState);
        if (isError(&maybeInfer)) {
            todo_with_msg("couldn't infer in assignment");
        }
        if (!isType(&lhsState)) todo_with_msg("assignment, could not infer type to LHS");
        if (!isType(&rhsState)) todo_with_msg("assignment, could not infer type to RHS");
        let lhsType: &Type = types.at(getType(&lhsState));
        let rhsType: &Type = types.at(getType(&rhsState));
        if (!lhsType.equals(rhsType)) {
            return this.reportTypeMismatch(exprs.at(expr.rhs).span, lhsType, rhsType);
        }
        return rhsState;
    }

    func typeCheckExprMemberAccess(&this, dotID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprMemberAccess");
        let expr: &ParsedExpr = exprs.at(dotID);
        assert(expr.kind == EXPR_BINARY, "Expr expected to be Binary");
        assert(expr.op == BIN_DOT);
        let instance: TCState = this.typeCheckExpr(expr.lhs, scopes);
        if (isError(&instance)) return instance;
        if (wantsInfer(&instance)) return instance;
        let instanceTypeID: usize = getType(&instance);
        let instanceType: &Type = types.at(instanceTypeID);
        if (!instanceType.isStruct() && !instanceType.isStructPointer()) {
            return this.reportMemberAccessOnNonStruct(expr, instanceType);
        }
        let underlying: &Type = instanceType;
        if (!underlying.isStruct()) underlying = instanceType.getUnderlyingType(true);
        let lookup: TypeLookup = getTypeLookupForType(&this.lookup, underlying);
        if (underlying.isStruct()) {
            assert(isStruct(&lookup));
            let structLookup: &StructLookup = asStruct(&lookup);
            let rhs: &ParsedExpr = exprs.at(expr.rhs);
            if (rhs.kind == EXPR_NAME) {
                if (!getReadyState(structLookup, STRUCT_FIELDS_COMPLETE))
                    return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
                let fieldName: Token = rhs.origToken;
                let field: VariableLookup = blank;
                if (!resolveFieldByName(structLookup, &fieldName, &field)) {
                    return this.reportUnknownField(fieldName, structLookup);
                }
                let fieldState: TCState = field.typeState;
                assert(isSuccess(&fieldState), "Expected valid field type");
                return fieldState;
            } else if (rhs.kind == EXPR_CALL) {
                if (!getReadyState(structLookup, STRUCT_SIGNATURE_COMPLETE))
                    return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
                let methodName: Token = rhs.origToken;
                let methods: MethodLookupList = resolveMethodByName(structLookup, &methodName);
                if (methods.length == 0) {
                    let loc: String = methodName.getLocation();
                    let structName: String = structLookup.name.toString();
                    let structLoc: String = structLookup.name.getLocation();
                    let n: String = methodName.content.toString();
                    fprintf(stderr,
                        "%s: %s: Struct `%s` has no method named `%s`.\n%s: %s: Struct declared here.\n",
                        loc.chars(), ERR_STR, structName.chars(), n.chars(), structLoc.chars(), NOTE_STR,
                    );
                    n.drop();
                    structLoc.drop();
                    structName.drop();
                    loc.drop();
                    this.typeError = true;
                    return newTCStateFailure(ERROR_NO_SUCH_METHOD);
                }
                let callContext: &ArrayContext = &rhs.arrayContext;
                let arguments: TCStateList = blank;
                push(&arguments, instance);
                for (let i: usize = 0; i < callContext.elemLength; i = i + 1) {
                    let argID: usize = callContext.getElementAtIndex(i);
                    let arg: TCState = this.typeCheckExpr(argID, scopes);
                    if (isError(&arg)) return arg;
                    push(&arguments, arg);
                }
                assert(arguments.length == callContext.elemLength + 1);
                let candidates: MethodLookupList = blank;
                let mark: TCState = this.markMethodCallCandidates(callContext, &methods, &candidates, &arguments);
                if (isError(&mark)) return mark;
                // methods contains all methods with the same amount of arguments and
                // candidates where infer-semantics could validate the function
                // e.g. foo(i: i32) + foo(i: u64) for foo(5)
                let globalID: usize = 0;
                let sweep: TCState = this.selectMethodCallCandidate(dotID, callContext, &methods, &candidates, &arguments, &globalID, scopes);
                if (isError(&sweep)) return sweep;
                if (wantsInfer(&sweep)) return sweep;
                assert(isType(&sweep));
                (*rhs).lhs = globalID;
                return sweep;
            } else {
                unreachable("Got non-field non-call RHS in the dot operation.");
            }
        } else {
            unreachable("MemberAccess expected Struct as LHS");
        }
    }

    func checkIfInferIsNeeded(&this, lhsID: usize, lhsState: &TCState, rhsID: usize, rhsState: &TCState) -> TCState {
        trace("TypeChecker.checkIfInferIsNeeded");
        let lhsExpr: &ParsedExpr = exprs.at(lhsID);
        let rhsExpr: &ParsedExpr = exprs.at(rhsID);
        if (isType(lhsState) && isType(rhsState)) {
            return newTCStateSuccess();
        } else if (isType(lhsState) && !isType(rhsState)) {
            let lhsType: usize = getType(lhsState);
            *rhsState = this.inferTypeOntoExpr(rhsID, lhsType);
            return *rhsState;
        } else if (!isType(lhsState) && isType(rhsState)) {
            let rhsType: usize = getType(rhsState);
            *lhsState = this.inferTypeOntoExpr(lhsID, rhsType);
            return *lhsState;
        } else {
            return newTCStatePleaseInfer();
        }
    }

    func inferTypeOntoExpr(&this, exprID: usize, typeID: usize) -> TCState {
        trace("TypeChecker.inferTypeOntoExpr");
        return this.tryInferTypeOntoExpr(exprID, typeID, false);
    }

    func tryInferTypeOntoExpr(&this, exprID: usize, typeID: usize, checkOnly: bool) -> TCState {
        trace("TypeChecker.tryInferTypeOntoExpr");
        let expr: &ParsedExpr = exprs.at(exprID);
        if (isSuccess(&expr.typeState)) {
            let exprType: &Type = types.at(getType(&expr.typeState));
            let wantType: &Type = types.at(typeID);
            if (!exprType.equals(wantType)) todo_with_msg("infer failed");
            return newTCStateType(typeID);
        }
        let typ: &Type = types.at(typeID);
        let tid: TCState = blank;
        if (expr.kind == EXPR_INT_LIT) {
            if (typ.isChar()) {
                if (!checkOnly) {
                    let l: String = expr.origToken.getLocation();
                    fprintf(stderr, "%s: %s: Using integer literal to initialize value of type char.\n",
                        l.chars(), WARN_STR);
                    l.drop();
                }
                tid = newTCStateType(typ.getID());
            } else if (typ.isInteger() || typ.isFloat()) {
                tid = newTCStateType(typ.getID());
            } else if (typ.isPointer()) {
                // REVIEW: This is... More than debatable?
                // Context requires a pointer, we have an integer literal.. Now this literal is type usize
                // Question: Is there ever a situation where we actually want this literal to be type ptr?
                let usizeType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_USIZE);
                tid = newTCStateType(usizeType.getID());
            } else if (typ.isBoolean()) {
                if (!checkOnly) {
                    let s: String = expr.origToken.content.toString();
                    let l: String = expr.origToken.getLocation();
                    fprintf(stderr, "%s: %s: Unexpected Literal! Expected boolean, found `%s`.\n",
                        l.chars(), ERR_STR, s.chars());
                    l.drop();
                    s.drop();
                    this.typeError = true;
                }
                return newTCStateFailure(ERROR_UNEXPECTED_LITERAL);
            } else if (typ.isArray()) {
                if (!checkOnly) {
                    let s: String = expr.origToken.content.toString();
                    let l: String = expr.origToken.getLocation();
                    fprintf(stderr, "%s: %s: Unexpected Literal! Expected array, found `%s`.\n",
                        l.chars(), ERR_STR, s.chars());
                    l.drop();
                    s.drop();
                    this.typeError = true;
                }
                return newTCStateFailure(ERROR_UNEXPECTED_LITERAL);
            } else {
                todo_with_msg("can't infer non-int non-float type onto int literal");
            }
        } else if (expr.kind == EXPR_CHAR_LIT) {
            if (typ.kind != TYPE_KIND_PRIMITIVE && typ.typeIndex != TYPE_CHAR)
                todo_with_msg("can't infer non-char type onto char literal");
            tid = newTCStateType(typ.getID());
        } else if (expr.kind == EXPR_ARRAY_LIT) {
            if (!typ.isArray()) {
                if (!checkOnly) {
                    let loc = toString(&expr.span);
                    let t = typ.toString();
                    fprintf(stderr, "%s: %s: Expected expression of type %s, found array literal.\n", loc.chars(), ERR_STR, t.chars());
                    t.drop();
                    loc.drop();
                }
                return newTCStateFailure(ERROR_TYPE_MISMATCH);
            }
            assert(expr.arrayContext.elemLength > 0, "Got empty array literal");
            if (expr.arrayContext.size == 0) {
                if (typ.arraySize != expr.arrayContext.elemLength) {
                    if (!checkOnly) {
                        let loc: String = toString(&expr.span);
                        fprintf(stderr, "%s: %s: Array size mismatch! Expected to find %llu element(s), got %llu instead.\n",
                            loc.chars(), ERR_STR, typ.arraySize, expr.arrayContext.elemLength);
                        loc.drop();
                        this.typeError = true;
                    }
                    return newTCStateFailure(ERROR_ARRAY_SIZE_MISMATCH);
                }
                let lastErrState: TCState = blank;
                for (let i: usize = 0; i < expr.arrayContext.elemLength; i = i + 1) {
                    tid = this.tryInferTypeOntoExpr(expr.arrayContext.getElementAtIndex(i), typ.typeIndex, checkOnly);
                    if (isError(&tid)) {
                        lastErrState = tid;
                    }
                }
                if (!isInvalid(&lastErrState)) return lastErrState;
            } else {
                if (typ.arraySize != expr.arrayContext.size) {
                    if (!checkOnly) {
                        let loc: String = toString(&expr.span);
                        fprintf(stderr, "%s: %s: Array size mismatch! Expected to find %llu element(s), got %llu instead.\n",
                            loc.chars(), ERR_STR, typ.arraySize, expr.arrayContext.size);
                        loc.drop();
                        this.typeError = true;
                    }
                    return newTCStateFailure(ERROR_ARRAY_SIZE_MISMATCH);
                }
                tid = this.tryInferTypeOntoExpr(expr.arrayContext.getElementAtIndex(0), typ.typeIndex, checkOnly);
                if (isError(&tid)) return tid;
            }
            tid = newTCStateType(typeID);
        } else if (expr.kind == EXPR_BLANK) {
            if (typ.isPointer()) {
                let loc: String = toString(&expr.span);
                let name: String = typ.toString();
                fprintf(stderr, "%s: %s: Invalid initialization of reference of type %s. Please use `null` instead.\n",
                    loc.chars(), ERR_STR, name.chars());
                name.drop();
                loc.drop();
                this.typeError = true;
                return newTCStateFailure(ERROR_BLANK_FOR_NULL);
            } else if (typ.isPrimitive()) {
                let loc: String = toString(&expr.span);
                let name: String = typ.toString();
                fprintf(stderr, "%s: %s: Using `blank` to initialize value of type %s. Please use `0` instead.\n",
                    loc.chars(), WARN_STR, name.chars());
                name.drop();
                loc.drop();
            }
            tid = newTCStateType(typ.getID());
        } else if (expr.kind == EXPR_BINARY) {
            if (isArithmetic(expr) || isBitwise(expr)) {
                tid = this.tryInferTypeOntoExpr(expr.lhs, typeID, checkOnly);
                if (isError(&tid)) return tid;
                tid = this.tryInferTypeOntoExpr(expr.rhs, typeID, checkOnly);
                if (isError(&tid)) return tid;
                tid = newTCStateType(typeID);
            } else if (isComparison(expr)) {
                // Assuming that neither side has a type (otherwise typeCheckExprComparison would've handled the infer step)
                // So all that's left is whack things like `1 == 1`, for which we blindly try to infer usize onto both sides
                let usizeType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_USIZE);
                tid = this.tryInferTypeOntoExpr(expr.lhs, usizeType.getID(), checkOnly);
                if (isError(&tid)) return tid;
                tid = this.tryInferTypeOntoExpr(expr.rhs, usizeType.getID(), checkOnly);
                if (isError(&tid)) return tid;
                tid = newTCStateType(typeID);
            } else if (expr.op == BIN_DOT) {
                tid = this.tryInferTypeOntoMemberAccess(exprID, typeID, checkOnly);
                if (isError(&tid)) return tid;
            } else {
                todo_with_msg("inferTypeOntoExpr for non-arith non-comp binary");
            }
        } else if (expr.kind == EXPR_UNARY) {
            if (expr.op == UNARY_DEREF) {
                let newType: &Type = newType(TYPE_KIND_POINTER, typeID);
                tid = this.tryInferTypeOntoExpr(expr.lhs, newType.getID(), checkOnly);
                if (isError(&tid)) return tid;
                tid = newTCStateType(typeID);
            } else if (expr.op == UNARY_REF) {
                if (!typ.isPointer()) todo_with_msg("can't infer non-pointer type onto reference");
                let underlying: &Type = typ.getUnderlyingType(false);
                tid = this.tryInferTypeOntoExpr(expr.lhs, underlying.getID(), checkOnly);
                if (isError(&tid)) return tid;
                tid = newTCStateType(typeID);
            } else if (expr.op == UNARY_MINUS) {
                // -expr
                // typeof(expr) == typeof(-expr)
                if (!typ.isSignedInteger() && !typ.isFloat()) {
                    if (!checkOnly) {
                        let loc: String = toString(&expr.span);
                        let t: String = typ.toString();
                        fprintf(stderr, "%s: %s: Negation is not defined for type %s.\n", loc.chars(), ERR_STR, t.chars());
                        t.drop();
                        loc.drop();
                        this.typeError = true;
                    }
                    return newTCStateFailure(ERROR_TYPE_MISMATCH);
                }
                tid = this.tryInferTypeOntoExpr(expr.lhs, typeID, checkOnly);
                if (isError(&tid)) return tid;
                assert(isType(&tid), "infer non-error expected to be a type");
                let subType: &Type = types.at(getType(&tid));
                assert(subType.equals(typ), "Infer: SubExpr of UNARY_MINUS is expected to have same type as Expr");
                tid = newTCStateType(typeID);
            } else if (expr.op == UNARY_NOT) {
                let boolType: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
                tid = this.tryInferTypeOntoExpr(expr.lhs, boolType.getID(), checkOnly);
                if (isError(&tid)) return tid;
                todo_with_msg("unary not infer");
            } else {
                unreachable("Exhaustive handling of unary ops in inferTypeOntoExpr");
            }
        } else if (expr.kind == EXPR_NULL) {
            if (!typ.isPointer()) todo_with_msg("tried to infer non-ptr to null");
            tid = newTCStateType(typeID);
        } else if (expr.kind == EXPR_CALL) {
            tid = this.tryInferTypeOntoCall(exprID, typeID, checkOnly);
            if (isError(&tid)) return tid;
        } else {
            this.emergencyPrint(expr.span);
            todo_with_msg("unhandled case in inferTypeOntoExpr");
        }
        if (!checkOnly) {
            (*expr).typeState = tid;
        }
        return tid;
    }

    func tryInferTypeOntoCall(&this, exprID: usize, typeID: usize, checkOnly: bool) -> TCState {
        trace("TypeChecker.tryInferTypeOntoCall");
        let expr = exprs.at(exprID);
        let typ = types.at(typeID);
        assert(expr.kind == EXPR_CALL);
        let functions: FunctionLookupList = blank;
        if (!resolveAllFunctionsWithReturnType(&this.lookup, this.currentModule, &expr.origToken, typ, &functions)) {
            clear(&functions);
            return newTCStateFailure(ERROR_LOOKUP_NOT_READY);
        }
        let callContext: &ArrayContext = &expr.arrayContext;
        let actual: FunctionLookupList = blank;
        for (let i: usize = 0; i < functions.length; i = i + 1) {
            let f = at(&functions, i);
            assert(getReadyState(f, FUNC_PARAMS_COMPLETE));
            let arguments: TCStateList = blank;
            let state = this.typeCheckFunctionArguments(&f.params, callContext, &arguments, true);
            if (isError(&state)) {
                todo_with_msg("argument fail");
            }
            state = this.typeCheckFunctionParameters(&f.params, callContext, &arguments, checkOnly);
            if (isError(&state)) {
                todo_with_msg("parameter fail");
            }
            push(&actual, *f);
        }
        if (actual.length == 1) {
            let f = at(&actual, 0);
            if (!checkOnly) {
                let arguments: TCStateList = blank;
                let state = this.typeCheckFunctionArguments(&f.params, callContext, &arguments, false);
                assert(isSuccess(&state));
                (*expr).lhs = f.globalID;
            }
            return f.returnType;
        } else if (actual.length == 0) {
            if (!checkOnly) {
                let functions: FunctionLookupList = resolveFunctionByName(&this.lookup, this.currentModule, &expr.origToken);
                return this.reportNoFunctionCallCandidate(getID(expr), &functions);
            }
            return newTCStateFailure(ERROR_TYPE_MISMATCH);
        } else {
            if (!checkOnly) {
                return this.reportFunctionCallTooManyOptions(expr, &actual);
            }
            return newTCStateFailure(ERROR_TYPE_MISMATCH);
        }
    }

    func tryInferTypeOntoMemberAccess(&this, exprID: usize, typeID: usize, checkOnly: bool) -> TCState {
        trace("TypeChecker.tryInferTypeOntoMemberAccess");
        let expr = exprs.at(exprID);
        let typ = types.at(typeID);
        assert(expr.kind == EXPR_BINARY);
        assert(expr.op == BIN_DOT);
        let lhs = exprs.at(expr.lhs);
        let rhs = exprs.at(expr.rhs);
        if (rhs.kind == EXPR_NAME) {
            let name = rhs.origToken;
            let structs = resolveAllStructsWithField(&this.lookup, this.currentModule, &name, typ);
            if (structs.length == 0) {
                todo_with_msg("tryInferTypeOntoMemberAccess: 0 struct with field");
            } else if (structs.length == 1) {
                let strukt = at(&structs, 0);
                let state = this.tryInferTypeOntoExpr(expr.lhs, strukt.typeID, checkOnly);
                if (isError(&state)) return state;
                if (checkOnly) return newTCStateSuccess();
                return newTCStateType(typeID);
            } else {
                if (!checkOnly) {
                    return this.reportMemberAccessTooManyOptions(expr, &structs);
                }
                return newTCStateFailure(ERROR_TYPE_MISMATCH);
            }
        } else if (rhs.kind == EXPR_CALL) {
            todo_with_msg("infer member call");
        } else {
            unreachable("Exhaustive handling of possibilities in tryInferTypeOntoMemberAccess");
        }
    }

    func typeCheckExprArithmetic(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprArithmetic");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY, "Expr expected to be Binary");
        assert(isArithmetic(expr), "Expr expected to be arithmetic");
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        let lhsPointer: bool = false;
        let rhsPointer: bool = false;
        if (isType(&lhsState)) if (types.at(getType(&lhsState)).isPointer()) lhsPointer = true;
        if (isType(&rhsState)) if (types.at(getType(&rhsState)).isPointer()) rhsPointer = true;
        if (lhsPointer || rhsPointer) {
            if (expr.op != BIN_PLUS && expr.op != BIN_SUB) {
                return this.reportInvalidPointerArithmetics(
                    expr.op,
                    exprs.at(expr.lhs).span,
                    exprs.at(expr.rhs).span,
                );
            }
        }
        let maybeInfer: TCState = this.checkIfInferIsNeeded(expr.lhs, &lhsState, expr.rhs, &rhsState);
        if (isError(&maybeInfer)) return maybeInfer;
        if (wantsInfer(&maybeInfer)) return maybeInfer;
        let lhsType: &Type = types.at(getType(&lhsState));
        let rhsType: &Type = types.at(getType(&rhsState));
        let resultState: TCState = blank;
        if (lhsType.equals(rhsType)) {
            if (lhsType.isChar() && expr.op != BIN_PLUS && expr.op != BIN_SUB) {
                return this.reportBinaryTypeMismatch(
                    expr.op,
                    exprs.at(expr.lhs).span, lhsType,
                    exprs.at(expr.rhs).span, rhsType,
                );
            }
            if (lhsType.isStruct() || lhsType.isArray()) {
                return this.reportBinaryTypeMismatch(
                    expr.op,
                    exprs.at(expr.lhs).span, lhsType,
                    exprs.at(expr.rhs).span, rhsType,
                );
            } else if (lhsType.isPointer()) {
                let t: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_USIZE);
                resultState = newTCStateType(t.getID());
            } else {
                assert(lhsType.getID() == rhsType.getID(), "Arithmetic LHS and RHS are different types");
                resultState = newTCStateType(lhsType.getID());
            }
        } else if (lhsType.isPointer() && rhsType.isInteger()) {
            if (rhsType.typeIndex == TYPE_USIZE) {
                resultState = lhsState;
            } else {
                let rhs = exprs.at(expr.rhs).span;
                let err = this.reportBinaryTypeMismatch(
                    expr.op,
                    exprs.at(expr.lhs).span, lhsType,
                    rhs, rhsType,
                );
                let loc = toString(&rhs);
                fprintf(stderr, "%s: %s: Pointer offsets must be of type usize.\n", loc.chars(), NOTE_STR);
                loc.drop();
                return err;
            }
        } else if (lhsType.isInteger() && rhsType.isPointer()) {
            if (lhsType.typeIndex == TYPE_USIZE) {
                resultState = rhsState;
            } else {
                let lhs = exprs.at(expr.lhs).span;
                let err = this.reportBinaryTypeMismatch(
                    expr.op,
                    lhs, lhsType,
                    exprs.at(expr.rhs).span, rhsType,
                );
                let loc = toString(&lhs);
                fprintf(stderr, "%s: %s: Pointer offsets must be of type usize.\n", loc.chars(), NOTE_STR);
                loc.drop();
                return err;
            }
        } else {
            return this.reportBinaryTypeMismatch(
                expr.op,
                exprs.at(expr.lhs).span, lhsType,
                exprs.at(expr.rhs).span, rhsType,
            );
        }
        return resultState;
    }

    func typeCheckExprComparison(&this, binID: usize, scopes: &ScopeLookupList) -> TCState {
        trace("TypeChecker.typeCheckExprComparison");
        let expr: &ParsedExpr = exprs.at(binID);
        assert(expr.kind == EXPR_BINARY, "Expr expected to be Binary");
        assert(isComparison(expr), "Expr expected to be comparison");
        let lhsState: TCState = this.typeCheckExpr(expr.lhs, scopes);
        let rhsState: TCState = this.typeCheckExpr(expr.rhs, scopes);
        if (isError(&lhsState)) return lhsState;
        if (isError(&rhsState)) return rhsState;
        let maybeInfer: TCState = this.checkIfInferIsNeeded(expr.lhs, &lhsState, expr.rhs, &rhsState);
        if (isError(&maybeInfer)) {
            todo_with_msg("couldn't infer in comp");
        }
        if (wantsInfer(&maybeInfer)) return maybeInfer;
        let lhsType: &Type = types.at(getType(&lhsState));
        let rhsType: &Type = types.at(getType(&rhsState));
        if (!lhsType.equals(rhsType)) {
            return this.reportBinaryTypeMismatch(
                expr.op,
                exprs.at(expr.lhs).span, lhsType,
                exprs.at(expr.rhs).span, rhsType,
            );
        }
        if (lhsType.isStruct() || rhsType.isStruct()
            || lhsType.isArray() || rhsType.isArray()) {
            todo_with_msg("report error, can't compare structs or arrays using == or similar.");
        }
        let t: &Type = newType(TYPE_KIND_PRIMITIVE, TYPE_BOOL);
        return newTCStateType(t.getID());
    }


    func typeCheckTypeNode(&this, typeID: usize) -> TCState {
        trace("TypeChecker.typeCheckTypeNode");
        let typ: &ParsedTypeNode = typeNodes.at(typeID);
        if (typ.ignored) return blank;
        if (isSuccess(&typ.typeState)) return typ.typeState;
        let tid: usize = 0;
        if (typ.kind == PARSED_TYPE_REF) {
            let under: TCState = this.typeCheckTypeNode(typ.underlyingID);
            if (isError(&under)) return under;
            let underlyingType: usize = getType(&under);
            let t: &Type = newType(TYPE_KIND_POINTER, underlyingType);
            tid = t.getID();
        } else if (typ.kind == PARSED_TYPE_ARRAY) {
            if (typ.arraySize == 0) todo_with_msg("0 elements in mah array");
            let under: TCState = this.typeCheckTypeNode(typ.underlyingID);
            if (isError(&under)) return under;
            let underlyingType: usize = getType(&under);
            let t: &Type = newType(TYPE_KIND_ARRAY, underlyingType);
            (*t).arraySize = typ.arraySize;
            tid = t.getID();
        } else if (typ.kind == PARSED_TYPE_IDENT) {
            let name: Token = typ.nameTkn;
            let typeLookup: TypeLookup = blank;
            if (!resolveTypeByName(&this.lookup, this.currentModule, &name, &typeLookup)) {
                let loc: String = name.getLocation();
                let _n: String = name.content.toString();
                fprintf(stderr, "%s: %s: Use of undeclared type identifier `%s`.\n", loc.chars(), ERR_STR, _n.chars());
                let alternatives: TypeLookupList = searchAllModulesForTypeName(&this.lookup, &name);
                for (let i: usize = 0; i < alternatives.length; i = i + 1) {
                    let t: &TypeLookup = at(&alternatives, i);
                    if (isStruct(t)) {
                        let s: &StructLookup = asStruct(t);
                        let loc: String = s.name.getLocation();
                        fprintf(stderr, "%s: %s: A struct with that name is located here. Import the module to use it.\n", loc.chars(), NOTE_STR);
                        loc.drop();
                    }
                }
                _n.drop();
                loc.drop();
                this.typeError = true;
                return newTCStateFailure(ERROR_NO_SUCH_IDENTIFIER);
            }
            if (isStruct(&typeLookup)) {
                let structLookup: &StructLookup = asStruct(&typeLookup);
                let _tid: usize = structLookup.typeID;
                assert(_tid != 0, "Ready to use Struct Lookup has Type ID 0");
                let t: &Type = types.at(_tid);
                assert(t.isStruct(), "Struct Lookup links to non-Struct type");
                tid = t.getID();
            } else {
                todo_with_msg("check ident");
            }
        } else if (typ.kind == PARSED_TYPE_BUILTIN) {
            let id: usize = getID(typ);
            let typeID: usize = 0;
            if (id == PARSED_TYPE_INVALID) typeID = TYPE_INVALID;
            else if (id == PARSED_TYPE_UNKNOWN) typeID = TYPE_UNKNOWN;
            else if (id == PARSED_TYPE_NONE) typeID = TYPE_NONE;
            else if (id == PARSED_TYPE_ANY) typeID = TYPE_ANY;
            else if (id == PARSED_TYPE_I8) typeID = TYPE_I8;
            else if (id == PARSED_TYPE_I16) typeID = TYPE_I16;
            else if (id == PARSED_TYPE_I32) typeID = TYPE_I32;
            else if (id == PARSED_TYPE_I64) typeID = TYPE_I64;
            else if (id == PARSED_TYPE_U8) typeID = TYPE_U8;
            else if (id == PARSED_TYPE_U16) typeID = TYPE_U16;
            else if (id == PARSED_TYPE_U32) typeID = TYPE_U32;
            else if (id == PARSED_TYPE_U64) typeID = TYPE_U64;
            else if (id == PARSED_TYPE_USIZE) typeID = TYPE_USIZE;
            else if (id == PARSED_TYPE_BOOL) typeID = TYPE_BOOL;
            else if (id == PARSED_TYPE_CHAR) typeID = TYPE_CHAR;
            else if (id == PARSED_TYPE_F32) typeID = TYPE_F32;
            else if (id == PARSED_TYPE_F64) typeID = TYPE_F64;
            else {
                this.emergencyPrint(typ.span);
                todo_with_msg("handle other parsed -> checked type conversion");
            }
            let t: &Type = newType(TYPE_KIND_PRIMITIVE, typeID);
            tid = t.getID();
        } else {
            todo_with_msg("unknown type kind");
        }
        let state: TCState = newTCStateType(tid);
        (*typ).typeState = state;
        return state;
    }
}

func newTypeChecker() -> TypeChecker {
    return TypeChecker {
        isComptimeContext: false,
        currentModule: 0,
        currentFunction: null,
        currentMethod: null,
        lookup: blank,
        typeError: false,
    };
}
