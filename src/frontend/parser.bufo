import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "bufo.bufo";
import "./lexer.bufo";
import "./token.bufo";
import "./nodes.bufo";
import "./context.bufo";
import "../util/lists.bufo";
import "../util/span.bufo";
import "../util/arena.bufo";
import "../middleend/checker.bufo";
import "../middleend/types.bufo";
import "../backend/irgen.bufo";
import "../backend/interp.bufo";
import "../backend/codegen_llvm.bufo";

@os(WINDOWS) import "winapi/functions.bufo";
@os(WINDOWS) import "winapi/structs.bufo";

struct Parser {
    lexer: Lexer;
    importRoots: &String;
    importRootLength: usize;
    importRootCapacity: usize;
    currentStruct: SubStr;
    syntaxError: bool;
}

func addImportRoot(this: &Parser, filePath: SubStr) {
    trace("Parser.addImportRoot");
    let root: String = getPathParent(&filePath);
    if (this.importRootLength >= this.importRootCapacity) {
        let newCap: usize = this.importRootCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.importRoots = realloc(this.importRoots, newCap * sizeof String);
        assert(this.importRoots != null, "Could not resize import roots");
        this.importRootCapacity = newCap;
    }
    this.importRoots[this.importRootLength] = root;
    this.importRootLength = this.importRootLength + 1;
}

func getImportRootAtIndex(this: &Parser, index: usize) -> String {
    trace("Parser.getImportRootAtIndex");
    return copy(&this.importRoots[index]);
}

func inheritImportRoots(this: &Parser, parent: &Parser) {
    for (let i: usize = 0; i < parent.importRootLength; i = i + 1) {
        let root: String = getImportRootAtIndex(parent, i);
        addImportRoot(this, asSubStr(&root));
        drop(&root);
    }
}

func expectSoftIdentifier(this: &Parser) -> Token {
    trace("Parser.expectSoftIdentifier");
    let tkn: Token = next(&this.lexer);
    if (tkn.kind != TOKEN_KEYWORD && tkn.kind != TOKEN_IDENT) {
        let loc: String = getLocation(&tkn);
        let name: String = toString(&tkn.content);
        fprintf(stderr, "%s: %s: Expected identifier, found `%s` instead.\n", loc.buffer, ERR_STR, name.buffer);
        drop(&name);
        drop(&loc);
        exit(1);
    }
    return tkn;
}

func expect(this: &Parser, tknKind: usize) -> Token {
    trace("Parser.expect");
    let tkn: Token = next(&this.lexer);
    if (tkn.kind != tknKind) {
        let loc: String = getLocation(&tkn);
        let exp: &char = tokenKindToString(tknKind);
        let name: String = toString(&tkn.content);
        fprintf(stderr, "%s: %s: Expected %s, found `%s` instead.\n", loc.buffer, ERR_STR, exp, name.buffer);
        drop(&name);
        drop(&loc);
        exit(1);
    }
    return tkn;
}

func eat(this: &Parser, tknKind: usize) -> bool {
    if (at(this, tknKind)) {
        next(&this.lexer);
        return true;
    }
    return false;
}
func at(this: &Parser, tknKind: usize) -> bool {
    if (peek(&this.lexer).kind == tknKind) {
        return true;
    }
    return false;
}

func parsedEOF(this: &Parser) -> bool {
    return peek(&this.lexer).kind == TOKEN_EOF;
}

func parseProject(this: &Parser, root: SubStr) -> ParsedFile {
    trace("Parser.parseProject");
    assert(this.lexer.fileID == 0, "Expected Parser.parseProject to be the root");
    let rootFile: &ParsedFile = newParsedFile(root, this.lexer.content);
    assert(getID(rootFile) == 0, "Expected Parser.parseProject result to be the root");
    parseFile(this, root, rootFile);
    if (this.syntaxError) {
        // All errors are reported at this point
        exit(1);
    }
    return *rootFile;
}

func parseFile(this: &Parser, root: SubStr, file: &ParsedFile) {
    trace("Parser.parseFile");
    file.mod = newParsedModule(blank, blank, blank, blank);
    addImportRoot(this, root);
    while (!parsedEOF(this)) {
        let attributes: ParsedAttributeList = blank;
        let skip = parseAttributes(this, &attributes, false);
        if (skip) {
            debug("Parsed TopLevelItem, but skipping it because of @os()");
            toggleIgnoringNodes();
            let item: &ParsedTopLevelItem = parseTopLevelItem(this, attributes, skip);
            toggleIgnoringNodes();
        } else {
            let item: &ParsedTopLevelItem = parseTopLevelItem(this, attributes, skip);
            push(&file.mod.tlis, getID(item));
        }
    }
}

func parseAttributes(this: &Parser, attrs: &ParsedAttributeList, inModule: bool) -> bool {
    trace("Parser.parseAttributes");
    let skip: bool = false;
    while (eat(this, TOKEN_AT)) {
        let name = expectSoftIdentifier(this);
        if (equals(&name.content, &_ATTR_EXTERN)) {
            if (!inModule && *flags.warnExtra) {
                let loc = toString(&name.span);
                fprintf(stderr, "%s: %s: `@extern()` used outside of a module.\n", loc.buffer, WARN_STR);
                drop(&loc);
            }
            expect(this, TOKEN_PAREN_OPEN);
            let v = expect(this, TOKEN_STRING_LITERAL);
            let end = expect(this, TOKEN_PAREN_CLOSE);
            push(attrs, ParsedAttribute {
                span: newSpanBetween(&name.span, &end.span),
                kind: ATTR_EXTERN,
                name: v,
            });
        } else if (equals(&name.content, &_ATTR_OS)) {
            expect(this, TOKEN_PAREN_OPEN);
            let os = expect(this, TOKEN_IDENT);
            expect(this, TOKEN_PAREN_CLOSE);
            if (!equals(&os.content, &OS_WINDOWS) && !equals(&os.content, &OS_LINUX)) {
                fprintf(stderr, "%s\n", toString(&os.content).buffer);
                todo_with_msg("Unknown os");
            }
            skip = !equals(&os.content, &asSubStr(flags.target));
        } else if (equals(&name.content, &_ATTR_NORETURN)) {
            push(attrs, ParsedAttribute {
                span: name.span,
                kind: ATTR_NORETURN,
            });
        } else {
            let loc = toString(&name.span);
            let n = toString(&name.content);
            fprintf(stderr, "%s: %s: Use of unknown attribute `%s`.\n", loc.buffer, ERR_STR, n.buffer);
            drop(&n);
            drop(&loc);
            this.syntaxError = true;
        }
    }
    return skip;
}

func parseTopLevelItem(this: &Parser, attributes: ParsedAttributeList, skip: bool) -> &ParsedTopLevelItem {
    return parseTopLevelItem(this, TLIParent { isFile: true, id: this.lexer.fileID as u32 }, attributes, skip);
}

func parseTopLevelItem(this: &Parser, parent: TLIParent, attributes: ParsedAttributeList, skip: bool) -> &ParsedTopLevelItem {
    trace("Parser.parseTopLevelItem");
    let tkn: Token = peek(&this.lexer);
    if (equals(&tkn.content, &KEYWORD_IMPORT)) {
        return parseImport(this, skip);
    } else if (equals(&tkn.content, &KEYWORD_CONFIG)) {
        return asTLI(parseConfig(this, parent, attributes));
    } else if (equals(&tkn.content, &KEYWORD_MODULE)) {
        // REVIEW: Do we want to support modules outside of TLIs?
        return asTLI(parseModule(this, parent, attributes));
    } else if (equals(&tkn.content, &KEYWORD_LET)) {
        next(&this.lexer);
        return asTLI(parseVarDeclStmt(this, tkn, true));
    } else if (equals(&tkn.content, &KEYWORD_COMPTIME)) {
        next(&this.lexer);
        return asTLI(parseVarDeclStmt(this, tkn, true));
    } else if (equals(&tkn.content, &KEYWORD_STRUCT)) {
        // REVIEW: Do we want to support structs outside of TLIs?
        return asTLI(parseStructDecl(this, parent));
    } else if (equals(&tkn.content, &KEYWORD_FUNC)) {
        // REVIEW: Do we want to support functions outside of TLIs?
        let isExtern: bool = false;
        for (let i: usize = 0; i < attributes.length; i = i + 1) {
            if (at(&attributes, i).kind == ATTR_EXTERN) {
                isExtern = true;
                break;
            }
        }
        let decl = parseFuncDecl(this, parent, isExtern);
        decl.attrs = attributes;
        return asTLI(decl);
    } else {
        let loc: String = toString(&tkn.span);
        let name: String = toString(&tkn.content);
        fprintf(stderr, "%s: %s: Expected Top Level Keyword, found `%s` instead.\n", loc.buffer, ERR_STR, name.buffer);
        fprintf(stderr, "%s: %s: A non-exhaustive list of TLK: `import`, `let`, `comptime`, `struct`, `func`.\n", loc.buffer, NOTE_STR);
        drop(&name);
        drop(&loc);
        exit(1);
    }
}

func parseModule(this: &Parser, _parent: TLIParent, modAttr: ParsedAttributeList) -> &ParsedModule {
    trace("Parser.parseModule");
    let modTkn: Token = expect(this, TOKEN_KEYWORD);
    assert(equals(&modTkn.content, &KEYWORD_MODULE));
    let name = expect(this, TOKEN_IDENT);
    let tlis: UsizeList = blank;
    expect(this, TOKEN_CURLY_OPEN);
    let mod = newParsedModule(_parent, blank, name, blank);
    let parent = TLIParent { isFile: false, id: getID(mod) as u32 };
    let anyExtern = false;
    while (!at(this, TOKEN_CURLY_CLOSE)) {
        let attributes: ParsedAttributeList = blank;
        let skip = parseAttributes(this, &attributes, true);
        for (let i: usize = 0; !anyExtern && i < attributes.length; i = i + 1) {
            if (at(&attributes, i).kind == ATTR_EXTERN) {
                anyExtern = true;
                break;
            }
        }
        if (skip) {
            debug("Parsed TopLevelItem, but skipping it because of @os()");
            toggleIgnoringNodes();
            let item: &ParsedTopLevelItem = parseTopLevelItem(this, parent, attributes, skip);
            toggleIgnoringNodes();
        } else {
            let item: &ParsedTopLevelItem = parseTopLevelItem(this, parent, attributes, skip);
            push(&tlis, getID(item));
        }
    }
    let end = expect(this, TOKEN_CURLY_CLOSE);
    let span = newSpanBetween(&modTkn.span, &end.span);
    mod.span = span;
    mod.tlis = tlis;
    @os(WINDOWS) if (anyExtern) {
        let modConfigs = UsizeList {};
        let anyLibrary = false;
        for (let i: usize = 0; i < tlis.length; i = i + 1) {
            let t = at(&topLevelItems, *at(&tlis, i));
            if (t.kind == TLI_CONFIG) {
                push(&modConfigs, *at(&tlis, i));
                let cfg = at(&configs, t.nodeID);
                let paths: TokenList = blank;
                push(&paths, newToken(mod.parent.id as usize, &newSubStrOfStrLit("."), 0, TOKEN_DOT));
                for (let j: usize = 0; j < cfg.configs.length; j = j + 1) {
                    let _cfg = at(&cfg.configs, j);
                    if (_cfg.kind == CONFIG_LIBPATH) {
                        push(&paths, _cfg.value);
                    }
                }
                for (let k: usize = 0; k < paths.length; k = k + 1) {
                    let _path = toString(&at(&paths, k).content);
                    let path = toAbsolutePath(&_path);
                    pushChar(&path, '\\');
                    for (let j: usize = 0; j < cfg.configs.length; j = j + 1) {
                        let _cfg = at(&cfg.configs, j);
                        if (_cfg.kind == CONFIG_LIBNAME) {
                            anyLibrary = true;
                            let path = copy(&path);
                            pushSubStr(&path, &_cfg.value.content);
                            pushStr(&path, ".dll");
                            let file: Any = fopen(path.buffer, "r");
                            if (file == null) {
                                continue;
                            }
                            fclose(file);
                            let handle = LoadLibraryA(path.buffer);
                            if (isNull(handle)) {
                                continue;
                            }
                            push(&mod.dlls, getID(newDLL(path, handle)));
                        }
                    }
                    drop(&_path);
                    drop(&path);
                }
            }
        }
        if (modConfigs.length == 0) {
            let loc = toString(&mod.span);
            fprintf(stderr, "%s: %s: Module contains @extern() functions, but no config was specified.\n", loc.buffer, ERR_STR);
            fprintf(stderr, "%s: %s: The config contains important information such as linker flags and library paths.\n", loc.buffer, NOTE_STR);
            fprintf(stderr, "%s: %s: The config can be declared using the top level keyword `config` within the module.\n", loc.buffer, NOTE_STR);
            drop(&loc);
            this.syntaxError = true;
        } else if (!anyLibrary) {
            let loc = toString(&mod.span);
            fprintf(stderr, "%s: %s: Module contains @extern() functions, but no library was provided in the config.\n", loc.buffer, ERR_STR);
            for (let i: usize = 0; i < modConfigs.length; i = i + 1) {
                let t = at(&topLevelItems, *at(&modConfigs, i));
                assert(t.kind == TLI_CONFIG);
                let loc = toString(&t.span);
                fprintf(stderr, "%s: %s: Module configuration specified here.\n", loc.buffer, NOTE_STR);
                drop(&loc);
            }
            drop(&loc);
            this.syntaxError = true;
        }
    }
    @os(LINUX) if (anyExtern) todo_with_msg("check if dll exists");
    return mod;
}

func parseConfig(this: &Parser, parent: TLIParent, attributes: ParsedAttributeList) -> &ParsedConfig {
    trace("Parser.parseConfig");
    let cfgTkn: Token = expect(this, TOKEN_KEYWORD);
    assert(equals(&cfgTkn.content, &KEYWORD_CONFIG));
    expect(this, TOKEN_CURLY_OPEN);
    let flags: ConfigList = blank;
    while (!at(this, TOKEN_CURLY_CLOSE)) {
        let _cfg = expect(this, TOKEN_IDENT);
        expect(this, TOKEN_COLON_SINGLE);
        let value = expect(this, TOKEN_STRING_LITERAL);
        let cfg = newConfig(_cfg, value);
        if (cfg.kind == CONFIG_INVALID) {
            let loc = toString(&_cfg.span);
            let name = toString(&_cfg.content);
            fprintf(stderr, "%s: %s: Unknown config option `%s`.\n", loc.buffer, ERR_STR, name.buffer);
            fprintf(stderr, "%s: %s: A non-exhaustive list of config options: `library`, `libpath`, `linker`.\n", loc.buffer, NOTE_STR);
            drop(&name);
            drop(&loc);
            this.syntaxError = true;
        } else if (value.content.len == 0) {
            let loc = toString(&value.span);
            let name = toString(&_cfg.content);
            fprintf(stderr, "%s: %s: Value for config option `%s` can't be empty.\n", loc.buffer, ERR_STR, name.buffer);
            drop(&name);
            drop(&loc);
            this.syntaxError = true;
        } else {
            push(&flags, cfg);
        }
        if (!eat(this, TOKEN_COMMA)) break;
    }
    let end = expect(this, TOKEN_CURLY_CLOSE);
    return newParsedConfig(newSpanBetween(&cfgTkn.span, &end.span), flags);
}

func parseImport(this: &Parser, skip: bool) -> &ParsedTopLevelItem {
    trace("Parser.parseImport");
    let impTkn: Token = expect(this, TOKEN_KEYWORD);
    assert(equals(&impTkn.content, &KEYWORD_IMPORT));
    let tkn: Token = expect(this, TOKEN_STRING_LITERAL);
    let file: String = toString(&tkn.content);
    let src: String = blank;
    for (let i: usize = 0; i < this.importRootLength; i = i + 1) {
        let path: String = getImportRootAtIndex(this, i);
        pushString(&path, &file);
        path = toAbsolutePath(&path);
        if (canReadFileToString(path.buffer, &src)) {
            debug("Found file");
            debug(path.buffer);
            if (skip) {
                debug("Parsed import, but skipping it because of @os()");
                drop(&src); // No need to leak anything here :^)
                drop(&path);
                expect(this, TOKEN_SEMI_COLON);
                return null;
            }
            let fileID: usize = 0;
            let file: &ParsedFile = null;
            if (getFileByFilePath(asSubStr(&path), &fileID)) {
                file = at(&files, fileID);
            } else {
                file = newParsedFile(asSubStr(&path), asSubStr(&src));
                fileID = getID(file);
                // Note: We leak the source code of the imported file here :^)
                let parser: Parser = newParserFromSource(getID(file), asSubStr(&src));
                inheritImportRoots(&parser, this);
                parseFile(&parser, asSubStr(&path), file);
            }
            let end: Token = expect(this, TOKEN_SEMI_COLON);
            let span: Span = newSpanBetween(&impTkn.span, &end.span);
            let item: &ParsedTopLevelItem = newParsedTopLevelItem(span, TLI_IMPORT, fileID);
            return item;
        }
        drop(&path);
    }
    let loc: String = getLocation(&tkn);
    fprintf(stderr, "%s: %s: Could not import file %s.\n", loc.buffer, ERR_STR, file.buffer);
    exit(1);
}

func parseStructDecl(this: &Parser, parent: TLIParent) -> &ParsedStructDecl {
    trace("Parser.parseStructDecl");
    let kw: Token = expect(this, TOKEN_KEYWORD);
    let nameTkn: Token = expect(this, TOKEN_IDENT);
    if (!isAsciiUppercase(getChar(&nameTkn.content, 0))) {
        todo_with_msg("whine about struct not being capitalized");
    }
    this.currentStruct = nameTkn.content;
    expect(this, TOKEN_CURLY_OPEN);
    let decl: &ParsedStructDecl = newParsedStructDecl(parent, defaultSpan(), nameTkn);
    let structContext: StructContext = blank;
    while (!parsedEOF(this) && !at(this, TOKEN_CURLY_CLOSE)) {
        let tkn = expect(this, TOKEN_IDENT);
        expect(this, TOKEN_COLON_SINGLE);
        let typ: &ParsedTypeNode = parseTypeNode(this);
        addField(&structContext, tkn, typ);
        expect(this, TOKEN_SEMI_COLON);
    }
    let end: Token = expect(this, TOKEN_CURLY_CLOSE);
    let span: Span = newSpanBetween(&kw.span, &end.span);
    (*decl).span = span;
    (*decl).context = structContext;
    this.currentStruct = blank;
    return decl;
}

func parseFuncDecl(this: &Parser, parent: TLIParent, isExtern: bool) -> &ParsedFuncDecl {
    trace("Parser.parseFuncDecl");
    let tkn: Token = expect(this, TOKEN_KEYWORD);
    if (!isExtern) assert(equals(&tkn.content, &KEYWORD_FUNC));
    let name: Token = expect(this, TOKEN_IDENT);
    let params: ParamContext = parseParameters(this, blank);
    let retType: &ParsedTypeNode = parseReturnType(this);
    if (isExtern) {
        let end: Token = expect(this, TOKEN_SEMI_COLON);
        let span: Span = newSpanBetween(&tkn.span, &end.span);
        return newParsedFuncDecl(parent, span, name, params, retType, 0);
    } else {
        let body: &ParsedBlock = parseBlock(this);
        let span: Span = newSpanBetween(&tkn.span, &body.span);
        return newParsedFuncDecl(parent, span, name, params, retType, getID(body));
    }
}

func parseReturnType(this: &Parser) -> &ParsedTypeNode {
    trace("Parser.parseReturnType");
    if (eat(this, TOKEN_ARROW)) {
        return parseTypeNode(this);
    } else {
        return newBuiltinTypeDecl(peek(&this.lexer).span, PARSED_TYPE_NONE);
    }
}

func parseParameters(this: &Parser, parentName: Token) -> ParamContext {
    trace("Parser.parseParameters");
    expect(this, TOKEN_PAREN_OPEN);
    let context: ParamContext = blank;
    while (!parsedEOF(this) && !at(this, TOKEN_PAREN_CLOSE)) {
        if (eat(this, TOKEN_DOTDOTDOT)) {
            context.isVarArg = true;
            break;
        }
        let isRef: bool = eat(this, TOKEN_AMPERSAND_SINGLE);
        let maybeThis: Token = peek(&this.lexer);
        let isThis: bool = equals(&maybeThis.content, &comptime BUILD_A_KEYWORD("this"));
        if (isThis) {
            let dis: Token = expect(this, TOKEN_IDENT);
            if (eat(this, TOKEN_COLON_SINGLE)) {
                let t = parseTypeNode(this);
                addParameter(&context, maybeThis, t);
            } else {
                let thisType: &ParsedTypeNode = newParsedTypeNode(maybeThis.span, PARSED_TYPE_IDENT);
                (*thisType).nameTkn = parentName;
                if (isRef) {
                    let ptr: &ParsedTypeNode = newParsedTypeNode(maybeThis.span, PARSED_TYPE_REF);
                    (*ptr).underlyingID = getID(thisType);
                    addParameter(&context, maybeThis, ptr);
                } else {
                    addParameter(&context, maybeThis, thisType);
                }
            }
        } else {
            let name: Token = expect(this, TOKEN_IDENT);
            expect(this, TOKEN_COLON_SINGLE);
            let typ: &ParsedTypeNode = parseTypeNode(this);
            addParameter(&context, name, typ);
        }
        if (!eat(this, TOKEN_COMMA))
            break;
    }
    expect(this, TOKEN_PAREN_CLOSE);
    return context;
}

func parseBlock(this: &Parser) -> &ParsedBlock {
    trace("Parser.parseBlock");
    let block: &ParsedBlock = newParsedBlock();
    let start: Token = expect(this, TOKEN_CURLY_OPEN);
    while (!parsedEOF(this) && !at(this, TOKEN_CURLY_CLOSE)) {
        let attributes: ParsedAttributeList = blank;
        let skip = parseAttributes(this, &attributes, false);
        if (skip) {
            debug("Parsed Stmt, but skipping it because of @os()");
            toggleIgnoringNodes();
            let stmt: &ParsedStmt = parseStmt(this);
            toggleIgnoringNodes();
        } else {
            let stmt: &ParsedStmt = parseStmt(this);
            addStmt(block, stmt);
        }
    }
    let end: Token = expect(this, TOKEN_CURLY_CLOSE);
    (*block).span = newSpanBetween(&start.span, &end.span);
    return block;
}

func parseStmt(this: &Parser) -> &ParsedStmt {
    trace("Parser.parseStmt");
    let tkn: Token = peek(&this.lexer);
    if (tkn.kind == TOKEN_KEYWORD) {
        if (equals(&tkn.content, &KEYWORD_LET)
            || equals(&tkn.content, &KEYWORD_COMPTIME)) {
            next(&this.lexer);
            return parseVarDeclStmt(this, tkn, false);
        } else if (equals(&tkn.content, &KEYWORD_IF)) {
            next(&this.lexer);
            return parseIfStmt(this, tkn);
        } else if (equals(&tkn.content, &KEYWORD_RETURN)) {
            next(&this.lexer);
            return parseReturnStmt(this, tkn);
        } else if (equals(&tkn.content, &KEYWORD_WHILE)) {
            next(&this.lexer);
            return parseWhileStmt(this, tkn);
        } else if (equals(&tkn.content, &KEYWORD_FOR)) {
            next(&this.lexer);
            return parseForStmt(this, tkn);
        } else if (equals(&tkn.content, &KEYWORD_WHILE)) {
            next(&this.lexer);
            return parseWhileStmt(this, tkn);
        } else if (equals(&tkn.content, &KEYWORD_BREAK)) {
            next(&this.lexer);
            let end: Token = expect(this, TOKEN_SEMI_COLON);
            let span: Span = newSpanBetween(&tkn.span, &end.span);
            return newParsedStmt(span, STMT_BREAK);
        } else if (equals(&tkn.content, &KEYWORD_CONTINUE)) {
            next(&this.lexer);
            let end: Token = expect(this, TOKEN_SEMI_COLON);
            let span: Span = newSpanBetween(&tkn.span, &end.span);
            return newParsedStmt(span, STMT_CONTINUE);
        }
    } else if (tkn.kind == TOKEN_CURLY_OPEN) {
        let block: &ParsedBlock = parseBlock(this);
        let bl: &ParsedStmt = newParsedStmt(block.span, STMT_BLOCK);
        (*bl).block = getID(block);
        return bl;
    }
    let value: &ParsedExpr = parseExpr(this);
    let end: Token = expect(this, TOKEN_SEMI_COLON);
    let span: Span = newSpanBetween(&value.span, &end.span);
    let expr: &ParsedStmt = newParsedStmt(span, STMT_EXPR);
    (*expr).expr = getID(value);
    return expr;
}

func parseForStmt(this: &Parser, kw: Token) -> &ParsedStmt {
    trace("Parser.parseForStmt");
    assert(kw.kind == TOKEN_KEYWORD);
    if (!eat(this, TOKEN_PAREN_OPEN)) {
        todo_with_msg("for in loop");
    } else {
        // FIXME: parseStmt() expects the ;
        let block: &ParsedBlock = newParsedBlock();
        let init: &ParsedStmt = parseStmt(this);
        let cond: &ParsedExpr = parseExpr(this);
        expect(this, TOKEN_SEMI_COLON);
        let step: &ParsedExpr = parseExpr(this);
        expect(this, TOKEN_PAREN_CLOSE);
        let body: &ParsedStmt = parseStmt(this);
        let span: Span = newSpanBetween(&kw.span, &body.span);
        let whileNode: &ParsedStmt = newParsedStmt(span, STMT_WHILE);
        (*whileNode).expr = getID(cond);
        (*whileNode).block = getID(body);
        (*whileNode).step = getID(step);
        addStmt(block, init);
        addStmt(block, whileNode);
        let blockStmt: &ParsedStmt = newParsedStmt(span, STMT_BLOCK);
        (*blockStmt).block = getID(block);
        return blockStmt;
    }
}

func parseWhileStmt(this: &Parser, kw: Token) -> &ParsedStmt {
    trace("Parser.parseWhileStmt");
    assert(kw.kind == TOKEN_KEYWORD);
    expect(this, TOKEN_PAREN_OPEN);
    let cond: &ParsedExpr = parseExpr(this);
    expect(this, TOKEN_PAREN_CLOSE);
    let body: &ParsedStmt = parseStmt(this);
    let span: Span = newSpanBetween(&kw.span, &body.span);
    let stmt: &ParsedStmt = newParsedStmt(span, STMT_WHILE);
    (*stmt).expr = getID(cond);
    (*stmt).block = getID(body);
    (*stmt).step = getID(newParsedExpr(span, EXPR_EMPTY));
    return stmt;
}

func parseReturnStmt(this: &Parser, kw: Token) -> &ParsedStmt {
    trace("Parser.parseReturnStmt");
    assert(kw.kind == TOKEN_KEYWORD);
    let value: &ParsedExpr = null;
    if (!at(this, TOKEN_SEMI_COLON))
        value = parseExpr(this);
    let end: Token = expect(this, TOKEN_SEMI_COLON);
    let span: Span = newSpanBetween(&kw.span, &end.span);
    if (value != null) {
        let ret: &ParsedStmt = newParsedStmt(span, STMT_RETURN_EXPR);
        (*ret).expr = getID(value);
        return ret;
    } else {
        return newParsedStmt(span, STMT_RETURN_EMPTY);
    }
}

func parseIfStmt(this: &Parser, kw: Token) -> &ParsedStmt {
    trace("Parser.parseIfStmt");
    assert(kw.kind == TOKEN_KEYWORD);
    expect(this, TOKEN_PAREN_OPEN);
    let cond: &ParsedExpr = parseExpr(this);
    expect(this, TOKEN_PAREN_CLOSE);
    let ifBody: &ParsedStmt = parseStmt(this);
    let maybeElse: Token = peek(&this.lexer);
    let ifID: usize = getID(ifBody);
    let elseID: usize = 0;
    let hasElse: bool = false;
    let end: Span = ifBody.span;
    if (maybeElse.kind == TOKEN_KEYWORD) {
        if (equals(&maybeElse.content, &KEYWORD_ELSE)) {
            expect(this, TOKEN_KEYWORD);
            let elseBody: &ParsedStmt = parseStmt(this);
            end = elseBody.span;
            elseID = getID(elseBody);
            hasElse = true;
        }
    }
    let span: Span = newSpanBetween(&kw.span, &end);
    let ifStmt: &ParsedStmt = newParsedStmt(span, STMT_IF);
    (*ifStmt).expr = getID(cond);
    (*ifStmt).ifContext = IfContext {
        thenBody: ifID,
        elseBody: elseID,
        hasElse: hasElse,
    };
    return ifStmt;
}

func parseVarDeclStmt(this: &Parser, kw: Token, isGlobal: bool) -> &ParsedStmt {
    trace("Parser.parseVarDeclStmt");
    let nameTkn: Token = expect(this, TOKEN_IDENT);
    let isComptime: bool = equals(&kw.content, &KEYWORD_COMPTIME);
    let data: VarDeclContext = blank;
    data.name = nameTkn;
    if (eat(this, TOKEN_COLON_SINGLE)) {
        data.typeID = getID(parseTypeNode(this));
    }
    expect(this, TOKEN_EQUAL_SINGLE);
    data.exprID = getID(parseExpr(this));
    data.isComptime = isComptime;
    let end: Token = expect(this, TOKEN_SEMI_COLON);
    let span: Span = newSpanBetween(&kw.span, &end.span);
    let decl: &ParsedStmt = newParsedStmt(span, STMT_VAR_DECL);
    if (isGlobal) {
        (*decl).block = this.lexer.fileID;
    } else {
        (*decl).block = NODE_ID_OFFSET;
    }
    (*decl).varDeclContext = data;
    return decl;
}

func parseTypeNode(this: &Parser) -> &ParsedTypeNode {
    trace("Parser.parseTypeNode");
    let loc: Token = peek(&this.lexer);
    if (at(this, TOKEN_KEYWORD)) {
        let kw = peek(&this.lexer);
        if (!equals(&kw.content, &KEYWORD_FUNC)) {
            expect(this, TOKEN_IDENT);
        }
        next(&this.lexer);
        expect(this, TOKEN_PAREN_OPEN);
        let params: UsizeList = blank;
        while (!at(this, TOKEN_PAREN_CLOSE)) {
            let pt = parseTypeNode(this);
            if (!at(this, TOKEN_PAREN_CLOSE)) {
                expect(this, TOKEN_COMMA);
            }
            push(&params, getID(pt));
        }
        expect(this, TOKEN_PAREN_CLOSE);
        let retType = parseReturnType(this);
        let span = newSpanBetween(&kw.span, &retType.span);
        let funcNode = newParsedTypeNode(span, PARSED_TYPE_FUNC);
        funcNode.underlyingID = getID(retType);
        funcNode.fnParams = params;
        return funcNode;
    } else if (eat(this, TOKEN_AMPERSAND_DOUBLE)) {
        let kw: Token = peek(&this.lexer);
        let typ: &ParsedTypeNode = parseTypeNode(this);
        let span: Span = newSpanBetween(&loc.span, &typ.span);
        let ptr1: &ParsedTypeNode = newParsedTypeNode(span, PARSED_TYPE_REF);
        (*ptr1).underlyingID = getID(typ);
        let ptr: &ParsedTypeNode = newParsedTypeNode(span, PARSED_TYPE_REF);
        (*ptr).underlyingID = getID(ptr1);
        return ptr;
    } else if (eat(this, TOKEN_AMPERSAND_SINGLE)) {
        let kw: Token = peek(&this.lexer);
        let typ: &ParsedTypeNode = parseTypeNode(this);
        let span: Span = newSpanBetween(&loc.span, &typ.span);
        let ptr: &ParsedTypeNode = newParsedTypeNode(span, PARSED_TYPE_REF);
        (*ptr).underlyingID = getID(typ);
        return ptr;
    } else if (eat(this, TOKEN_SQUARE_OPEN)) {
        let typ: &ParsedTypeNode = parseTypeNode(this);
        expect(this, TOKEN_SEMI_COLON);
        let size: Token = expect(this, TOKEN_INT_LITERAL);
        let _size: String = toString(&size.content);
        let end: Token = expect(this, TOKEN_SQUARE_CLOSE);
        let span: Span = newSpanBetween(&loc.span, &end.span);
        let arr: &ParsedTypeNode = newParsedTypeNode(span, PARSED_TYPE_ARRAY);
        (*arr).underlyingID = getID(typ);
        (*arr).arraySize = toU64(&_size) as usize;
        drop(&_size);
        return arr;
    } else {
        let nameTkn: Token = expect(this, TOKEN_IDENT);
        if (at(this, TOKEN_COLON_DOUBLE)) {
            let node = newParsedTypeNode(nameTkn.span, PARSED_TYPE_MODULE);
            let orig = node;
            node.nameTkn = nameTkn;
            while (eat(this, TOKEN_COLON_DOUBLE)) {
                let typeTkn = expect(this, TOKEN_IDENT);
                let span = newSpanBetween(&node.span, &typeTkn.span);
                let newNode = newParsedTypeNode(span, PARSED_TYPE_MODULE);
                newNode.nameTkn = typeTkn;
                node.underlyingID = getID(newNode);
                node = newNode;
            }
            return orig;
        } else {
            let maybeBuiltin: usize = getBuiltinTypeKind(nameTkn);
            if (maybeBuiltin == 0) {
                // Not a builtin, must resolve later
                let typ: &ParsedTypeNode = newParsedTypeNode(nameTkn.span, PARSED_TYPE_IDENT);
                (*typ).nameTkn = nameTkn;
                return typ;
            } else {
                return newBuiltinTypeDecl(nameTkn.span, maybeBuiltin);
            }
        }
    }
}

func parseExpr(this: &Parser) -> &ParsedExpr {
    trace("Parser.parseExpr");
    return __parseExpr(this, 0, ASSOC_LEFT);
}
func __parseExpr(this: &Parser, precedence: usize, associativity: usize) -> &ParsedExpr {
    trace("Parser.__parseExpr");
    let expr: &ParsedExpr = parsePrimaryExpr(this);
    while (matchesBinaryExpr(this)) {
        let tkn: Token = peek(&this.lexer);
        let newPrec: usize = getBinaryPrecedence(this, &tkn);
        if (newPrec < precedence)
            break;
        if (newPrec == precedence && associativity == ASSOC_LEFT)
            break;
        let newAssoc: usize = getBinaryAssociativity(this, &tkn);
        expr = parseSecondaryExpr(this, expr, newPrec, newAssoc);
    }
    return expr;
}
func parsePrimaryExpr(this: &Parser) -> &ParsedExpr {
    trace("Parser.parsePrimaryExpr");
    if (matchesUnaryExpr(this))
        return parseUnaryExpr(this);
    let tknKind: usize = peek(&this.lexer).kind;
    if (tknKind == TOKEN_INT_LITERAL) {
        let number: Token = expect(this, TOKEN_INT_LITERAL);
        let expr: &ParsedExpr = newParsedExpr(number.span, EXPR_INT_LIT);
        (*expr).origToken = number;
        return expr;
    } else if (tknKind == TOKEN_PAREN_OPEN) {
        expect(this, TOKEN_PAREN_OPEN);
        let expr: &ParsedExpr = parseExpr(this);
        expect(this, TOKEN_PAREN_CLOSE);
        return expr;
    } else if (tknKind == TOKEN_IDENT) {
        let ident: Token = expect(this, TOKEN_IDENT);
        if (at(this, TOKEN_CURLY_OPEN)) {
            expect(this, TOKEN_CURLY_OPEN);
            let context: StructInitContext = blank;
            while (!parsedEOF(this) && !at(this, TOKEN_CURLY_CLOSE)) {
                let name: Token = expect(this, TOKEN_IDENT);
                expect(this, TOKEN_COLON_SINGLE);
                let expr: &ParsedExpr = parseExpr(this);
                addField(&context, name, expr);
                if (!eat(this, TOKEN_COMMA))
                    break;
            }
            let end: Token = expect(this, TOKEN_CURLY_CLOSE);
            let span: Span = newSpanBetween(&ident.span, &end.span);
            let expr: &ParsedExpr = newParsedExpr(span, EXPR_STRUCT_INIT);
            (*expr).origToken = ident;
            (*expr).structInitContext = context;
            return expr;
        } else {
            let expr: &ParsedExpr = newParsedExpr(ident.span, EXPR_NAME);
            (*expr).origToken = ident;
            return expr;
        }
    } else if (tknKind == TOKEN_STRING_LITERAL) {
        let str: Token = expect(this, TOKEN_STRING_LITERAL);
        let expr: &ParsedExpr = newParsedExpr(str.span, EXPR_STRING_LIT);
        (*expr).origToken = str;
        return expr;
    } else if (tknKind == TOKEN_CHAR_LITERAL) {
        let ch: Token = expect(this, TOKEN_CHAR_LITERAL);
        let expr: &ParsedExpr = newParsedExpr(ch.span, EXPR_CHAR_LIT);
        (*expr).origToken = ch;
        return expr;
    } else if (tknKind == TOKEN_SQUARE_OPEN) {
        let start: Token = expect(this, TOKEN_SQUARE_OPEN);
        let arrayContext: ArrayContext = blank;
        while (!parsedEOF(this) && !at(this, TOKEN_SQUARE_CLOSE)) {
            let expr: &ParsedExpr = parseExpr(this);
            addElement(&arrayContext, expr);
            if (eat(this, TOKEN_SEMI_COLON)) {
                if (arrayContext.elemLength != 1) todo_with_msg("array lit with given size too many elements");
                let size: Token = expect(this, TOKEN_INT_LITERAL);
                let _size: String = toString(&size.content);
                arrayContext.size = toU64(&_size) as usize;
                drop(&_size);
                break;
            }
            if (!eat(this, TOKEN_COMMA))
                break;
        }
        let end: Token = expect(this, TOKEN_SQUARE_CLOSE);
        let span: Span = newSpanBetween(&start.span, &end.span);
        let expr: &ParsedExpr = newParsedExpr(span, EXPR_ARRAY_LIT);
        (*expr).arrayContext = arrayContext;
        return expr;
    } else if (tknKind == TOKEN_KEYWORD) {
        let kw: Token = expect(this, TOKEN_KEYWORD);
        if (equals(&kw.content, &KEYWORD_NULL)) {
            let expr: &ParsedExpr = newParsedExpr(kw.span, EXPR_NULL);
            (*expr).origToken = kw;
            return expr;
        } else if (equals(&kw.content, &KEYWORD_TRUE)) {
            let expr: &ParsedExpr = newParsedExpr(kw.span, EXPR_TRUE);
            (*expr).origToken = kw;
            return expr;
        } else if (equals(&kw.content, &KEYWORD_FALSE)) {
            let expr: &ParsedExpr = newParsedExpr(kw.span, EXPR_FALSE);
            (*expr).origToken = kw;
            return expr;
        } else if (equals(&kw.content, &KEYWORD_BLANK)) {
            let expr: &ParsedExpr = newParsedExpr(kw.span, EXPR_BLANK);
            (*expr).origToken = kw;
            return expr;
        } else if (equals(&kw.content, &KEYWORD_SIZEOF)) {
            let typ: &ParsedTypeNode = parseTypeNode(this);
            let span: Span = newSpanBetween(&kw.span, &typ.span);
            let expr: &ParsedExpr = newParsedExpr(span, EXPR_SIZEOF);
            (*expr).lhs = getID(typ);
            return expr;
        } else {
            let loc: String = getLocation(&kw);
            let name: String = toString(&kw.content);
            fprintf(stderr, "%s: %s: Expected Expression, found `%s`.\n", loc.buffer, ERR_STR, name.buffer);
            drop(&name);
            drop(&loc);
            exit(1);
        }
    }
    let t: Token = peek(&this.lexer);
    let loc: String = getLocation(&t);
    let name: String = toString(&t.content);
    fprintf(stderr, "%s: %s: Expected Expression, found `%s`.\n", loc.buffer, ERR_STR, name.buffer);
    drop(&name);
    drop(&loc);
    exit(1);
}
func parseSecondaryExpr(this: &Parser, lhs: &ParsedExpr, precedence: usize, associativity: usize) -> &ParsedExpr {
    trace("Parser.parseSecondaryExpr");
    assert(matchesBinaryExpr(this));
    let opTkn: Token = next(&this.lexer);
    let op: usize = binOpFromKind(opTkn.kind);
    if (op == BIN_AS) {
        let typ: &ParsedTypeNode = parseTypeNode(this);
        let span: Span = newSpanBetween(&lhs.span, &typ.span);
        let asop: &ParsedExpr = newParsedExpr(span, EXPR_AS);
        (*asop).op = op;
        (*asop).lhs = getID(lhs);
        (*asop).rhs = getID(typ);
        return asop;
    }
    let rhs: &ParsedExpr = null;
    if (op == BIN_INDEXED_ACCESS) {
        rhs = __parseExpr(this, 0, associativity);
        expect(this, TOKEN_SQUARE_CLOSE);
    } else if (op == BIN_CALL) {
        let context: ArrayContext = blank;
        while (!parsedEOF(this) && !at(this, TOKEN_PAREN_CLOSE)) {
            let expr: &ParsedExpr = parseExpr(this);
            addElement(&context, expr);
            if (!eat(this, TOKEN_COMMA))
                break;
        }
        let end: Token = expect(this, TOKEN_PAREN_CLOSE);
        let span: Span = newSpanBetween(&lhs.span, &end.span);
        let call: &ParsedExpr = newParsedExpr(span, EXPR_CALL);
        (*call).arrayContext = context;
        (*call).op = op;
        (*call).lhs = getID(lhs);
        return call;
    } else {
        rhs = __parseExpr(this, precedence, associativity);
    }
    if (op == BIN_DOT) {
        if (rhs.kind != EXPR_NAME) {
            fprintf(stderr, "%s: %s: The right side of `.` must be an identifier.\n", toString(&lhs.span).buffer, ERR_STR);
            this.syntaxError = true;
        }
    } else if (op == BIN_MODULE) {
        let isModule = lhs.kind == EXPR_BINARY && lhs.op == BIN_MODULE;
        if (lhs.kind != EXPR_NAME && !isModule) {
            fprintf(stderr, "%s: %s: The left side of `::` must be an identifier or other module specifier.\n", toString(&lhs.span).buffer, ERR_STR);
            this.syntaxError = true;
        }
    }
    let span: Span = newSpanBetween(&lhs.span, &rhs.span);
    let binop: &ParsedExpr = newParsedExpr(span, EXPR_BINARY);
    (*binop).op = op;
    (*binop).lhs = getID(lhs);
    (*binop).rhs = getID(rhs);
    return binop;
}
func parseUnaryExpr(this: &Parser) -> &ParsedExpr {
    trace("Parser.parseUnaryExpr");
    let tkn: Token = peek(&this.lexer);
    if (tkn.kind == TOKEN_KEYWORD) {
        next(&this.lexer);
        assert(equals(&tkn.content, &KEYWORD_COMPTIME), "Expected `comptime`");
        let precedence: usize = getUnaryPrecedence(this, tkn.kind);
        let expr: &ParsedExpr = __parseExpr(this, precedence, ASSOC_LEFT);
        let span: Span = newSpanBetween(&tkn.span, &expr.span);
        let unary: &ParsedExpr = newParsedExpr(span, EXPR_UNARY);
        (*unary).op = unaryOpFromKind(tkn.kind);
        (*unary).lhs = getID(expr);
        return unary;
    } else if (tkn.kind == TOKEN_AMPERSAND_DOUBLE) {
        next(&this.lexer);
        let precedence: usize = getUnaryPrecedence(this, TOKEN_AMPERSAND_SINGLE);
        let expr: &ParsedExpr = __parseExpr(this, precedence, ASSOC_LEFT);
        let span: Span = newSpanBetween(&tkn.span, &expr.span);
        let inner: &ParsedExpr = newParsedExpr(span, EXPR_UNARY);
        (*inner).op = unaryOpFromKind(TOKEN_AMPERSAND_SINGLE);
        (*inner).lhs = getID(expr);
        let unary: &ParsedExpr = newParsedExpr(span, EXPR_UNARY);
        (*unary).op = unaryOpFromKind(TOKEN_AMPERSAND_SINGLE);
        (*unary).lhs = getID(inner);
        return unary;
    } else if (tkn.kind == TOKEN_ASTERISK_SINGLE
        || tkn.kind == TOKEN_AMPERSAND_SINGLE
        || tkn.kind == TOKEN_MINUS_SINGLE
        || tkn.kind == TOKEN_BANG) {
        next(&this.lexer);
        let precedence: usize = getUnaryPrecedence(this, tkn.kind);
        let expr: &ParsedExpr = __parseExpr(this, precedence, ASSOC_LEFT);
        let span: Span = newSpanBetween(&tkn.span, &expr.span);
        let unary: &ParsedExpr = newParsedExpr(span, EXPR_UNARY);
        (*unary).op = unaryOpFromKind(tkn.kind);
        (*unary).lhs = getID(expr);
        return unary;
    } else {
        unreachable("Exhaustive handling of unary operations in parseUnaryExpr");
    }
}
func matchesBinaryExpr(this: &Parser) -> bool {
    trace("Parser.matchesBinaryExpr");
    let tknKind: usize = peek(&this.lexer).kind;
    if (tknKind == TOKEN_KEYWORD)
        return equals(&peek(&this.lexer).content, &KEYWORD_AS);
    return tknKind == TOKEN_EQUAL_DOUBLE
        || tknKind == TOKEN_EQUAL_SINGLE
        || tknKind == TOKEN_NOT_EQUAL
        || tknKind == TOKEN_MINUS_SINGLE
        || tknKind == TOKEN_PLUS_SINGLE
        || tknKind == TOKEN_ASTERISK_SINGLE
        || tknKind == TOKEN_SLASH_SINGLE
        || tknKind == TOKEN_LESS_THAN_EQUAL
        || tknKind == TOKEN_LESS_THAN
        || tknKind == TOKEN_GREATER_THAN_EQUAL
        || tknKind == TOKEN_GREATER_THAN
        || tknKind == TOKEN_AMPERSAND_SINGLE
        || tknKind == TOKEN_AMPERSAND_DOUBLE
        || tknKind == TOKEN_PIPE_DOUBLE
        || tknKind == TOKEN_PIPE_SINGLE
        || tknKind == TOKEN_CARET
        // FIXME: :: should be an identifier, not a binary expression
        || tknKind == TOKEN_COLON_DOUBLE
        || tknKind == TOKEN_DOT
        || tknKind == TOKEN_PAREN_OPEN
        || tknKind == TOKEN_SQUARE_OPEN
        || tknKind == TOKEN_PERCENT;
}
func matchesUnaryExpr(this: &Parser) -> bool {
    trace("Parser.matchesUnaryExpr");
    let tknKind: usize = peek(&this.lexer).kind;
    if (tknKind == TOKEN_KEYWORD)
        return equals(&peek(&this.lexer).content, &KEYWORD_COMPTIME);
    return tknKind == TOKEN_MINUS_SINGLE
        || tknKind == TOKEN_AMPERSAND_SINGLE
        // FIXME: Would be cooler if peek() could return split tokens too
        || tknKind == TOKEN_AMPERSAND_DOUBLE
        || tknKind == TOKEN_ASTERISK_SINGLE
        || tknKind == TOKEN_BANG;
}
func getBinaryPrecedence(this: &Parser, tkn: &Token) -> usize {
    trace("Parser.getBinaryPrecedence");
    let tknKind: usize = tkn.kind;
    if (tknKind == TOKEN_COLON_DOUBLE) return 18;
    else if (tknKind == TOKEN_DOT) return 17;
    else if (tknKind == TOKEN_PAREN_OPEN) return 16;
    else if (tknKind == TOKEN_SQUARE_OPEN) return 16;
    else if (tknKind == TOKEN_KEYWORD) {
        assert(equals(&tkn.content, &KEYWORD_AS), "unsupported keyword in getBinaryPrecedence");
        return 13;
    } else if (tknKind == TOKEN_SLASH_SINGLE) return 12;
    else if (tknKind == TOKEN_ASTERISK_SINGLE) return 12;
    else if (tknKind == TOKEN_PERCENT) return 12;
    else if (tknKind == TOKEN_PLUS_SINGLE) return 11;
    else if (tknKind == TOKEN_MINUS_SINGLE) return 11;
    else if (tknKind == TOKEN_LESS_THAN) return 9;
    else if (tknKind == TOKEN_LESS_THAN_EQUAL) return 9;
    else if (tknKind == TOKEN_GREATER_THAN) return 9;
    else if (tknKind == TOKEN_GREATER_THAN_EQUAL) return 9;
    else if (tknKind == TOKEN_EQUAL_DOUBLE) return 8;
    else if (tknKind == TOKEN_NOT_EQUAL) return 8;
    else if (tknKind == TOKEN_AMPERSAND_SINGLE) return 7;
    else if (tknKind == TOKEN_CARET) return 6;
    else if (tknKind == TOKEN_PIPE_SINGLE) return 5;
    else if (tknKind == TOKEN_AMPERSAND_DOUBLE) return 4;
    else if (tknKind == TOKEN_PIPE_DOUBLE) return 3;
    else if (tknKind == TOKEN_EQUAL_SINGLE) return 2;
    unreachable("Exhaustive handling of binary operators in Parser.getBinaryPrecedence");
}
func getBinaryAssociativity(this: &Parser, tkn: &Token) -> usize {
    trace("Parser.getBinaryAssociativity");
    let tknKind: usize = tkn.kind;
    if (tknKind == TOKEN_EQUAL_SINGLE) return ASSOC_RIGHT;
    return ASSOC_LEFT;
}
func getUnaryPrecedence(this: &Parser, tknKind: usize) -> usize {
    // FIXME: We can't know if this is actually KEYWORD_COMPTIME
    if (tknKind == TOKEN_KEYWORD) return 14;
    else if (tknKind == TOKEN_MINUS_SINGLE) return 14;
    else if (tknKind == TOKEN_ASTERISK_SINGLE) return 14;
    else if (tknKind == TOKEN_AMPERSAND_SINGLE) return 14;
    else if (tknKind == TOKEN_BANG) return 14;
    unreachable("Exhaustive handling of unary operators in Parser.getUnaryPrecedence");
}

func newParserFromSource(fileID: usize, src: SubStr) -> Parser {
    return Parser {
        lexer: newLexer(fileID, src),
        importRoots: null,
        importRootLength: 0,
        importRootCapacity: 0,
        currentStruct: blank,
        syntaxError: false,
    };
}
