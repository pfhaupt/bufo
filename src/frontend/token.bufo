import "libc.bufo";
import "prelude.bufo";
import "substr.bufo";
import "../util/span.bufo";
import "string.bufo";

comptime TOKEN_EOF: usize = 0;
comptime TOKEN_IDENT: usize = 1;
comptime TOKEN_KEYWORD: usize = 2;
comptime TOKEN_STRING_LITERAL: usize = 3;
comptime TOKEN_INT_LITERAL: usize = 4;
comptime TOKEN_CHAR_LITERAL: usize = 5;
comptime TOKEN_PAREN_OPEN: usize = 6;
comptime TOKEN_PAREN_CLOSE: usize = 7;
comptime TOKEN_CURLY_OPEN: usize = 8;
comptime TOKEN_CURLY_CLOSE: usize = 9;
comptime TOKEN_SQUARE_OPEN: usize = 10;
comptime TOKEN_SQUARE_CLOSE: usize = 11;
comptime TOKEN_SEMI_COLON: usize = 12;
comptime TOKEN_COLON: usize = 13;
comptime TOKEN_EQUAL_SINGLE: usize = 14;
comptime TOKEN_EQUAL_DOUBLE: usize = 15;
comptime TOKEN_AMPERSAND_SINGLE: usize = 16;
comptime TOKEN_AMPERSAND_DOUBLE: usize = 17;
comptime TOKEN_COMMA: usize = 18;
comptime TOKEN_ARROW: usize = 19;
comptime TOKEN_PLUS_SINGLE: usize = 20;
comptime TOKEN_UNDERSCORE: usize = 21;
comptime TOKEN_DOT: usize = 22;
comptime TOKEN_AT: usize = 23;
comptime TOKEN_MINUS_SINGLE: usize = 24;
comptime TOKEN_ASTERISK_SINGLE: usize = 25;
comptime TOKEN_NOT_EQUAL: usize = 26;
comptime TOKEN_BANG: usize = 27;
comptime TOKEN_SLASH_SINGLE: usize = 28;
comptime TOKEN_LESS_THAN_EQUAL: usize = 29;
comptime TOKEN_LESS_THAN: usize = 30;
comptime TOKEN_GREATER_THAN_EQUAL: usize = 31;
comptime TOKEN_GREATER_THAN: usize = 32;
comptime TOKEN_PERCENT: usize = 33;
comptime TOKEN_PIPE_SINGLE: usize = 34;
comptime TOKEN_PIPE_DOUBLE: usize = 35;
comptime TOKEN_DOTDOTDOT: usize = 36;
comptime TOKEN_CARET: usize = 37;
func tokenKindToString(kind: usize) -> &char {
    if (kind == TOKEN_EOF) { return "TOKEN_EOF"; }
    else if (kind == TOKEN_IDENT) { return "Identifier"; }
    else if (kind == TOKEN_KEYWORD) { return "Keyword"; }
    else if (kind == TOKEN_INT_LITERAL) { return "Integer literal"; }
    else if (kind == TOKEN_PAREN_OPEN) { return "`(`"; }
    else if (kind == TOKEN_PAREN_CLOSE) { return "`)`"; }
    else if (kind == TOKEN_CURLY_OPEN) { return "`{`"; }
    else if (kind == TOKEN_CURLY_CLOSE) { return "`}`"; }
    else if (kind == TOKEN_SQUARE_OPEN) { return "`[`"; }
    else if (kind == TOKEN_SQUARE_CLOSE) { return "`]`"; }
    else if (kind == TOKEN_SEMI_COLON) { return "`;`"; }
    else if (kind == TOKEN_COLON) { return "`:`"; }
    else if (kind == TOKEN_EQUAL_SINGLE) { return "`=`"; }
    else if (kind == TOKEN_EQUAL_DOUBLE) { return "`==`"; }
    else if (kind == TOKEN_AMPERSAND_SINGLE) { return "`&`"; }
    else if (kind == TOKEN_AMPERSAND_DOUBLE) { return "`&&`"; }
    else if (kind == TOKEN_COMMA) { return "`,`"; }
    else if (kind == TOKEN_ARROW) { return "`->`"; }
    else if (kind == TOKEN_PLUS_SINGLE) { return "`+`"; }
    else if (kind == TOKEN_UNDERSCORE) { return "`_`"; }
    else if (kind == TOKEN_DOT) { return "`.`"; }
    else if (kind == TOKEN_AT) { return "`@`"; }
    else if (kind == TOKEN_MINUS_SINGLE) { return "`-`"; }
    else if (kind == TOKEN_ASTERISK_SINGLE) { return "`*`"; }
    else if (kind == TOKEN_NOT_EQUAL) { return "`!=`"; }
    else if (kind == TOKEN_BANG) { return "`!`"; }
    else if (kind == TOKEN_SLASH_SINGLE) { return "`/`"; }
    else if (kind == TOKEN_PERCENT) { return "`%`"; }
    else if (kind == TOKEN_PIPE_DOUBLE) { return "`||`"; }
    else if (kind == TOKEN_DOTDOTDOT) { return "`...`"; }
    else if (kind == TOKEN_CARET) { return "`^`"; }
    else {
        printf("Please implement tokenKindToString(%llu)\n", kind);
        exit(1);
    }
}
struct Token {
    span: Span;
    content: SubStr;
    kind: usize;
}

func print(this: &Token) {
    printf("kind=%llu, content=", this.kind);
    print(&this.content);
}
func getLocation(this: &Token) -> String {
    return toString(&this.span);
}
func toString(this: &Token) -> String {
    return toString(&this.content);
}
func getSubStr(this: &Token) -> SubStr {
    return this.content;
}
func getSpan(this: &Token) -> Span {
    return this.span;
}
func equals(this: &Token, other: &Token) -> bool {
    if (this.kind != other.kind) return false;
    if (!equals(&this.span, &other.span)) return false;
    if (!equals(&this.content, &other.content)) return false;
    return true;
}

func dummyToken(kind: usize) -> Token {
    return newToken(0, &defaultSubStr(), 0, kind);
}

func newToken(fileID: usize, sub: &SubStr, start: usize, kind: usize) -> Token {
    let s: Span = newSpan(fileID, start, start + sub.len);
    return Token {
        content: *sub,
        span: s,
        kind: kind
    };
}
func newTokenEOF(fileID: usize, start: usize) -> Token {
    return Token {
        content: newSubStr("End Of File", 0, 11),
        span: newSpan(fileID, start, start + 1),
        kind: TOKEN_EOF,
    };
}
func defaultToken() -> Token {
    return Token {
        content: defaultSubStr(),
        span: defaultSpan(),
        kind: TOKEN_EOF,
    };
}
