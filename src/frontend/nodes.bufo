import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../util/arena.bufo";
import "./context.bufo";
import "./token.bufo";
import "./lexer.bufo";
import "../middleend/checker.bufo";
import "../middleend/types.bufo";

@os(WINDOWS) import "winapi/structs.bufo";
@os(LINUX) import "posix/structs.bufo";

// Arbitrary number chosen as a magic constant for various things
// idea: We'll never have more than that many expressions or type nodes
//       if you ever have 10 billion expressions, please tell me how :^)
comptime NODE_ID_OFFSET: usize = 10000000000;

let ignoringNodes = false;
func toggleIgnoringNodes() {
    ignoringNodes = !ignoringNodes;
}

func mangleVariableName(
    fileID: usize,
    name: &Token,
) -> String {
    if (fileID == NODE_ID_OFFSET) {
        return toString(&name.content);
    } else {
        let mangledName: String = blank;
        pushNumber(&mangledName, fileID);
        pushSubStr(&mangledName, &name.content);
        return mangledName;
    }
}

func mangleFunctionName(
    parent: TLIParent,
    name: &Token,
    params: &ParamContext,
    retType: &ParsedTypeNode,
    isComptime: bool,
    attrs: &ParsedAttributeList,
) -> String {
    let mangledName: String = blank;
    for (let i: usize = 0; i < attrs.length; i = i + 1) {
        let a = at(attrs, i);
        if (a.kind == ATTR_EXTERN) return toString(&a.name.content);
    }
    // Function: [Module]*-Name-ParamsTypeID-rRetTypeID
    while (!parent.isFile) {
        let mod = at(&modules, parent.id as usize);
        pushSubStr(&mangledName, &mod.name.content);
        pushChar(&mangledName, '.');
        parent = mod.parent;
    }
    pushSubStr(&mangledName, &name.content);
    for (let i: usize = 0; i < params.paramLength; i = i + 1) {
        let typeNode: &ParsedTypeNode = getTypeAtIndex(params, i);
        assert(isSuccess(&typeNode.typeState), "Expected valid parameter type for mangling");
        let typ: &Type = getType(&typeNode.typeState);
        let _typ: String = getMangledName(typ);
        pushString(&mangledName, &_typ);
        drop(&_typ);
    }
    pushChar(&mangledName, 'r');
    if (retType != null) {
        assert(isSuccess(&retType.typeState), "Expected valid return type for mangling");
        let typ: &Type = getType(&retType.typeState);
        let _typ: String = getMangledName(typ);
        pushString(&mangledName, &_typ);
        drop(&_typ);
    } else {
        pushChar(&mangledName, 'n');
    }
    return mangledName;
}

let files: ParsedFileArena = blank;
let topLevelItems: ParsedTopLevelItemArena = blank;
let modules: ParsedModuleArena = blank;
let structDecls: ParsedStructDeclArena = blank;
let unionDecls: ParsedUnionDeclArena = blank;
let unionVariants: ParsedUnionVariantArena = blank;
let funcDecls: ParsedFuncDeclArena = blank;
let blocks: ParsedBlockArena = blank;
let stmts: ParsedStmtArena = blank;
let typeNodes: ParsedTypeNodeArena = blank;
let exprs: ParsedExprArena = blank;
let configs: ParsedConfigArena = blank;
let dlls: DLLArena = blank;
let patterns: ParsedPatternArena = blank;

func getFileByFilePath(path: SubStr, fileID: &usize) -> bool {
    for (let i: usize = 0; i < files.length; i = i + 1) {
        let file: &ParsedFile = at(&files, i);
        if (equals(&file.origin, &path)) {
            *fileID = i;
            return true;
        }
    }
    return false;
}

comptime _ATTR_EXTERN: SubStr = BUILD_A_KEYWORD("extern");
comptime _ATTR_OS: SubStr = BUILD_A_KEYWORD("os");
comptime _ATTR_NORETURN: SubStr = BUILD_A_KEYWORD("noreturn");

comptime ATTR_INVALID: usize = 0;
comptime ATTR_EXTERN: usize = 1;
comptime ATTR_OS: usize = 2; // not used, handled in parser directly
comptime ATTR_NORETURN: usize = 3;
struct ParsedAttribute {
    kind: usize;
    span: Span;
    name: Token;
}

func equals(this: &ParsedAttribute, other: &ParsedAttribute) -> bool {
    unreachable("ParsedAttribute.equals is not implemented yet");
}

comptime CONFIG_INVALID: u8 = 0;
comptime CONFIG_LIBNAME: u8 = 1;
comptime CONFIG_LIBPATH: u8 = 2;
comptime CONFIG_LINKER: u8 = 3;
struct Config {
    kind: u8;
    value: Token;
}

func newConfig(t: Token, value: Token) -> Config {
    let kind: u8 = CONFIG_INVALID;
    if (equals(&t.content, &comptime BUILD_A_KEYWORD("library"))) {
        kind = CONFIG_LIBNAME;
    } else if (equals(&t.content, &comptime BUILD_A_KEYWORD("libpath"))) {
        kind = CONFIG_LIBPATH;
    } else if (equals(&t.content, &comptime BUILD_A_KEYWORD("linker"))) {
        kind = CONFIG_LINKER;
    } else {
        kind = CONFIG_INVALID;
    }
    return Config { kind: kind, value: value };
}

struct ParsedConfig {
    ignored: bool;
    span: Span;
    configs: ConfigList;
}

func newParsedConfig(span: Span, cfgs: ConfigList) -> &ParsedConfig {
    push(&configs, ParsedConfig {
        ignored: ignoringNodes,
        span: span,
        configs: cfgs,
    });
    return last(&configs);
}

func getID(this: &ParsedConfig) -> usize {
    return indexOf(&configs, this);
}

func asTLI(this: &ParsedConfig) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_CONFIG, getID(this));
}

struct ParsedFile {
    ignored: bool;
    origin: SubStr;
    src: SubStr;
    mod: &ParsedModule;
}

func getID(this: &ParsedFile) -> usize {
    trace("ParsedFile.getID");
    return indexOf(&files, this);
}

func getLineAndColumnFromSpan(this: &ParsedFile, span: &Span, line: &usize, column: &usize) {
    let l: usize = 1;
    let c: usize = 1;
    let p: usize = 0;
    while (p < span.start) {
        let _c = this.src.start[p];
        if (_c == '\n') {
            c = 1;
            l = l + 1;
        } else {
            c = c + 1;
        }
        p = p + 1;
    }
    *line = l;
    *column = c;
}

func newParsedFile(origin: SubStr, src: SubStr) -> &ParsedFile {
    trace("newParsedFile");
    push(&files, ParsedFile {
        ignored: ignoringNodes,
        origin: origin,
        src: src,
    });
    return last(&files);
}

comptime TLI_INVALID    : usize = 0;
comptime TLI_IMPORT     : usize = 1;
comptime TLI_VAR_DECL   : usize = 2;
comptime TLI_STRUCT_DECL: usize = 3;
comptime TLI_UNION_DECL : usize = 4;
comptime TLI_FUNC_DECL  : usize = 5;
comptime TLI_MOD_DECL   : usize = 6;
comptime TLI_CONFIG     : usize = 7;

// the parentID is ambiguous because we can nest modules -> is the parent a ParsedFile or should we
// look in the modules lookup?
struct TLIParent {
    isFile: bool;
    id: u32;
}

func equals(this: &TLIParent, other: &TLIParent) -> bool {
    return this.isFile == other.isFile && this.id == other.id;
}

struct ParsedTopLevelItem {
    ignored: bool;
    parent: TLIParent;
    kind: usize;
    span: Span;
    nodeID: usize;
    attributes: ParsedAttributeList;
    typeState: TCState;
}

func asStruct(this: &ParsedTopLevelItem) -> &ParsedStructDecl {
    assert(this.kind == TLI_STRUCT_DECL, "ParsedTopLevelItem.asStruct() called on non-struct TLI");
    return at(&structDecls, this.nodeID);
}
func asUnion(this: &ParsedTopLevelItem) -> &ParsedUnionDecl {
    assert(this.kind == TLI_UNION_DECL, "ParsedTopLevelItem.asUnion() called on non-union TLI");
    return at(&unionDecls, this.nodeID);
}

func getID(this: &ParsedTopLevelItem) -> usize {
    trace("ParsedTopLevelItem.getID");
    return indexOf(&topLevelItems, this);
}

func newParsedTopLevelItem(span: Span, kind: usize, nodeID: usize) -> &ParsedTopLevelItem {
    trace("newParsedTopLevelItem");
    push(&topLevelItems, ParsedTopLevelItem {
        ignored: ignoringNodes,
        kind: kind,
        span: span,
        nodeID: nodeID,
        typeState: blank,
    });
    return last(&topLevelItems);
}

@os(WINDOWS) struct DLL {
    path: String;
    handle: Handle;
}
@os(LINUX) struct DLL {
    path: String;
    handle: Handle;
}

func newDLL(path: String, handle: Handle) -> &DLL {
    push(&dlls, DLL {
        path: path,
        handle: handle,
    });
    return last(&dlls);
}

comptime DLL_NOT_FOUND: usize = 1;
comptime DLL_NO_SUCH_FUNCTION: usize = 2;
func dllNotFound() -> &DLL {
    return DLL_NOT_FOUND as &DLL;
}
func dllNoSuchFunction() -> &DLL {
    return DLL_NO_SUCH_FUNCTION as &DLL;
}
func isNull(dll: &DLL) -> bool {
    if (dll == null) return true;
    if (dll == dllNotFound()) return true;
    if (dll == dllNoSuchFunction()) return true;
    return isNull(dll.handle);
}

func getID(this: &DLL) -> usize {
    trace("DLL.getID");
    return indexOf(&dlls, this);
}

struct ParsedModule {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    tlis: UsizeList;
    dlls: UsizeList;
}
func equals(this: &ParsedModule, other: &ParsedModule) -> bool {
    if (equals(&this.span, &other.span)) return true;
    if (!equals(&this.name.content, &other.name.content)) return false;
    return equals(&this.parent, &other.parent);
}

func getConfigs(this: &ParsedModule) -> UsizeList {
    let list = UsizeList {};
    for (let i: usize = 0; i < this.tlis.length; i = i + 1) {
        if (at(&topLevelItems, *at(&this.tlis, i)).kind == TLI_CONFIG) {
            push(&list, *at(&this.tlis, i));
        }
    }
    return list;
}
func getID(this: &ParsedModule) -> usize {
    trace("ParsedModule.getID");
    return indexOf(&modules, this);
}
func asTLI(this: &ParsedModule) -> &ParsedTopLevelItem {
    trace("ParsedModule.asTLI");
    return newParsedTopLevelItem(this.span, TLI_MOD_DECL, getID(this));
}
func getFullName(this: &ParsedModule) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}
func newParsedModule(parent: TLIParent, span: Span, name: Token, tlis: UsizeList) -> &ParsedModule {
    trace("newParsedModule");
    push(&modules, ParsedModule {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        tlis: tlis,
    });
    return last(&modules);
}

struct ParsedStructDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    context: StructContext;
    typeState: TCState;
}
func getID(this: &ParsedStructDecl) -> usize {
    trace("ParsedStructDecl.getID");
    return indexOf(&structDecls, this);
}
func asTLI(this: &ParsedStructDecl) -> &ParsedTopLevelItem {
    trace("ParsedStructDecl.asTLI");
    return newParsedTopLevelItem(this.span, TLI_STRUCT_DECL, getID(this));
}

func getFieldIndex(this: &ParsedStructDecl, name: &SubStr) -> usize {
    return getFieldIndex(&this.context, name);
}
func getFieldOffset(this: &ParsedStructDecl, name: &SubStr) -> usize {
    let offset: usize = 0;
    let _idc: usize = 0;
    getFieldOffsetAndSize(this, getFieldIndex(this, name), &offset, &_idc);
    return offset;
}
func getFieldOffsetAndSize(this: &ParsedStructDecl, index: usize, offset: &usize, size: &usize) {
    trace("ParsedStructDecl.getFieldOffsetAndSize");
    let o: usize = 0;
    for (let i: usize = 0; i < this.context.fieldLength; i = i + 1) {
        let f1: &ParsedTypeNode = getFieldTypeAtIndex(&this.context, i);
        let f: &Type = getType(&f1.typeState);
        let s: usize = getSize(f);
        s = nextMultipleOf(s, getAlignment(f));
        if (i == index) {
            *offset = o;
            *size = s;
            return;
        }
        o = o + s;
    }
    unreachable("Expected to find field offset and size");
}
func getParentModule(this: &ParsedStructDecl) -> &ParsedModule {
    assert(!this.parent.isFile, "getParentModule called on struct in a file scope");
    return at(&modules, this.parent.id as usize);
}
func getFullName(this: &ParsedStructDecl) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}

func newParsedStructDecl(parent: TLIParent, span: Span, name: Token) -> &ParsedStructDecl {
    trace("newParsedStructDecl");
    push(&structDecls, ParsedStructDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        context: blank,
        typeState: blank,
    });
    return last(&structDecls);
}

struct ParsedUnionDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    variants: ParsedUnionVariantList;
    typeState: TCState;
}

func getID(this: &ParsedUnionDecl) -> usize {
    trace("ParsedUnionDecl.getID");
    return indexOf(&unionDecls, this);
}
func asTLI(this: &ParsedUnionDecl) -> &ParsedTopLevelItem {
    trace("ParsedUnionDecl.asTLI");
    return newParsedTopLevelItem(this.span, TLI_UNION_DECL, getID(this));
}
func resolveVariantByName(this: &ParsedUnionDecl, name: &Token, out: &&ParsedUnionVariant) -> bool {
    trace("ParsedUnionDecl.resolveVariantByName");
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        let variant = *at(&this.variants, i);
        if (equals(&variant.name.content, &name.content)) {
            *out = variant;
            return true;
        }
    }
    return false;
}
func getVariantTag(this: &ParsedUnionDecl, variant: &ParsedUnionVariant) -> usize {
    trace("ParsedUnionDecl.getVariantTag");
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        if (*at(&this.variants, i) == variant) {
            return i;
        }
    }
    unreachable("getVariantTag() expected to find variant");
}

func getFullName(this: &ParsedUnionDecl) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}
func newParsedUnionDecl(parent: TLIParent, span: Span, name: Token) -> &ParsedUnionDecl {
    trace("newParsedUnionDecl");
    push(&unionDecls, ParsedUnionDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
    });
    return last(&unionDecls);
}

comptime UNION_VARIANT_INVALID: usize = 0;
comptime UNION_VARIANT_EMPTY  : usize = 1; // A, B, C
comptime UNION_VARIANT_TUPLE  : usize = 2; // A(i32), B(i32)
comptime UNION_VARIANT_STRUCT : usize = 3; // A { a: i32, b: i32 }
struct ParsedUnionVariant {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    kind: usize;
    fields: ParsedTypeNodeList;
    names: TokenList;
}
func getID(this: &ParsedUnionVariant) -> usize {
    trace("ParsedUnionVariant.getID");
    return indexOf(&unionVariants, this);
}

func getFieldIndexAndOffset(this: &ParsedUnionVariant, name: &SubStr, index: &usize, offset: &usize) {
    assert(this.kind == UNION_VARIANT_STRUCT, "ParsedUnionVariant.getFieldIndex called on non-struct union variant");
    for (let i: usize = 0; i < this.names.length; i = i + 1) {
        if (equals(&at(&this.names, i).content, name)) {
            *index = i;
            return;
        }
        *offset = *offset + getSize(getType(&(*at(&this.fields, i)).typeState));
    }
    unreachable("Expected to find field in union variant at this point");
}

func addField(this: &ParsedUnionVariant, field: &ParsedTypeNode) {
    // NOTE: We leak the String here
    let s: String = blank;
    pushNumber(&s, this.names.length);
    let name = newToken(this.parent.id as usize, &asSubStr(&s), 0, TOKEN_IDENT);
    addNamedField(this, name, field);
}

func getTypeAtIndex(this: &ParsedUnionVariant, index: usize) -> &Type {
    trace("ParsedUnionVariant.getTypeAtIndex");
    assert(index < this.fields.length, "Out of bounds access in ParsedUnionVariant.getTypeAtIndex");
    let node = *at(&this.fields, index);
    assert(isSuccess(&node.typeState), "Expected valid TypeNode state in ParsedUnionVariant.getTypeAtIndex");
    return getType(&node.typeState);
}

func addNamedField(this: &ParsedUnionVariant, name: Token, typ: &ParsedTypeNode) {
    assert(this.fields.length == this.names.length, "ParsedUnionVariant.addNamedField: Unbalanced field and name lists");
    push(&this.fields, typ);
    push(&this.names, name);
}

func checkForDuplicateName(this: &ParsedUnionVariant, name: &Token, dupl: &&Token) -> bool {
    trace("ParsedUnionVariant.checkForDuplicateName");
    let found = false;
    for (let i: usize = 0; i < this.names.length; i = i + 1) {
        let n = at(&this.names, i);
        if (equals(&n.content, &name.content)) {
            if (found) {
                *dupl = n;
                return true;
            }
            found = true;
        }
    }
    return false;
}

func newParsedUnionVariant(kind: usize, parent: TLIParent, span: Span, name: Token) -> &ParsedUnionVariant {
    trace("newParsedUnionVariant");
    push(&unionVariants, ParsedUnionVariant {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        kind: kind,
    });
    return last(&unionVariants);
}
struct ParsedFuncDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    params: ParamContext;
    retType: &ParsedTypeNode;
    body: &ParsedBlock;
    attrs: ParsedAttributeList;
    isComptime: bool;
    typeState: TCState;
    dllHandle: &DLL; // Ptr to DLLArena
}

func hasAttribute(this: &ParsedFuncDecl, attr: usize) -> bool {
    trace("ParsedFuncDecl.hasAttribute");
    for (let i: usize = 0; i < this.attrs.length; i = i + 1) {
        if (at(&this.attrs, i).kind == attr) return true;
    }
    return false;
}
func getID(this: &ParsedFuncDecl) -> usize {
    trace("ParsedFuncDecl.getID");
    return indexOf(&funcDecls, this);
}

func isExtern(this: &ParsedFuncDecl) -> bool {
    trace("ParsedFuncDecl.isExtern");
    for (let i: usize = 0; i < this.attrs.length; i = i + 1) {
        if (at(&this.attrs, i).kind == ATTR_EXTERN) return true;
    }
    return false;
}

func getParentModule(this: &ParsedFuncDecl) -> &ParsedModule {
    assert(!this.parent.isFile, "getParentModule called on function in a file scope");
    return at(&modules, this.parent.id as usize);
}

func getMangledName(this: &ParsedFuncDecl) -> String {
    trace("ParsedFuncDecl.getMangledName");
    if (this.ignored) return toString(&this.name.content);
    assert(isSuccess(&this.typeState), "Mangling can only be done after type checks");
    return mangleFunctionName(
        this.parent,
        &this.name,
        &this.params,
        this.retType,
        this.isComptime,
        &this.attrs,
    );
}

func asTLI(this: &ParsedFuncDecl) -> &ParsedTopLevelItem {
    trace("ParsedFuncDecl.asTLI");
    return newParsedTopLevelItem(this.span, TLI_FUNC_DECL, getID(this));
}

func newParsedFuncDecl(parent: TLIParent, span: Span, name: Token, params: ParamContext, retType: &ParsedTypeNode, body: &ParsedBlock) -> &ParsedFuncDecl {
    push(&funcDecls, ParsedFuncDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        params: params,
        retType: retType,
        body: body,
        isComptime: false,
        typeState: blank,
    });
    return last(&funcDecls);
}

struct ParsedBlock {
    ignored: bool;
    span: Span;
    stmtList: &&ParsedStmt;
    stmtLength: usize;
    stmtCapacity: usize;
    typeState: TCState;
}

func getID(this: &ParsedBlock) -> usize {
    trace("ParsedBlock.getID");
    return indexOf(&blocks, this);
}
func addStmt(this: &ParsedBlock, stmt: &ParsedStmt) {
    trace("ParsedBlock.addStmt");
    if (this.stmtLength >= this.stmtCapacity) {
        let newCap: usize = this.stmtCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.stmtList = realloc(this.stmtList, newCap * sizeof usize);
        assert(this.stmtList != null, "Could not resize stmt list");
        this.stmtCapacity = newCap;
    }
    this.stmtList[this.stmtLength] = stmt;
    this.stmtLength = this.stmtLength + 1;
}

func getStmtAtIndex(this: &ParsedBlock, index: usize) -> &ParsedStmt {
    trace("ParsedBlock.getStmtAtIndex");
    assert(index < this.stmtLength, "Out of bounds access in ParsedBlock.getStmtAtIndex");
    return this.stmtList[index];
}
func into_stmt(this: &ParsedBlock) -> &ParsedStmt {
    let blockStmt: &ParsedStmt = newParsedStmt(this.span, STMT_BLOCK);
    blockStmt.block = this;
    return blockStmt;
}
func newParsedBlock() -> &ParsedBlock {
    push(&blocks, ParsedBlock {
        ignored: ignoringNodes,
    });
    return last(&blocks);
}

comptime STMT_INVALID: usize = 0;
// if VarDecl is global, set block to fileID, otherwise, set block to MAX
comptime STMT_VAR_DECL: usize = 1;
comptime STMT_RETURN_EMPTY: usize = 2;
comptime STMT_RETURN_EXPR: usize = 3;
comptime STMT_EXPR: usize = 4;
comptime STMT_BLOCK: usize = 5;
comptime STMT_IF: usize = 6;
comptime STMT_WHILE: usize = 7;
comptime STMT_BREAK: usize = 8;
comptime STMT_CONTINUE: usize = 9;
comptime STMT_MATCH: usize = 10;
// FIXME: The amount of memory wasted here is crazy
struct ParsedStmt {
    ignored: bool;
    kind: usize;
    span: Span;
    varDeclContext: VarDeclContext;
    expr: &ParsedExpr;
    block: &ParsedBlock;
    step: &ParsedExpr;
    ifContext: IfContext;
    patterns: ParsedPatternList;
    stmts: ParsedStmtList;
    typeState: TCState;
}

func getID(this: &ParsedStmt) -> usize {
    trace("ParsedStmt.getID");
    return indexOf(&stmts, this);
}

func asTLI(this: &ParsedStmt) -> &ParsedTopLevelItem {
    trace("ParsedStmt.asTLI");
    if (this.kind == STMT_VAR_DECL) {
        return newParsedTopLevelItem(this.span, TLI_VAR_DECL, getID(this));
    } else {
        unreachable("Exhaustive handling of STMT to TLI conversions");
    }
}

func getMangledName(this: &ParsedStmt) -> String {
    assert(this.kind == STMT_VAR_DECL, "Only variable declarations can get their names mangled");
    assert(this.varDeclContext.origin < NODE_ID_OFFSET, "Only global variable declarations can get their names mangled");
    return mangleVariableName(this.varDeclContext.origin, &this.varDeclContext.name);
}

func into_block(this: &ParsedStmt) -> &ParsedBlock {
    let block: &ParsedBlock = newParsedBlock();
    addStmt(block, this);
    return block;
}

func newParsedStmt(span: Span, kind: usize) -> &ParsedStmt {
    trace("newParsedStmt");
    push(&stmts, ParsedStmt {
        ignored: ignoringNodes,
        span: span,
        kind: kind,
    });
    return last(&stmts);
}

// REVIEW: These names might need changing once we make it to the Type Checker
comptime PARSED_TYPE_INVALID: usize = 0;
comptime PARSED_TYPE_UNKNOWN: usize = 1;
comptime PARSED_TYPE_NONE: usize = 2;
comptime PARSED_TYPE_ANY: usize = 3;
comptime PARSED_TYPE_BLANK: usize = 4;
comptime PARSED_TYPE_I8: usize = 5;
comptime PARSED_TYPE_I16: usize = 6;
comptime PARSED_TYPE_I32: usize = 7;
comptime PARSED_TYPE_I64: usize = 8;
comptime PARSED_TYPE_U8: usize = 9;
comptime PARSED_TYPE_U16: usize = 10;
comptime PARSED_TYPE_U32: usize = 11;
comptime PARSED_TYPE_U64: usize = 12;
comptime PARSED_TYPE_USIZE: usize = 13;
comptime PARSED_TYPE_BOOL: usize = 14;
comptime PARSED_TYPE_CHAR: usize = 15;
comptime PARSED_TYPE_IDENT: usize = 16;
comptime PARSED_TYPE_REF: usize = 17;
comptime PARSED_TYPE_ARRAY: usize = 18;
comptime PARSED_TYPE_F32: usize = 19;
comptime PARSED_TYPE_F64: usize = 20;
comptime PARSED_TYPE_FUNC: usize = 21;
comptime PARSED_TYPE_MODULE: usize = 22;
comptime PARSED_TYPE_BUILTIN: usize = 23;
func BUILD_A_TYPE(s: &char) -> SubStr {
    return SubStr {
        start: s,
        len: comptimeStrlen(s)
    };
}

comptime ANY: SubStr = BUILD_A_TYPE("Any");
comptime I8: SubStr = BUILD_A_TYPE("i8");
comptime I16: SubStr = BUILD_A_TYPE("i16");
comptime I32: SubStr = BUILD_A_TYPE("i32");
comptime I64: SubStr = BUILD_A_TYPE("i64");
comptime U8: SubStr = BUILD_A_TYPE("u8");
comptime U16: SubStr = BUILD_A_TYPE("u16");
comptime U32: SubStr = BUILD_A_TYPE("u32");
comptime U64: SubStr = BUILD_A_TYPE("u64");
comptime USIZE: SubStr = BUILD_A_TYPE("usize");
comptime F32: SubStr = BUILD_A_TYPE("f32");
comptime F64: SubStr = BUILD_A_TYPE("f64");
comptime BOOL: SubStr = BUILD_A_TYPE("bool");
comptime CHAR: SubStr = BUILD_A_TYPE("char");
func getBuiltinTypeKind(name: Token) -> usize {
    if (equals(&name.content, &ANY)) return PARSED_TYPE_ANY;
    else if (equals(&name.content, &I8)) return PARSED_TYPE_I8;
    else if (equals(&name.content, &I16)) return PARSED_TYPE_I16;
    else if (equals(&name.content, &I32)) return PARSED_TYPE_I32;
    else if (equals(&name.content, &I64)) return PARSED_TYPE_I64;
    else if (equals(&name.content, &U8)) return PARSED_TYPE_U8;
    else if (equals(&name.content, &U16)) return PARSED_TYPE_U16;
    else if (equals(&name.content, &U32)) return PARSED_TYPE_U32;
    else if (equals(&name.content, &U64)) return PARSED_TYPE_U64;
    else if (equals(&name.content, &USIZE)) return PARSED_TYPE_USIZE;
    else if (equals(&name.content, &F32)) return PARSED_TYPE_F32;
    else if (equals(&name.content, &F64)) return PARSED_TYPE_F64;
    else if (equals(&name.content, &BOOL)) return PARSED_TYPE_BOOL;
    else if (equals(&name.content, &CHAR)) return PARSED_TYPE_CHAR;
    return PARSED_TYPE_INVALID;
}
struct ParsedTypeNode {
    ignored: bool;
    span: Span;
    kind: usize;
    underlyingID: &ParsedTypeNode;
    fnParams: ParsedTypeNodeList;
    arraySize: usize;
    nameTkn: Token;
    typeState: TCState;
}

func getID(this: &ParsedTypeNode) -> usize {
    trace("ParsedTypeNode.getID");
    return indexOf(&typeNodes, this);
}

func newParsedTypeNode(span: Span, kind: usize) -> &ParsedTypeNode {
    trace("newParsedTypeNode");
    push(&typeNodes, ParsedTypeNode {
        ignored: ignoringNodes,
        span: span,
        kind: kind,
    });
    return last(&typeNodes);
}

func newBuiltinTypeDecl(span: Span, kind: usize) -> &ParsedTypeNode {
    trace("newBuiltinTypeDecl");
    let t: &ParsedTypeNode = at(&typeNodes, kind);
    (*t).span = span;
    (*t).kind = PARSED_TYPE_BUILTIN;
    return t;
}

comptime ASSOC_LEFT: usize = 0;
comptime ASSOC_RIGHT: usize = 1;

comptime EXPR_INVALID: usize = 0;
comptime EXPR_EMPTY: usize = 1;
comptime EXPR_INT_LIT: usize = 2;
comptime EXPR_STRING_LIT: usize = 3;
comptime EXPR_CHAR_LIT: usize = 4;
comptime EXPR_ARRAY_LIT: usize = 5;
// name -> op is 1 if it's a global variable
// name -> LHS is ID of VarDecl, set by TypeChecker
//      -> if name is a parameter, set LHS to MAX+param#
comptime EXPR_NAME: usize = 6;
// unary -> op and LHS is set
comptime EXPR_UNARY: usize = 7;
comptime EXPR_BINARY: usize = 8;
// call -> origToken is fn name, arrayContext is args
// call -> LHS is ID of FuncDecl we call, set by TypeChecker
comptime EXPR_CALL: usize = 9;
// sizeof -> LHS is set
comptime EXPR_SIZEOF: usize = 10;
comptime EXPR_STRUCT_INIT: usize = 11;
comptime EXPR_UNION_INIT: usize = 12;
// as -> LHS is expr, RHS is type ID
comptime EXPR_AS: usize = 13;
comptime EXPR_NULL: usize = 14;
comptime EXPR_BLANK: usize = 15;
comptime EXPR_TRUE: usize = 16;
comptime EXPR_FALSE: usize = 17;
struct ParsedExpr {
    ignored: bool;
    span: Span;
    kind: usize;
    origToken: Token;
    // REVIEW: We don't need to waste all that memory
    arrayContext: ArrayContext;
    structInitContext: StructInitContext;
    // FIXME: Do we need to waste that memory for all expressions, even if they're not binary ops?
    // REVIEW: We could store binOp in origToken and compute the op on the fly?
    op: usize;
    lhs: usize;
    rhs: usize;
    typeState: TCState;
}
func getID(this: &ParsedExpr) -> usize {
    trace("ParsedExpr.getID");
    return indexOf(&exprs, this);
}

func intoPointer(this: &ParsedExpr) -> usize {
    let unary: &ParsedExpr = newParsedExpr(this.span, EXPR_UNARY);
    (*unary).op = UNARY_REF;
    (*unary).lhs = getID(this);
    return getID(unary);
}

func isLValue(this: &ParsedExpr) -> bool {
    if (this.kind == EXPR_UNARY) {
        return this.op == UNARY_DEREF;
    } else if (this.kind == EXPR_BINARY) {
        if (this.op == BIN_DOT) {
            return at(&exprs, this.rhs).kind == EXPR_NAME;
        }
        if (this.op == BIN_INDEXED_ACCESS) return true;
        return false;
    } else {
        return this.kind == EXPR_NAME;
    }
}

func isBlank(this: &ParsedExpr) -> bool {
    return this.kind == EXPR_BLANK;
}
func isIdentifier(this: &ParsedExpr) -> bool {
    return this.kind == EXPR_NAME;
}
func isLiteral(this: &ParsedExpr) -> bool {
    return this.kind == EXPR_INT_LIT
        || this.kind == EXPR_STRING_LIT
        || this.kind == EXPR_CHAR_LIT
        || this.kind == EXPR_ARRAY_LIT
        || this.kind == EXPR_NULL
        || this.kind == EXPR_TRUE
        || this.kind == EXPR_FALSE;
}

func isUnary(this: &ParsedExpr) -> bool {
    return this.kind == EXPR_UNARY;
}

func isCall(this: &ParsedExpr) -> bool {
    return this.kind == EXPR_CALL;
}

func isAssignment(this: &ParsedExpr) -> bool {
    if (this.kind != EXPR_BINARY) return false;
    return this.op == BIN_ASSIGN;
}

func isArithmetic(this: &ParsedExpr) -> bool {
    if (this.kind != EXPR_BINARY) return false;
    return this.op == BIN_PLUS
        || this.op == BIN_SUB
        || this.op == BIN_MULT
        || this.op == BIN_DIV
        || this.op == BIN_MOD;
}

func isComparison(this: &ParsedExpr) -> bool {
    if (this.kind != EXPR_BINARY) return false;
    return this.op == BIN_CMP_GTE
        || this.op == BIN_CMP_GT
        || this.op == BIN_CMP_LTE
        || this.op == BIN_CMP_LT
        || this.op == BIN_CMP_EQ
        || this.op == BIN_CMP_NEQ;
}

func isLogical(this: &ParsedExpr) -> bool {
    if (this.kind != EXPR_BINARY) return false;
    return this.op == BIN_LAND
        || this.op == BIN_LOR;
}

func isBitwise(this: &ParsedExpr) -> bool {
    if (this.kind != EXPR_BINARY) return false;
    return this.op == BIN_BAND
        || this.op == BIN_BOR
        || this.op == BIN_BXOR;
}

comptime BIN_INVALID: usize = 0;
comptime BIN_PLUS: usize = 1;
comptime BIN_SUB: usize = 2;
comptime BIN_MULT: usize = 3;
comptime BIN_DIV: usize = 4;
comptime BIN_DOT: usize = 5;
comptime BIN_CMP_GTE: usize = 6;
comptime BIN_CMP_GT: usize = 7;
comptime BIN_CMP_LTE: usize = 8;
comptime BIN_CMP_LT: usize = 9;
comptime BIN_CMP_NEQ: usize = 10;
comptime BIN_CMP_EQ: usize = 11;
comptime BIN_ASSIGN: usize = 12;
comptime BIN_AS: usize = 13;
comptime BIN_INDEXED_ACCESS: usize = 14;
comptime BIN_CALL: usize = 15;
comptime BIN_MOD: usize = 16;
comptime BIN_LAND: usize = 17;
comptime BIN_LOR: usize = 18;
comptime BIN_BAND: usize = 19;
comptime BIN_BOR: usize = 20;
comptime BIN_BXOR: usize = 21;
comptime BIN_MODULE: usize = 22;
func binOpFromKind(kind: usize) -> usize {
    trace("binOpFromKind");
    if (kind == TOKEN_PLUS_SINGLE) return BIN_PLUS;
    else if (kind == TOKEN_MINUS_SINGLE) return BIN_SUB;
    else if (kind == TOKEN_ASTERISK_SINGLE) return BIN_MULT;
    else if (kind == TOKEN_SLASH_SINGLE) return BIN_DIV;
    else if (kind == TOKEN_DOT) return BIN_DOT;
    else if (kind == TOKEN_GREATER_THAN_EQUAL) return BIN_CMP_GTE;
    else if (kind == TOKEN_GREATER_THAN) return BIN_CMP_GT;
    else if (kind == TOKEN_LESS_THAN_EQUAL) return BIN_CMP_LTE;
    else if (kind == TOKEN_LESS_THAN) return BIN_CMP_LT;
    else if (kind == TOKEN_NOT_EQUAL) return BIN_CMP_NEQ;
    else if (kind == TOKEN_EQUAL_DOUBLE) return BIN_CMP_EQ;
    else if (kind == TOKEN_EQUAL_SINGLE) return BIN_ASSIGN;
    else if (kind == TOKEN_KEYWORD) return BIN_AS;
    else if (kind == TOKEN_SQUARE_OPEN) return BIN_INDEXED_ACCESS;
    else if (kind == TOKEN_PAREN_OPEN) return BIN_CALL;
    else if (kind == TOKEN_PERCENT) return BIN_MOD;
    else if (kind == TOKEN_PIPE_SINGLE) return BIN_BOR;
    else if (kind == TOKEN_PIPE_DOUBLE) return BIN_LOR;
    else if (kind == TOKEN_AMPERSAND_SINGLE) return BIN_BAND;
    else if (kind == TOKEN_AMPERSAND_DOUBLE) return BIN_LAND;
    else if (kind == TOKEN_CARET) return BIN_BXOR;
    else if (kind == TOKEN_COLON_DOUBLE) return BIN_MODULE;
    unreachable("Exhaustive handling of kinds in binOpFromKind");
}

func binOpAsStr(op: usize) -> &char {
    if (op == BIN_PLUS) return "+";
    else if (op == BIN_SUB) return "-";
    else if (op == BIN_MULT) return "*";
    else if (op == BIN_DIV) return "/";
    else if (op == BIN_DOT) return ".";
    else if (op == BIN_CMP_GTE) return ">=";
    else if (op == BIN_CMP_GT) return ">";
    else if (op == BIN_CMP_LTE) return "<=";
    else if (op == BIN_CMP_LT) return "<";
    else if (op == BIN_CMP_NEQ) return "!=";
    else if (op == BIN_CMP_EQ) return "==";
    else if (op == BIN_ASSIGN) return "=";
    else if (op == BIN_AS) return "as";
    else if (op == BIN_INDEXED_ACCESS) return "[]";
    else if (op == BIN_MOD) return "%";
    else if (op == BIN_LAND) return "&&";
    else if (op == BIN_LOR) return "||";
    else if (op == BIN_BAND) return "&";
    else if (op == BIN_BOR) return "|";
    else if (op == BIN_BXOR) return "^";
    unreachable("Exhaustive handling of binary ops in binOpAsStr");
}

comptime UNARY_INVALID: usize = 0;
comptime UNARY_COMPTIME: usize = 1;
comptime UNARY_DEREF: usize = 2;
comptime UNARY_REF: usize = 3;
comptime UNARY_MINUS: usize = 4;
comptime UNARY_NOT: usize = 5;
func unaryOpFromKind(kind: usize) -> usize {
    trace("unaryOpFromKind");
    // FIXME: We can't know if this is actually KEYWORD_COMPTIME
    if (kind == TOKEN_KEYWORD) return UNARY_COMPTIME;
    else if (kind == TOKEN_ASTERISK_SINGLE) return UNARY_DEREF;
    else if (kind == TOKEN_AMPERSAND_SINGLE) return UNARY_REF;
    else if (kind == TOKEN_MINUS_SINGLE) return UNARY_MINUS;
    else if (kind == TOKEN_BANG) return UNARY_NOT;
    todo_with_msg("unaryOpFromKind");
}

func newParsedExpr(span: Span, kind: usize) -> &ParsedExpr {
    trace("newParsedExpr");
    push(&exprs, ParsedExpr {
        ignored: ignoringNodes,
        kind: kind,
        span: span,
    });
    return last(&exprs);
}

comptime PATTERN_INVALID  : usize = 0;
comptime PATTERN_WILDCARD : usize = 1; // _
comptime PATTERN_NUMBER   : usize = 2; // 1, 2, 3
comptime PATTERN_IDENT    : usize = 3; // a, b, c
comptime PATTERN_REFERENCE: usize = 4; // &<pat>
comptime PATTERN_STRUCT   : usize = 5; // Foo { <pat>, <pat>, ... }
comptime PATTERN_PATH     : usize = 6; // Foo::<pat>
comptime PATTERN_REST     : usize = 7; // ..
comptime PATTERN_BOOLEAN  : usize = 8; // true, false
comptime PATTERN_NULL     : usize = 9; // null
struct ParsedPattern {
    ignored: bool;
    kind: usize;
    span: Span;
    ident: Token;
    subPatterns: ParsedPatternList;
}

func getID(this: &ParsedPattern) -> usize {
    trace("ParsedPattern.getID");
    return indexOf(&patterns, this);
}

func newParsedPattern(span: Span, kind: usize) -> &ParsedPattern {
    trace("newParsedPattern");
    push(&patterns, ParsedPattern {
        ignored: ignoringNodes,
        kind: kind,
        span: span,
    });
    return last(&patterns);
}

func toString(this: &ParsedPattern) -> String {
    if (this.kind == PATTERN_WILDCARD) {
        return newStringFromStrLit("_");
    } else if (this.kind == PATTERN_IDENT
        || this.kind == PATTERN_NUMBER
        || this.kind == PATTERN_NULL
        || this.kind == PATTERN_BOOLEAN) {
        return toString(&this.ident.content);
    } else if (this.kind == PATTERN_REFERENCE) {
        let s = newStringFromStrLit("&");
        let _s = toString(*at(&this.subPatterns, 0));
        pushString(&s, &_s);
        drop(&_s);
        return s;
    } else if (this.kind == PATTERN_STRUCT) {
        let s = toString(&this.ident.content);
        if (this.subPatterns.length == 0) {
            pushStr(&s, " { }");
        } else {
            pushStr(&s, " { ");
            for (let i: usize = 0; i < this.subPatterns.length; i = i + 1) {
                let _s = toString(*at(&this.subPatterns, i));
                pushString(&s, &_s);
                if (i != this.subPatterns.length - 1) {
                    pushStr(&s, ", ");
                }
                drop(&_s);
            }
            pushStr(&s, " }");
        }
        return s;
    } else if (this.kind == PATTERN_PATH) {
        let s = toString(&this.ident.content);
        pushStr(&s, "::");
        let _s = toString(*at(&this.subPatterns, 0));
        pushString(&s, &_s);
        drop(&_s);
        return s;
    } else if (this.kind == PATTERN_REST) {
        return newStringFromStrLit("..");
    } else {
        unreachable("Exhaustive handling of pattern kinds in ParsedPattern.toString()");
    }
}

