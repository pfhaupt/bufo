import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../util/arena.bufo";
import "./context.bufo";
import "./token.bufo";
import "./lexer.bufo";
import "../middleend/checker.bufo";
import "../middleend/types.bufo";
import "../backend/LLVM/debug_info.bufo";

@os(WINDOWS) import "winapi/structs.bufo";
@os(LINUX) import "posix/structs.bufo";

// Arbitrary number chosen as a magic constant for various things
// idea: We'll never have more than that many expressions or type nodes
//       if you ever have 10 billion expressions, please tell me how :^)
comptime NODE_ID_OFFSET: usize = 10000000000;

let ignoringNodes = false;
func toggleIgnoringNodes() {
    ignoringNodes = !ignoringNodes;
}

func mangleVariableName(
    global: bool,
    fileID: usize,
    name: &Token,
) -> String {
    if (fileID == NODE_ID_OFFSET) {
        return toString(&name.content);
    } else {
        let mangledName: String = blank;
        pushNumber(&mangledName, fileID);
        pushSubStr(&mangledName, &name.content);
        return mangledName;
    }
}

func mangleFunctionName(
    parent: TLIParent,
    name: &Token,
    params: &ParamContext,
    retType: &ParsedTypeNode,
    isComptime: bool,
    attrs: &ParsedAttributeList,
) -> String {
    let mangledName: String = blank;
    for (let i: usize = 0; i < attrs.length; i = i + 1) {
        let a = at(attrs, i);
        if (a.kind == ATTR_EXTERN) return toString(&a.name.content);
    }
    // Function: [Module]*-Name-ParamsTypeID-rRetTypeID
    while (!parent.isFile) {
        let mod = at(&modules, parent.id as usize);
        pushSubStr(&mangledName, &mod.name.content);
        pushChar(&mangledName, '.');
        parent = mod.parent;
    }
    pushSubStr(&mangledName, &name.content);
    for (let i: usize = 0; i < params.paramLength; i = i + 1) {
        let typeNode: &ParsedTypeNode = getTypeAtIndex(params, i);
        assert(isSuccess(&typeNode.typeState), "Expected valid parameter type for mangling");
        let typ: &Type = getType(&typeNode.typeState);
        let _typ: String = getMangledName(typ);
        pushString(&mangledName, &_typ);
        drop(&_typ);
    }
    pushChar(&mangledName, 'r');
    if (retType != null) {
        assert(isSuccess(&retType.typeState), "Expected valid return type for mangling");
        let typ: &Type = getType(&retType.typeState);
        let _typ: String = getMangledName(typ);
        pushString(&mangledName, &_typ);
        drop(&_typ);
    } else {
        pushChar(&mangledName, 'n');
    }
    return mangledName;
}

let files: ParsedFileArena = blank;
let topLevelItems: ParsedTopLevelItemArena = blank;
let modules: ParsedModuleArena = blank;
let structDecls: ParsedStructDeclArena = blank;
let unionDecls: ParsedUnionDeclArena = blank;
let unionVariants: ParsedUnionVariantArena = blank;
let funcDecls: ParsedFuncDeclArena = blank;
let blocks: ParsedBlockArena = blank;
let stmts: ParsedStmtArena = blank;
let typeNodes: ParsedTypeNodeArena = blank;
let exprs: ParsedExprArena = blank;
let configs: ParsedConfigArena = blank;
let dlls: DLLArena = blank;
let patterns: ParsedPatternArena = blank;

func getFileByFilePath(path: SubStr, fileID: &usize) -> bool {
    for (let i: usize = 0; i < files.length; i = i + 1) {
        let file: &ParsedFile = at(&files, i);
        if (equals(&file.origin, &path)) {
            *fileID = i;
            return true;
        }
    }
    return false;
}

comptime _ATTR_EXTERN: SubStr = BUILD_A_KEYWORD("extern");
comptime _ATTR_OS: SubStr = BUILD_A_KEYWORD("os");
comptime _ATTR_NORETURN: SubStr = BUILD_A_KEYWORD("noreturn");

comptime ATTR_INVALID: usize = 0;
comptime ATTR_EXTERN: usize = 1;
comptime ATTR_OS: usize = 2; // not used, handled in parser directly
comptime ATTR_NORETURN: usize = 3;
struct ParsedAttribute {
    kind: usize;
    span: Span;
    name: Token;
}

func equals(this: &ParsedAttribute, other: &ParsedAttribute) -> bool {
    unreachable("ParsedAttribute.equals is not implemented yet");
}

union Config {
    Invalid(Token),
    Static(Token),
    Dynamic(Token),
    Libpath(Token),
    Linker(Token),
}

func newConfig(t: Token, value: Token) -> Config {
    if (equals(&t.content, &comptime BUILD_A_KEYWORD("static"))) {
        return Config::Static(value);
    } else if (equals(&t.content, &comptime BUILD_A_KEYWORD("dynamic"))) {
        return Config::Dynamic(value);
    } else if (equals(&t.content, &comptime BUILD_A_KEYWORD("libpath"))) {
        return Config::Libpath(value);
    } else if (equals(&t.content, &comptime BUILD_A_KEYWORD("linker"))) {
        return Config::Linker(value);
    } else {
        return Config::Invalid(value);
    }
}

struct ParsedConfig {
    ignored: bool;
    span: Span;
    configs: ConfigList;
}

func newParsedConfig(span: Span, cfgs: ConfigList) -> &ParsedConfig {
    push(&configs, ParsedConfig {
        ignored: ignoringNodes,
        span: span,
        configs: cfgs,
    });
    return last(&configs);
}

func getID(this: &ParsedConfig) -> usize {
    return indexOf(&configs, this);
}

func asTLI(this: &ParsedConfig) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_CONFIG, getID(this));
}

struct ParsedFile {
    ignored: bool;
    origin: SubStr;
    src: SubStr;
    mod: &ParsedModule;
    debugInfo: DebugInfo;
}

func getID(this: &ParsedFile) -> usize {
    return indexOf(&files, this);
}

func getLineAndColumnFromSpan(this: &ParsedFile, span: &Span, line: &usize, column: &usize) {
    let l: usize = 1;
    let c: usize = 1;
    let p: usize = 0;
    while (p < span.start) {
        let _c = this.src.start[p];
        if (_c == '\n') {
            c = 1;
            l = l + 1;
        } else {
            c = c + 1;
        }
        p = p + 1;
    }
    *line = l;
    *column = c;
}

func newParsedFile(origin: SubStr, src: SubStr) -> &ParsedFile {
    push(&files, ParsedFile {
        ignored: ignoringNodes,
        origin: origin,
        src: src,
    });
    return last(&files);
}

comptime TLI_INVALID    : usize = 0;
comptime TLI_IMPORT     : usize = 1;
comptime TLI_VAR_DECL   : usize = 2;
comptime TLI_STRUCT_DECL: usize = 3;
comptime TLI_UNION_DECL : usize = 4;
comptime TLI_FUNC_DECL  : usize = 5;
comptime TLI_MOD_DECL   : usize = 6;
comptime TLI_CONFIG     : usize = 7;

// the parentID is ambiguous because we can nest modules -> is the parent a ParsedFile or should we
// look in the modules lookup?
struct TLIParent {
    isFile: bool;
    id: u32;
}

func equals(this: &TLIParent, other: &TLIParent) -> bool {
    return this.isFile == other.isFile && this.id == other.id;
}

struct ParsedTopLevelItem {
    ignored: bool;
    parent: TLIParent;
    kind: usize;
    span: Span;
    nodeID: usize;
    attributes: ParsedAttributeList;
    typeState: TCState;
}

func asStruct(this: &ParsedTopLevelItem) -> &ParsedStructDecl {
    assert(this.kind == TLI_STRUCT_DECL, "ParsedTopLevelItem.asStruct() called on non-struct TLI");
    return at(&structDecls, this.nodeID);
}
func asUnion(this: &ParsedTopLevelItem) -> &ParsedUnionDecl {
    assert(this.kind == TLI_UNION_DECL, "ParsedTopLevelItem.asUnion() called on non-union TLI");
    return at(&unionDecls, this.nodeID);
}

func getID(this: &ParsedTopLevelItem) -> usize {
    return indexOf(&topLevelItems, this);
}

func newParsedTopLevelItem(span: Span, kind: usize, nodeID: usize) -> &ParsedTopLevelItem {
    push(&topLevelItems, ParsedTopLevelItem {
        ignored: ignoringNodes,
        kind: kind,
        span: span,
        nodeID: nodeID,
        typeState: blank,
    });
    return last(&topLevelItems);
}

@os(WINDOWS) struct DLL {
    path: String;
    handle: Handle;
}
@os(LINUX) struct DLL {
    path: String;
    handle: Handle;
}

func newDLL(path: String, handle: Handle) -> &DLL {
    push(&dlls, DLL {
        path: path,
        handle: handle,
    });
    return last(&dlls);
}

comptime DLL_NOT_FOUND: usize = 1;
comptime DLL_NO_SUCH_FUNCTION: usize = 2;
func dllNotFound() -> &DLL {
    return DLL_NOT_FOUND as &DLL;
}
func dllNoSuchFunction() -> &DLL {
    return DLL_NO_SUCH_FUNCTION as &DLL;
}
func isNull(dll: &DLL) -> bool {
    if (dll == null) return true;
    if (dll == dllNotFound()) return true;
    if (dll == dllNoSuchFunction()) return true;
    return isNull(dll.handle);
}

func getID(this: &DLL) -> usize {
    return indexOf(&dlls, this);
}

struct ParsedModule {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    tlis: UsizeList;
    dlls: UsizeList;
}
func equals(this: &ParsedModule, other: &ParsedModule) -> bool {
    if (equals(&this.span, &other.span)) return true;
    if (!equals(&this.name.content, &other.name.content)) return false;
    return equals(&this.parent, &other.parent);
}

func getConfigs(this: &ParsedModule) -> UsizeList {
    let list = UsizeList {};
    for (let i: usize = 0; i < this.tlis.length; i = i + 1) {
        if (at(&topLevelItems, *at(&this.tlis, i)).kind == TLI_CONFIG) {
            push(&list, *at(&this.tlis, i));
        }
    }
    return list;
}
func getID(this: &ParsedModule) -> usize {
    return indexOf(&modules, this);
}
func asTLI(this: &ParsedModule) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_MOD_DECL, getID(this));
}
func getParentFile(this: &ParsedModule) -> &ParsedFile {
    return at(&files, this.span.file);
}
func getFullName(this: &ParsedModule) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}
func newParsedModule(parent: TLIParent, span: Span, name: Token, tlis: UsizeList) -> &ParsedModule {
    push(&modules, ParsedModule {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        tlis: tlis,
    });
    return last(&modules);
}

struct ParsedStructDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    context: StructContext;
    typeState: TCState;
    debugInfo: DebugInfo;
}
func getID(this: &ParsedStructDecl) -> usize {
    return indexOf(&structDecls, this);
}
func asTLI(this: &ParsedStructDecl) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_STRUCT_DECL, getID(this));
}

func getFieldIndex(this: &ParsedStructDecl, name: &SubStr) -> usize {
    return getFieldIndex(&this.context, name);
}
func getFieldOffset(this: &ParsedStructDecl, name: &SubStr, inBits: bool) -> usize {
    let offset: usize = 0;
    let _idc: usize = 0;
    getFieldOffsetAndSize(this, getFieldIndex(this, name), &offset, &_idc, inBits);
    return offset;
}
func getFieldOffsetAndSize(this: &ParsedStructDecl, index: usize, offset: &usize, size: &usize, inBits: bool) {
    let o: usize = 0;
    let sizeFn = getSizeInBytes;
    let alignFn = getAlignmentInBytes;
    if (inBits) {
        sizeFn = getSizeInBits;
        alignFn = getAlignmentInBits;
    }
    for (let i: usize = 0; i < this.context.fieldLength; i = i + 1) {
        let f1: &ParsedTypeNode = getFieldTypeAtIndex(&this.context, i);
        let f: &Type = getType(&f1.typeState);
        let s: usize = sizeFn(f);
        if (i == index) {
            *offset = o;
            *size = s;
            return;
        }
        if (i != this.context.fieldLength - 1) {
            let f2: &ParsedTypeNode = getFieldTypeAtIndex(&this.context, i + 1);
            let nf: &Type = getType(&f2.typeState);
            o = nextMultipleOf(o + s, alignFn(nf));
        }
    }
    unreachable("Expected to find field offset and size");
}
func getParentFile(this: &ParsedStructDecl) -> &ParsedFile {
    return at(&files, this.span.file);
}
func getParentModule(this: &ParsedStructDecl) -> &ParsedModule {
    assert(!this.parent.isFile, "getParentModule called on struct in a file scope");
    return at(&modules, this.parent.id as usize);
}
func getFullName(this: &ParsedStructDecl) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}

func newParsedStructDecl(parent: TLIParent, span: Span, name: Token) -> &ParsedStructDecl {
    push(&structDecls, ParsedStructDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        context: blank,
        typeState: blank,
    });
    return last(&structDecls);
}

struct ParsedUnionDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    variants: ParsedUnionVariantList;
    typeState: TCState;
    debugInfo: DebugInfo;
}

func getID(this: &ParsedUnionDecl) -> usize {
    return indexOf(&unionDecls, this);
}
func asTLI(this: &ParsedUnionDecl) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_UNION_DECL, getID(this));
}
func resolveVariantByName(this: &ParsedUnionDecl, name: &Token, out: &&ParsedUnionVariant) -> bool {
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        let variant = *at(&this.variants, i);
        if (equals(&variant.name.content, &name.content)) {
            *out = variant;
            return true;
        }
    }
    return false;
}
func getVariantTag(this: &ParsedUnionDecl, variant: &ParsedUnionVariant) -> usize {
    for (let i: usize = 0; i < this.variants.length; i = i + 1) {
        if (*at(&this.variants, i) == variant) {
            return i;
        }
    }
    unreachable("getVariantTag() expected to find variant");
}

func getParentFile(this: &ParsedUnionDecl) -> &ParsedFile {
    return at(&files, this.span.file);
}
func getFullName(this: &ParsedUnionDecl) -> String {
    let s: String = blank;
    let parent = this.parent;
    while (!parent.isFile) {
        let m = at(&modules, parent.id as usize);
        let _s: String = blank;
        pushSubStr(&_s, &m.name.content);
        if (s.length != 0) {
            pushChar(&_s, ':');
            pushChar(&_s, ':');
        }
        pushString(&_s, &s);
        drop(&s);
        s = _s;
        parent = m.parent;
    }
    if (s.length != 0) {
        pushChar(&s, ':');
        pushChar(&s, ':');
    }
    pushSubStr(&s, &this.name.content);
    return s;
}
func newParsedUnionDecl(parent: TLIParent, span: Span, name: Token) -> &ParsedUnionDecl {
    push(&unionDecls, ParsedUnionDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
    });
    return last(&unionDecls);
}

comptime UNION_VARIANT_INVALID: usize = 0;
comptime UNION_VARIANT_EMPTY  : usize = 1; // A, B, C
comptime UNION_VARIANT_TUPLE  : usize = 2; // A(i32), B(i32)
comptime UNION_VARIANT_STRUCT : usize = 3; // A { a: i32, b: i32 }
struct ParsedUnionVariant {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    kind: usize;
    fields: ParsedTypeNodeList;
    names: TokenList;
}
func getID(this: &ParsedUnionVariant) -> usize {
    return indexOf(&unionVariants, this);
}

func toType(this: &ParsedUnionVariant) -> &Type {
    let decl: &ParsedStructDecl = newParsedStructDecl(this.parent, this.span, this.name);
    if (this.kind == UNION_VARIANT_STRUCT) {
        for (let i: usize = 0; i < this.fields.length; i = i + 1) {
            addField(&decl.context, *at(&this.names, i), *at(&this.fields, i));
        }
    } else if (this.kind == UNION_VARIANT_TUPLE) {
        for (let i: usize = 0; i < this.fields.length; i = i + 1) {
            // NOTE: We leak the String here
            let s: String = blank;
            pushNumber(&s, i);
            let name = newToken(this.parent.id as usize, &asSubStr(&s), 0, TOKEN_IDENT);
            addField(&decl.context, name, *at(&this.fields, i));
        }
    } else {
        assert(this.kind == UNION_VARIANT_EMPTY);
    }
    let typ = wrap(Type::Struct(decl));
    decl.typeState = newTCStateType(typ);
    return typ;
}

func getFieldIndex(this: &ParsedUnionVariant, name: &SubStr) -> usize {
    for (let i: usize = 0; i < this.names.length; i = i + 1) {
        if (equals(&at(&this.names, i).content, name)) {
            return i;
        }
    }
    unreachable("ParsedUnionVariant.getFieldIndex: Expected to find field with name");
}
func getFieldOffsetAndSize(this: &ParsedUnionVariant, index: usize, offset: &usize, size: &usize, inBits: bool) {
    assert(this.kind != UNION_VARIANT_EMPTY, "ParsedUnionVariant.getFieldOffsetAndSize called on empty union variant");
    assert(index < this.fields.length, "getFieldOffsetAndSize: Out-of-bounds");
    assert(this.fields.length > 0, "getFieldOffsetAndSize: Empty variant");
    let sizeFn = getSizeInBytes;
    let alignFn = getAlignmentInBytes;
    if (inBits) {
        sizeFn = getSizeInBits;
        alignFn = getAlignmentInBits;
    }
    let o: usize = 0;
    if (*offset != 0) {
        let nf: &Type = getType(&(*at(&this.fields, 0)).typeState);
        o = nextMultipleOf(*offset, alignFn(nf));
    }
    for (let i: usize = 0; i < this.fields.length; i = i + 1) {
        let f = getType(&(*at(&this.fields, i)).typeState);
        let s: usize = sizeFn(f);
        if (i == index) {
            *offset = o;
            *size = s;
            return;
        }
        o = o + s;
        if (i != this.fields.length - 1) {
            let nf: &Type = getType(&(*at(&this.fields, i + 1)).typeState);
            o = nextMultipleOf(o, alignFn(nf));
        }
    }
    unreachable("Expected to find field offset and size");
}

func addField(this: &ParsedUnionVariant, field: &ParsedTypeNode) {
    // NOTE: We leak the String here
    let s: String = blank;
    pushNumber(&s, this.names.length);
    let name = newToken(this.parent.id as usize, &asSubStr(&s), 0, TOKEN_IDENT);
    addNamedField(this, name, field);
}

func getTypeAtIndex(this: &ParsedUnionVariant, index: usize) -> &Type {
    assert(index < this.fields.length, "Out of bounds access in ParsedUnionVariant.getTypeAtIndex");
    let node = *at(&this.fields, index);
    assert(isSuccess(&node.typeState), "Expected valid TypeNode state in ParsedUnionVariant.getTypeAtIndex");
    return getType(&node.typeState);
}

func addNamedField(this: &ParsedUnionVariant, name: Token, typ: &ParsedTypeNode) {
    assert(this.fields.length == this.names.length, "ParsedUnionVariant.addNamedField: Unbalanced field and name lists");
    push(&this.fields, typ);
    push(&this.names, name);
}

func checkForDuplicateName(this: &ParsedUnionVariant, name: &Token, dupl: &&Token) -> bool {
    let found = false;
    for (let i: usize = 0; i < this.names.length; i = i + 1) {
        let n = at(&this.names, i);
        if (equals(&n.content, &name.content)) {
            if (found) {
                *dupl = n;
                return true;
            }
            found = true;
        }
    }
    return false;
}

func newParsedUnionVariant(kind: usize, parent: TLIParent, span: Span, name: Token) -> &ParsedUnionVariant {
    push(&unionVariants, ParsedUnionVariant {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        kind: kind,
    });
    return last(&unionVariants);
}
struct ParsedFuncDecl {
    ignored: bool;
    parent: TLIParent;
    name: Token;
    span: Span;
    params: ParamContext;
    retType: &ParsedTypeNode;
    body: &ParsedBlock;
    attrs: ParsedAttributeList;
    isComptime: bool;
    typeState: TCState;
    dllHandle: &DLL; // Ptr to DLLArena
    debugInfo: DebugInfo;
}

func hasAttribute(this: &ParsedFuncDecl, attr: usize) -> bool {
    for (let i: usize = 0; i < this.attrs.length; i = i + 1) {
        if (at(&this.attrs, i).kind == attr) return true;
    }
    return false;
}
func getID(this: &ParsedFuncDecl) -> usize {
    return indexOf(&funcDecls, this);
}

func isExtern(this: &ParsedFuncDecl) -> bool {
    for (let i: usize = 0; i < this.attrs.length; i = i + 1) {
        if (at(&this.attrs, i).kind == ATTR_EXTERN) return true;
    }
    return false;
}

func getParentFile(this: &ParsedFuncDecl) -> &ParsedFile {
    return at(&files, this.span.file);
}
func getParentModule(this: &ParsedFuncDecl) -> &ParsedModule {
    assert(!this.parent.isFile, "getParentModule called on function in a file scope");
    return at(&modules, this.parent.id as usize);
}

func getMangledName(this: &ParsedFuncDecl) -> String {
    if (this.ignored) return toString(&this.name.content);
    assert(isSuccess(&this.typeState), "Mangling can only be done after type checks");
    return mangleFunctionName(
        this.parent,
        &this.name,
        &this.params,
        this.retType,
        this.isComptime,
        &this.attrs,
    );
}

func asTLI(this: &ParsedFuncDecl) -> &ParsedTopLevelItem {
    return newParsedTopLevelItem(this.span, TLI_FUNC_DECL, getID(this));
}

func newParsedFuncDecl(parent: TLIParent, span: Span, name: Token, params: ParamContext, retType: &ParsedTypeNode, body: &ParsedBlock) -> &ParsedFuncDecl {
    push(&funcDecls, ParsedFuncDecl {
        ignored: ignoringNodes,
        parent: parent,
        name: name,
        span: span,
        params: params,
        retType: retType,
        body: body,
        isComptime: false,
        typeState: blank,
    });
    return last(&funcDecls);
}

struct ParsedBlock {
    ignored: bool;
    span: Span;
    stmtList: &&ParsedStmt;
    stmtLength: usize;
    stmtCapacity: usize;
    typeState: TCState;
}

func getID(this: &ParsedBlock) -> usize {
    return indexOf(&blocks, this);
}
func addStmt(this: &ParsedBlock, stmt: &ParsedStmt) {
    if (this.stmtLength >= this.stmtCapacity) {
        let newCap: usize = this.stmtCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.stmtList = C::realloc(this.stmtList, newCap * sizeof usize);
        assert(this.stmtList != null, "Could not resize stmt list");
        this.stmtCapacity = newCap;
    }
    this.stmtList[this.stmtLength] = stmt;
    this.stmtLength = this.stmtLength + 1;
}

func getStmtAtIndex(this: &ParsedBlock, index: usize) -> &ParsedStmt {
    assert(index < this.stmtLength, "Out of bounds access in ParsedBlock.getStmtAtIndex");
    return this.stmtList[index];
}
func into_stmt(this: &ParsedBlock) -> &ParsedStmt {
    return newParsedStmt(this.span, StmtData::Block(this));
}
func newParsedBlock() -> &ParsedBlock {
    push(&blocks, ParsedBlock {
        ignored: ignoringNodes,
    });
    return last(&blocks);
}

// TODO: Once `let` accepts a pattern, we can also introduce `if let`
union StmtData {
    VarDecl(VarDecl),
    ReturnEmpty,
    ReturnExpr(&ParsedExpr),
    Expr(&ParsedExpr),
    Block(&ParsedBlock),
    If(&ParsedExpr, &ParsedStmt),
    IfElse(&ParsedExpr, &ParsedStmt, &ParsedStmt),
    While(&ParsedExpr, &ParsedStmt),
    CFor { init: &ParsedStmt, cond: &ParsedExpr, step: &ParsedExpr, body: &ParsedStmt },
    Break,
    Continue,
    Match(&ParsedExpr, ParsedPatternList, ParsedStmtList),
    Asm(&ParsedExpr, ParsedExprList),
}
// TODO: VarDecls should accept a pattern instead of just a name
struct VarDecl {
    name: Token;
    type: &ParsedTypeNode;
    expr: &ParsedExpr;
    isComptime: bool;
    isGlobal: bool;
    origin: usize;
}

struct ParsedStmt {
    ignored: bool;
    span: Span;
    data: StmtData;
    typeState: TCState;
}

func getID(this: &ParsedStmt) -> usize {
    return indexOf(&stmts, this);
}

func asTLI(this: &ParsedStmt) -> &ParsedTopLevelItem {
    match (&this.data) {
        &StmtData::VarDecl(..) => {
            return newParsedTopLevelItem(this.span, TLI_VAR_DECL, getID(this));
        }
        _ => { }
    }
    unreachable("Exhaustive handling of STMT to TLI conversions");
}

func into_block(this: &ParsedStmt) -> &ParsedBlock {
    let block: &ParsedBlock = newParsedBlock();
    addStmt(block, this);
    return block;
}

func newParsedStmt(span: Span, data: StmtData) -> &ParsedStmt {
    push(&stmts, ParsedStmt {
        ignored: ignoringNodes,
        span: span,
        data: data,
    });
    return last(&stmts);
}

// REVIEW: These names might need changing once we make it to the Type Checker
comptime PARSED_TYPE_INVALID: usize = 0;
comptime PARSED_TYPE_UNKNOWN: usize = 1;
comptime PARSED_TYPE_NONE: usize = 2;
comptime PARSED_TYPE_ANY: usize = 3;
comptime PARSED_TYPE_BLANK: usize = 4;
comptime PARSED_TYPE_I8: usize = 5;
comptime PARSED_TYPE_I16: usize = 6;
comptime PARSED_TYPE_I32: usize = 7;
comptime PARSED_TYPE_I64: usize = 8;
comptime PARSED_TYPE_U8: usize = 9;
comptime PARSED_TYPE_U16: usize = 10;
comptime PARSED_TYPE_U32: usize = 11;
comptime PARSED_TYPE_U64: usize = 12;
comptime PARSED_TYPE_USIZE: usize = 13;
comptime PARSED_TYPE_BOOL: usize = 14;
comptime PARSED_TYPE_CHAR: usize = 15;
comptime PARSED_TYPE_IDENT: usize = 16;
comptime PARSED_TYPE_REF: usize = 17;
comptime PARSED_TYPE_ARRAY: usize = 18;
comptime PARSED_TYPE_F32: usize = 19;
comptime PARSED_TYPE_F64: usize = 20;
comptime PARSED_TYPE_FUNC: usize = 21;
comptime PARSED_TYPE_MODULE: usize = 22;
comptime PARSED_TYPE_BUILTIN: usize = 23;
func BUILD_A_TYPE(s: &char) -> SubStr {
    return SubStr {
        start: s,
        len: comptimeStrlen(s)
    };
}

comptime ANY: SubStr = BUILD_A_TYPE("Any");
comptime I8: SubStr = BUILD_A_TYPE("i8");
comptime I16: SubStr = BUILD_A_TYPE("i16");
comptime I32: SubStr = BUILD_A_TYPE("i32");
comptime I64: SubStr = BUILD_A_TYPE("i64");
comptime U8: SubStr = BUILD_A_TYPE("u8");
comptime U16: SubStr = BUILD_A_TYPE("u16");
comptime U32: SubStr = BUILD_A_TYPE("u32");
comptime U64: SubStr = BUILD_A_TYPE("u64");
comptime USIZE: SubStr = BUILD_A_TYPE("usize");
comptime F32: SubStr = BUILD_A_TYPE("f32");
comptime F64: SubStr = BUILD_A_TYPE("f64");
comptime BOOL: SubStr = BUILD_A_TYPE("bool");
comptime CHAR: SubStr = BUILD_A_TYPE("char");
func getBuiltinTypeKind(name: Token) -> usize {
    if (equals(&name.content, &ANY)) return PARSED_TYPE_ANY;
    else if (equals(&name.content, &I8)) return PARSED_TYPE_I8;
    else if (equals(&name.content, &I16)) return PARSED_TYPE_I16;
    else if (equals(&name.content, &I32)) return PARSED_TYPE_I32;
    else if (equals(&name.content, &I64)) return PARSED_TYPE_I64;
    else if (equals(&name.content, &U8)) return PARSED_TYPE_U8;
    else if (equals(&name.content, &U16)) return PARSED_TYPE_U16;
    else if (equals(&name.content, &U32)) return PARSED_TYPE_U32;
    else if (equals(&name.content, &U64)) return PARSED_TYPE_U64;
    else if (equals(&name.content, &USIZE)) return PARSED_TYPE_USIZE;
    else if (equals(&name.content, &F32)) return PARSED_TYPE_F32;
    else if (equals(&name.content, &F64)) return PARSED_TYPE_F64;
    else if (equals(&name.content, &BOOL)) return PARSED_TYPE_BOOL;
    else if (equals(&name.content, &CHAR)) return PARSED_TYPE_CHAR;
    return PARSED_TYPE_INVALID;
}
struct ParsedTypeNode {
    ignored: bool;
    span: Span;
    kind: usize;
    underlyingID: &ParsedTypeNode;
    fnParams: ParsedTypeNodeList;
    arraySize: usize;
    nameTkn: Token;
    typeState: TCState;
}

func getID(this: &ParsedTypeNode) -> usize {
    return indexOf(&typeNodes, this);
}

func newParsedTypeNode(span: Span, kind: usize) -> &ParsedTypeNode {
    push(&typeNodes, ParsedTypeNode {
        ignored: ignoringNodes,
        span: span,
        kind: kind,
    });
    return last(&typeNodes);
}

func newBuiltinTypeDecl(span: Span, kind: usize) -> &ParsedTypeNode {
    let t: &ParsedTypeNode = at(&typeNodes, kind);
    (*t).span = span;
    (*t).kind = PARSED_TYPE_BUILTIN;
    return t;
}

union Assoc {
    Left,
    Right
}

union ExprData {
    IntLit(Token),
    StrLit(Token),
    CharLit(Token),
    ArrayLit(ArrayContext),
    Ident(IdentExpr),
    Unary(UnaryExpr),
    Binary(BinaryExpr),
    Call(CallExpr),
    Sizeof(&ParsedTypeNode),
    StructInit(StructExpr),
    UnionInit(UnionExpr),
    As(&ParsedExpr, &ParsedTypeNode),
    Null,
    Blank,
    True,
    False,
    Func(&ParsedFuncDecl),
}
union UnaryExpr {
    Comptime(&ParsedExpr),
    Ref(&ParsedExpr),
    Deref(&ParsedExpr),
    Negate(&ParsedExpr),
    Not(&ParsedExpr),
}
func fromTkn(kind: usize, expr: &ParsedExpr) -> UnaryExpr {
    if (kind == TOKEN_ASTERISK_SINGLE) return UnaryExpr::Deref(expr);
    else if (kind == TOKEN_AMPERSAND_SINGLE) return UnaryExpr::Ref(expr);
    else if (kind == TOKEN_MINUS_SINGLE) return UnaryExpr::Negate(expr);
    else if (kind == TOKEN_BANG) return UnaryExpr::Not(expr);
    unreachable("fromTkn: Exhaustive handling of unary ops");
}
func extractOperand(expr: &UnaryExpr, lhs: &&ParsedExpr) {
    match (expr) {
        &UnaryExpr::Comptime(_lhs) => { *lhs = _lhs; }
        &UnaryExpr::Ref(_lhs) => { *lhs = _lhs; }
        &UnaryExpr::Deref(_lhs) => { *lhs = _lhs; }
        &UnaryExpr::Negate(_lhs) => { *lhs = _lhs; }
        &UnaryExpr::Not(_lhs) => { *lhs = _lhs; }
        _ => { unreachable("extractOperand: Exhaustive handling of unary expressions"); }
    }
}
union BinaryExpr {
    Path(&ParsedExpr, &ParsedExpr),
    Dot(&ParsedExpr, &ParsedExpr),
    Assign(&ParsedExpr, &ParsedExpr),
    Plus(&ParsedExpr, &ParsedExpr),
    Sub(&ParsedExpr, &ParsedExpr),
    Mult(&ParsedExpr, &ParsedExpr),
    Div(&ParsedExpr, &ParsedExpr),
    Mod(&ParsedExpr, &ParsedExpr),
    CmpEq(&ParsedExpr, &ParsedExpr),
    CmpNeq(&ParsedExpr, &ParsedExpr),
    CmpGt(&ParsedExpr, &ParsedExpr),
    CmpGte(&ParsedExpr, &ParsedExpr),
    CmpLt(&ParsedExpr, &ParsedExpr),
    CmpLte(&ParsedExpr, &ParsedExpr),
    LogAnd(&ParsedExpr, &ParsedExpr),
    LogOr(&ParsedExpr, &ParsedExpr),
    BitAnd(&ParsedExpr, &ParsedExpr),
    BitOr(&ParsedExpr, &ParsedExpr),
    BitXor(&ParsedExpr, &ParsedExpr),
    Indexed(&ParsedExpr, &ParsedExpr),
}
func binOpAsStr(expr: &BinaryExpr) -> &char {
    match (expr) {
        &BinaryExpr::Path(..) => { return "::"; }
        &BinaryExpr::Dot(..) => { return "."; }
        &BinaryExpr::Assign(..) => { return "="; }
        &BinaryExpr::Plus(..) => { return "+"; }
        &BinaryExpr::Sub(..) => { return "-"; }
        &BinaryExpr::Mult(..) => { return "*"; }
        &BinaryExpr::Div(..) => { return "/"; }
        &BinaryExpr::Mod(..) => { return "%"; }
        &BinaryExpr::CmpEq(..) => { return "=="; }
        &BinaryExpr::CmpNeq(..) => { return "!="; }
        &BinaryExpr::CmpGt(..) => { return ">"; }
        &BinaryExpr::CmpGte(..) => { return ">="; }
        &BinaryExpr::CmpLt(..) => { return "<"; }
        &BinaryExpr::CmpLte(..) => { return "<="; }
        &BinaryExpr::LogAnd(..) => { return "&&"; }
        &BinaryExpr::LogOr(..) => { return "||"; }
        &BinaryExpr::BitAnd(..) => { return "&"; }
        &BinaryExpr::BitOr(..) => { return "|"; }
        &BinaryExpr::BitXor(..) => { return "^"; }
        &BinaryExpr::Indexed(..) => { unreachable("binOpAsStr is not defined for indexed access"); }
        _ => { }
    }
    unreachable("binOpAsStr: Exhaustive handling of binary expressions");
}

func extractOperands(expr: &BinaryExpr, lhs: &&ParsedExpr, rhs: &&ParsedExpr) {
    match (expr) {
        &BinaryExpr::Path(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Dot(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Assign(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Plus(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Sub(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Mult(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Div(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Mod(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpEq(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpNeq(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpGt(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpGte(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpLt(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::CmpLte(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::LogAnd(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::LogOr(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::BitAnd(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::BitOr(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::BitXor(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        &BinaryExpr::Indexed(_lhs, _rhs) => { *lhs = _lhs; *rhs = _rhs; }
        _ => { unreachable("extractOperands: Exhaustive handling of binary expressions"); }
    }
}
func fromTkn(kind: usize, lhs: &ParsedExpr, rhs: &ParsedExpr) -> BinaryExpr {
    if (kind == TOKEN_PLUS_SINGLE) return BinaryExpr::Plus(lhs, rhs);
    else if (kind == TOKEN_MINUS_SINGLE) return BinaryExpr::Sub(lhs, rhs);
    else if (kind == TOKEN_ASTERISK_SINGLE) return BinaryExpr::Mult(lhs, rhs);
    else if (kind == TOKEN_SLASH_SINGLE) return BinaryExpr::Div(lhs, rhs);
    else if (kind == TOKEN_DOT) return BinaryExpr::Dot(lhs, rhs);
    else if (kind == TOKEN_GREATER_THAN_EQUAL) return BinaryExpr::CmpGte(lhs, rhs);
    else if (kind == TOKEN_GREATER_THAN) return BinaryExpr::CmpGt(lhs, rhs);
    else if (kind == TOKEN_LESS_THAN_EQUAL) return BinaryExpr::CmpLte(lhs, rhs);
    else if (kind == TOKEN_LESS_THAN) return BinaryExpr::CmpLt(lhs, rhs);
    else if (kind == TOKEN_NOT_EQUAL) return BinaryExpr::CmpNeq(lhs, rhs);
    else if (kind == TOKEN_EQUAL_DOUBLE) return BinaryExpr::CmpEq(lhs, rhs);
    else if (kind == TOKEN_EQUAL_SINGLE) return BinaryExpr::Assign(lhs, rhs);
    else if (kind == TOKEN_SQUARE_OPEN) return BinaryExpr::Indexed(lhs, rhs);
    else if (kind == TOKEN_PERCENT) return BinaryExpr::Mod(lhs, rhs);
    else if (kind == TOKEN_AMPERSAND_DOUBLE) return BinaryExpr::LogAnd(lhs, rhs);
    else if (kind == TOKEN_PIPE_DOUBLE) return BinaryExpr::LogOr(lhs, rhs);
    else if (kind == TOKEN_AMPERSAND_SINGLE) return BinaryExpr::BitAnd(lhs, rhs);
    else if (kind == TOKEN_PIPE_SINGLE) return BinaryExpr::BitOr(lhs, rhs);
    else if (kind == TOKEN_CARET) return BinaryExpr::BitXor(lhs, rhs);
    else if (kind == TOKEN_COLON_DOUBLE) return BinaryExpr::Path(lhs, rhs);
    unreachable("fromTkn: Exhaustive handling of binary kinds");
}
func isArithmetic(this: &BinaryExpr) -> bool {
    match (this) {
        &BinaryExpr::Plus(..) => { return true; }
        &BinaryExpr::Sub(..) => { return true; }
        &BinaryExpr::Mult(..) => { return true; }
        &BinaryExpr::Div(..) => { return true; }
        &BinaryExpr::Mod(..) => { return true; }
        _ => { }
    }
    return false;
}
func isComparison(this: &BinaryExpr) -> bool {
    match (this) {
        &BinaryExpr::CmpGte(..) => { return true; }
        &BinaryExpr::CmpGt(..) => { return true; }
        &BinaryExpr::CmpLte(..) => { return true; }
        &BinaryExpr::CmpLt(..) => { return true; }
        &BinaryExpr::CmpEq(..) => { return true; }
        &BinaryExpr::CmpNeq(..) => { return true; }
        _ => { }
    }
    return false;
}
func isLogical(this: &BinaryExpr) -> bool {
    match (this) {
        &BinaryExpr::LogAnd(..) => { return true; }
        &BinaryExpr::LogOr(..) => { return true; }
        _ => { }
    }
    return false;
}
func isBitwise(this: &BinaryExpr) -> bool {
    match (this) {
        &BinaryExpr::BitAnd(..) => { return true; }
        &BinaryExpr::BitOr(..) => { return true; }
        &BinaryExpr::BitXor(..) => { return true; }
        _ => { }
    }
    return false;
}
func isAssignment(this: &BinaryExpr) -> bool {
    match (this) {
        &BinaryExpr::Assign(..) => { return true; }
        _ => { }
    }
    return false;
}


struct IdentExpr {
    name: Token;
    isGlobal: bool;
    origID: usize;
    type: &Type;
}
struct StructExpr {
    name: Token;
    context: StructInitContext;
}
struct CallExpr {
    span: Span;
    base: &ParsedExpr;
    args: ParsedExprList;
    retType: &Type;
    isUnion: bool;
}
union UnionExpr {
    Tuple(CallExpr),
    Struct(StructExpr),
    Empty,
}
struct ParsedExpr {
    ignored: bool;
    span: Span;
    data: ExprData;
    typeState: TCState;
}
func getID(this: &ParsedExpr) -> usize {
    return indexOf(&exprs, this);
}
func wrap(this: ParsedExpr) -> &ParsedExpr {
    push(&exprs, this);
    return last(&exprs);
}

func newParsedExpr(span: Span, data: ExprData) -> &ParsedExpr {
    return wrap(ParsedExpr {
        span: span,
        data: data
    });
}

func intoPointer(this: &ParsedExpr) -> usize {
    let unary = ParsedExpr {
        span: this.span,
        data: ExprData::Unary(UnaryExpr::Ref(this)),
    };
    return getID(wrap(unary));
}

func isLValue(this: &ParsedExpr) -> bool {
    match (this.data) {
        ExprData::Unary(UnaryExpr::Deref(_)) => { return true; }
        ExprData::Binary(BinaryExpr::Indexed(..)) => { return true; }
        ExprData::Binary(BinaryExpr::Dot(_, &ParsedExpr { _, _, rhs, .. })) => {
            match (rhs) {
                ExprData::Ident { .. } => { return true; }
                _ => { }
            }
        }
        ExprData::Ident { .. } => { return true; }
        _ => { }
    }
    return false;
}

// FIXME: Remove these isXYZ functions
func isBlank(this: &ParsedExpr) -> bool {
    return tag(&this.data) == tag(&ExprData::Blank);
}
func isIdentifier(this: &ParsedExpr) -> bool {
    return tag(&this.data) == tag(&ExprData::Ident);
}
func isLiteral(this: &ParsedExpr) -> bool {
    match (&this.data) {
        &ExprData::IntLit { .. } => { return true; }
        &ExprData::StrLit { .. } => { return true; }
        &ExprData::CharLit { .. } => { return true; }
        &ExprData::ArrayLit { .. } => { return true; }
        &ExprData::Null => { return true; }
        &ExprData::True => { return true; }
        &ExprData::False => { return true; }
        _ => { }
    }
    return false;
}

func isUnary(this: &ParsedExpr) -> bool {
    return tag(&this.data) == tag(&ExprData::Unary);
}

func isCall(this: &ParsedExpr) -> bool {
    return tag(&this.data) == tag(&ExprData::Call);
}

func isAssignment(this: &ParsedExpr) -> bool {
    match (&this.data) {
        &ExprData::Binary(BinaryExpr::Assign(..)) => { return true; }
        _ => { }
    }
    return false;
}

union Pattern {
    Wildcard,
    Number(Token),
    Ident(Token),
    Reference(&ParsedPattern),
    Struct(Token, ParsedPatternList),
    Path(Token, &ParsedPattern),
    Rest,
    Boolean(bool),
    Null,
}
struct ParsedPattern {
    ignored: bool;
    span: Span;
    data: Pattern;
}

func getID(this: &ParsedPattern) -> usize {
    return indexOf(&patterns, this);
}

func newParsedPattern(span: Span, pat: Pattern) -> &ParsedPattern {
    push(&patterns, ParsedPattern {
        ignored: ignoringNodes,
        span: span,
        data: pat
    });
    return last(&patterns);
}

func toString(this: &ParsedPattern) -> String {
    match (&this.data) {
        &Pattern::Rest => { return newStringFromStrLit(".."); }
        &Pattern::Wildcard => { return newStringFromStrLit("_"); }
        &Pattern::Boolean(true) => { return newStringFromStrLit("true"); }
        &Pattern::Boolean(false) => { return newStringFromStrLit("false"); }
        &Pattern::Null => { return newStringFromStrLit("null"); }
        &Pattern::Ident(ident) => { return toString(&ident.content); }
        &Pattern::Number(number) => { return toString(&number.content); }
        &Pattern::Reference(pat) => {
            let s = newStringFromStrLit("&");
            let _s = toString(pat);
            pushString(&s, &_s);
            drop(&_s);
            return s;
        }
        &Pattern::Struct(name, pats) => {
            let s = toString(&name.content);
            if (pats.length == 0) {
                pushStr(&s, " { }");
            } else {
                pushStr(&s, " { ");
                for (let i: usize = 0; i < pats.length; i = i + 1) {
                    let _s = toString(*at(&pats, i));
                    pushString(&s, &_s);
                    if (i != pats.length - 1) {
                        pushStr(&s, ", ");
                    }
                    drop(&_s);
                }
                pushStr(&s, " }");
            }
            return s;
        }
        &Pattern::Path(name, sub) => {
            let s = toString(&name.content);
            pushStr(&s, "::");
            let _s = toString(sub);
            pushString(&s, &_s);
            drop(&_s);
            return s;
        }
        unknown => {
            C::fprintf(stderr, "%s ParsedPattern.toString: Unknown tag %hhu!\n", FATAL_STR, tag(unknown));
            C::exit(2);
        }
    }
    unreachable("Exhaustive handling of pattern kinds in ParsedPattern.toString()");
}

