import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "./token.bufo";
import "./nodes.bufo";
import "./lexer.bufo";
import "../util/arena.bufo";
import "../middleend/types.bufo";
import "../middleend/checker.bufo";

struct VarDeclContext {
    name: Token;
    typeID: usize;
    exprID: usize;
    isComptime: bool;
}

// FIXME: This name is misleading, given that we also use it for function calls
struct ArrayContext {
    elemList: &usize;
    elemLength: usize;
    elemCapacity: usize;
    size: usize;
}

func addElement(this: &ArrayContext, elem: &ParsedExpr) {
    trace("ArrayContext.addElement");
    if (this.elemLength >= this.elemCapacity) {
        let newCap: usize = this.elemCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.elemList = realloc(this.elemList, newCap * sizeof usize);
        assert(this.elemList != null, "Could not resize elem list");
        this.elemCapacity = newCap;
    }
    this.elemList[this.elemLength] = getID(elem);
    this.elemLength = this.elemLength + 1;
}

func getElementAtIndex(this: &ArrayContext, index: usize) -> usize {
    assert(index < this.elemLength, "Out of bounds access in ArrayContext.getElementAtIndex");
    return this.elemList[index];
}

struct StructContext {
    fieldNames: &Token;
    fieldTypes: &usize;
    fieldLength: usize;
    fieldCapacity: usize;
    methods: &usize;
    methodLength: usize;
    methodCapacity: usize;
}
func addField(this: &StructContext, name: Token, typ: &ParsedTypeNode) {
    trace("StructContext.addField");
    if (this.fieldLength >= this.fieldCapacity) {
        let newCap: usize = this.fieldCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.fieldNames = realloc(this.fieldNames, newCap * sizeof Token);
        this.fieldTypes = realloc(this.fieldTypes, newCap * sizeof usize);
        assert(this.fieldNames != null, "Could not resize field list");
        assert(this.fieldTypes != null, "Could not resize field list");
        this.fieldCapacity = newCap;
    }
    this.fieldNames[this.fieldLength] = name;
    this.fieldTypes[this.fieldLength] = getID(typ);
    this.fieldLength = this.fieldLength + 1;
}
func addMethod(this: &StructContext, method: &ParsedMethod) {
    trace("StructContext.addMethod");
    if (this.methodLength >= this.methodCapacity) {
        let newCap: usize = this.methodCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.methods = realloc(this.methods, newCap * sizeof usize);
        assert(this.methods != null, "Could not resize method list");
        this.methodCapacity = newCap;
    }
    this.methods[this.methodLength] = getID(method);
    this.methodLength = this.methodLength + 1;
}
func getFieldNameAtIndex(this: &StructContext, index: usize) -> Token {
    trace("StructContext.getFieldNameAtIndex");
    assert(index < this.fieldLength, "Out of bounds access in StructContext.getFieldNameAtIndex");
    return this.fieldNames[index];
}
func getFieldTypeAtIndex(this: &StructContext, index: usize) -> usize {
    trace("StructContext.getFieldTypeAtIndex");
    assert(index < this.fieldLength, "Out of bounds access in StructContext.getFieldTypeAtIndex");
    return this.fieldTypes[index];
}
func getMethodAtIndex(this: &StructContext, index: usize) -> usize {
    trace("StructContext.getMethodAtIndex");
    assert(index < this.methodLength, "Out of bounds access in StructContext.getMethodAtIndex");
    return this.methods[index];
}
func getFieldIndex(this: &StructContext, name: &SubStr) -> usize {
    trace("StructContext.getFieldIndex");
    for (let i: usize = 0; i < this.fieldLength; i = i + 1) {
        let f: Token = getFieldNameAtIndex(this, i);
        if (f.content.equals(name)) {
            return i;
        }
    }
    unreachable("Expected to find field index at this point");
}
func getFieldOffset(this: &StructContext, name: &SubStr) -> usize {
    trace("StructContext.getFieldOffset");
    let offset: usize = 0;
    for (let i: usize = 0; i < this.fieldLength; i = i + 1) {
        let f: Token = getFieldNameAtIndex(this, i);
        let _t: &ParsedTypeNode = at(&typeNodes, getFieldTypeAtIndex(this, i));
        assert(isSuccess(&_t.typeState), "Expected valid field type in getFieldOffset");
        let t: &Type = at(&types, getType(&_t.typeState));
        if (f.content.equals(name)) {
            return offset;
        }
        offset = offset + getSize(t);
    }
    unreachable("Expected to find field offset at this point");
}

struct StructInitContext {
    fieldNames: &Token;
    fieldExprs: &usize;
    fieldLength: usize;
    fieldCapacity: usize;
}
func addField(this: &StructInitContext, name: Token, expr: &ParsedExpr) {
    trace("StructInitContext.addField");
    if (this.fieldLength >= this.fieldCapacity) {
        let newCap: usize = this.fieldCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.fieldNames = realloc(this.fieldNames, newCap * sizeof Token);
        this.fieldExprs = realloc(this.fieldExprs, newCap * sizeof usize);
        assert(this.fieldNames != null, "Could not resize field list");
        assert(this.fieldExprs != null, "Could not resize field list");
        this.fieldCapacity = newCap;
    }
    this.fieldNames[this.fieldLength] = name;
    this.fieldExprs[this.fieldLength] = getID(expr);
    this.fieldLength = this.fieldLength + 1;
}
func getFieldNameAtIndex(this: &StructInitContext, index: usize) -> Token {
    trace("StructInitContext.getFieldNameAtIndex");
    assert(index < this.fieldLength, "Out of bounds access in StructInitContext.getFieldNameAtIndex");
    return this.fieldNames[index];
}
func getFieldExprAtIndex(this: &StructInitContext, index: usize) -> usize {
    trace("StructInitContext.getFieldExprAtIndex");
    assert(index < this.fieldLength, "Out of bounds access in StructInitContext.getFieldExprAtIndex");
    return this.fieldExprs[index];
}

struct ParamContext {
    paramNames: &Token;
    paramTypes: &usize;
    paramLength: usize;
    paramCapacity: usize;
    isVarArg: bool;
}
func addParameter(this: &ParamContext, name: Token, typ: &ParsedTypeNode) {
    trace("ParamContext.addParameter");
    if (this.paramLength >= this.paramCapacity) {
        let newCap: usize = this.paramCapacity * 2;
        if (newCap == 0) newCap = 1;
        this.paramNames = realloc(this.paramNames, newCap * sizeof Token);
        this.paramTypes = realloc(this.paramTypes, newCap * sizeof usize);
        assert(this.paramNames != null, "Could not resize param list");
        assert(this.paramTypes != null, "Could not resize param list");
        this.paramCapacity = newCap;
    }
    this.paramNames[this.paramLength] = name;
    this.paramTypes[this.paramLength] = getID(typ);
    this.paramLength = this.paramLength + 1;
}

func hasThis(this: &ParamContext) -> bool {
    if (this.paramLength == 0) return false;
    return getNameAtIndex(this, 0).content.equals(&comptime BUILD_A_KEYWORD("this"));
}

func getNameAtIndex(this: &ParamContext, index: usize) -> Token {
    trace("ParamContext.getNameAtIndex");
    assert(index < this.paramLength, "Out of bounds access in ParamContext.getNameAtIndex");
    return this.paramNames[index];
}
func getTypeAtIndex(this: &ParamContext, index: usize) -> usize {
    trace("ParamContext.getTypeAtIndex");
    assert(index < this.paramLength, "Out of bounds access in ParamContext.getTypeAtIndex");
    return this.paramTypes[index];
}

comptime ELSE_BIT: usize = pow2(20);
// condition is implicitly stored in ParsedStmt.expr
struct IfContext {
    thenBody: usize;
    elseBody: usize;
    hasElse: bool;
}

struct ForContext {
    init: usize;
    cond: usize;
    step: usize;
    body: usize;
}
