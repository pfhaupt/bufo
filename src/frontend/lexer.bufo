import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "./token.bufo";

func BUILD_A_KEYWORD(s: &char) -> SubStr {
    return SubStr {
        start: s,
        len: comptimeStrlen(s)
    };
}
comptime KEYWORD_LET: SubStr = BUILD_A_KEYWORD("let");
comptime KEYWORD_COMPTIME: SubStr = BUILD_A_KEYWORD("comptime");
comptime KEYWORD_FUNC: SubStr = BUILD_A_KEYWORD("func");
comptime KEYWORD_STRUCT: SubStr = BUILD_A_KEYWORD("struct");
comptime KEYWORD_ENUM: SubStr = BUILD_A_KEYWORD("enum");
comptime KEYWORD_UNION: SubStr = BUILD_A_KEYWORD("union");
comptime KEYWORD_RETURN: SubStr = BUILD_A_KEYWORD("return");
comptime KEYWORD_MODULE: SubStr = BUILD_A_KEYWORD("module");
comptime KEYWORD_IMPORT: SubStr = BUILD_A_KEYWORD("import");
comptime KEYWORD_IF: SubStr = BUILD_A_KEYWORD("if");
comptime KEYWORD_ELSE: SubStr = BUILD_A_KEYWORD("else");
comptime KEYWORD_WHILE: SubStr = BUILD_A_KEYWORD("while");
comptime KEYWORD_SIZEOF: SubStr = BUILD_A_KEYWORD("sizeof");
comptime KEYWORD_AS: SubStr = BUILD_A_KEYWORD("as");
comptime KEYWORD_FOR: SubStr = BUILD_A_KEYWORD("for");
comptime KEYWORD_BREAK: SubStr = BUILD_A_KEYWORD("break");
comptime KEYWORD_CONTINUE: SubStr = BUILD_A_KEYWORD("continue");
comptime KEYWORD_NULL: SubStr = BUILD_A_KEYWORD("null");
comptime KEYWORD_BLANK: SubStr = BUILD_A_KEYWORD("blank");
comptime KEYWORD_TRUE: SubStr = BUILD_A_KEYWORD("true");
comptime KEYWORD_FALSE: SubStr = BUILD_A_KEYWORD("false");
// REVIEW: Is this the final keyword we want to use?
comptime KEYWORD_CONFIG: SubStr = BUILD_A_KEYWORD("config");
comptime KEYWORD_MATCH: SubStr = BUILD_A_KEYWORD("match");
struct Lexer {
    fileID: usize;
    content: SubStr;
    ptr: usize;
    len: usize;
}

func isKeyword(this: &Lexer, word: &SubStr) -> bool {
    return equals(word, &KEYWORD_LET)
        || equals(word, &KEYWORD_FUNC)
        || equals(word, &KEYWORD_COMPTIME)
        || equals(word, &KEYWORD_STRUCT)
        || equals(word, &KEYWORD_ENUM)
        || equals(word, &KEYWORD_UNION)
        || equals(word, &KEYWORD_RETURN)
        || equals(word, &KEYWORD_MODULE)
        || equals(word, &KEYWORD_IMPORT)
        || equals(word, &KEYWORD_IF)
        || equals(word, &KEYWORD_ELSE)
        || equals(word, &KEYWORD_WHILE)
        || equals(word, &KEYWORD_SIZEOF)
        || equals(word, &KEYWORD_AS)
        || equals(word, &KEYWORD_FOR)
        || equals(word, &KEYWORD_BREAK)
        || equals(word, &KEYWORD_CONTINUE)
        || equals(word, &KEYWORD_NULL)
        || equals(word, &KEYWORD_BLANK)
        || equals(word, &KEYWORD_TRUE)
        || equals(word, &KEYWORD_FALSE)
        || equals(word, &KEYWORD_CONFIG)
        || equals(word, &KEYWORD_MATCH);
}

func escapeCharSequence(this: &Lexer, tmp: &SubStr, s: &String, len: &usize) -> char {
    let escaped: bool = false;
    let extraOffset: usize = 0;
    let c: char = getChar(tmp, 0);
    if (c == '\\') {
        c = getChar(tmp, 1);
        if (c == 'n') {
            pushChar(s, '\n');
        } else if (c == 'r') {
            pushChar(s, '\r');
        } else if (c == 't') {
            pushChar(s, '\t');
        } else if (c == '0') {
            pushChar(s, '\0');
        } else if (c == '\\') {
            pushChar(s, '\\');
        } else if (c == '\'') {
            pushChar(s, '\'');
        } else if (c == '\"') {
            pushChar(s, '\"');
        } else if (c == 'x') {
            let lower: char = getChar(tmp, 2);
            let upper: char = getChar(tmp, 3);
            assert(isHexDigit(lower), "Expected hex digits for \\x");
            assert(isHexDigit(upper), "Expected hex digits for \\x");
            let byte: char = (asHex(lower) * 16 + asHex(upper)) as char;
            pushChar(s, byte);
            extraOffset = 2;
        } else {
            let t: Token = newToken(this.fileID, &newSubStr(&c, 0, 1), this.ptr + 1, TOKEN_IDENT);
            let loc: String = toString(&t.span);
            fprintf(stderr, "%s: %s: Can't escape character `%c`.\n", loc.buffer, ERR_STR, c);
            drop(&loc);
            exit(1);
        }
        escaped = true;
    } else {
        pushChar(s, c);
    }
    let s: usize = 1;
    if (escaped) {
        s = 2;
    }
    s = s + extraOffset;
    *len = *len + s;
    *tmp = substring(tmp, s, tmp.len);
    return getChar(tmp, 0);
}

func advance(this: &Lexer) -> bool {
    this.ptr = this.ptr + 1;
    this.content = substring(&this.content, 1, this.content.len);
    return this.ptr >= this.len;
}
func peek(this: &Lexer) -> Token {
    let ptr: usize = this.ptr;
    let content: SubStr = this.content;
    let len: usize = this.len;
    let tkn: Token = __next(this, true);
    this.ptr = ptr;
    this.content = content;
    this.len = len;
    return tkn;
}
func next(this: &Lexer) -> Token {
    return __next(this, false);
}
func __next(this: &Lexer, peek: bool) -> Token {
    if (this.ptr == this.len) {
        return newTokenEOF(this.fileID, this.ptr);
    }
    let currChar: char = getChar(&this.content, 0);
    while (isWhitespace(currChar)) {
        if (advance(this)) {
            return newTokenEOF(this.fileID, this.ptr);
        }
        currChar = getChar(&this.content, 0);
    }
    if (isAlphabetic(currChar) || currChar == '_') {
        let len: usize = 0;
        let tmp: SubStr = this.content;
        let c: char = getChar(&tmp, 0);
        while (isNumeric(c) || isAlphabetic(c) || c == '_') {
            len = len + 1;
            tmp = substring(&tmp, 1, tmp.len);
            c = getChar(&tmp, 0);
        }
        let word: SubStr = substring(&this.content, 0, len);
        this.ptr = this.ptr + len;
        this.content = tmp;
        if (equals(&word, &comptime BUILD_A_KEYWORD("_"))) {
            return newToken(this.fileID, &word, this.ptr - len, TOKEN_WILDCARD);
        }
        if (isKeyword(this, &word)) {
            return newToken(this.fileID, &word, this.ptr - len, TOKEN_KEYWORD);
        }
        return newToken(this.fileID, &word, this.ptr - len, TOKEN_IDENT);
    } else if (isNumeric(currChar)) {
        let len: usize = 0;
        let tmp: SubStr = this.content;
        while (isNumeric(getChar(&tmp, 0))) {
            len = len + 1;
            tmp = newSubStr(tmp.start, 1, tmp.len);
        }
        let word: SubStr = substring(&this.content, 0, len);
        this.ptr = this.ptr + len;
        this.content = tmp;
        return newToken(this.fileID, &word, this.ptr - len, TOKEN_INT_LITERAL);
    } else if (currChar == '"') {
        advance(this);
        if (this.content.len == 0) {
            todo_with_msg("unbalanced \"");
        }
        // When peeking we don't care about the precise contents of the String Literal
        // So we don't need to heap allocate anything just now
        if (peek) {
            return newToken(this.fileID, &newSubStr("\"", 0, 1), this.ptr - 1, TOKEN_STRING_LITERAL);
        }
        let len: usize = 0;
        let s: String = newString();
        let c: char = getChar(&this.content, 0);
        while (c != '"') {
            let l: usize = 0;
            c = escapeCharSequence(this, &this.content, &s, &l);
            this.ptr = this.ptr + l;
            len = len + l;
        }
        let word: SubStr = substring(&s, 0, s.length);
        advance(this);
        return newToken(this.fileID, &word, this.ptr - len, TOKEN_STRING_LITERAL);
    } else if (currChar == '\'') {
        advance(this);
        if (this.content.len == 0) {
            todo_with_msg("unbalanced \'");
        }
        let len: usize = 0;
        let s: String = newString();
        let c: char = getChar(&this.content, 0);
        while (c != '\'') {
            let l: usize = 0;
            c = escapeCharSequence(this, &this.content, &s, &l);
            this.ptr = this.ptr + l;
            len = len + l;
        }
        let word: SubStr = substring(&s, 0, s.length);
        if (word.len != 1) {
            todo_with_msg("invalid char literal");
        }
        advance(this);
        return newToken(this.fileID, &word, this.ptr - len, TOKEN_CHAR_LITERAL);
    } else if (currChar == '(') {
        advance(this);
        return newToken(this.fileID, &newSubStr("(", 0, 1), this.ptr - 1, TOKEN_PAREN_OPEN);
    } else if (currChar == ')') {
        advance(this);
        return newToken(this.fileID, &newSubStr(")", 0, 1), this.ptr - 1, TOKEN_PAREN_CLOSE);
    } else if (currChar == '{') {
        advance(this);
        return newToken(this.fileID, &newSubStr("{", 0, 1), this.ptr - 1, TOKEN_CURLY_OPEN);
    } else if (currChar == '}') {
        advance(this);
        return newToken(this.fileID, &newSubStr("}", 0, 1), this.ptr - 1, TOKEN_CURLY_CLOSE);
    } else if (currChar == '[') {
        advance(this);
        return newToken(this.fileID, &newSubStr("[", 0, 1), this.ptr - 1, TOKEN_SQUARE_OPEN);
    } else if (currChar == ']') {
        advance(this);
        return newToken(this.fileID, &newSubStr("]", 0, 1), this.ptr - 1, TOKEN_SQUARE_CLOSE);
    } else if (currChar == '<') {
        advance(this);
        currChar = getChar(&this.content, 0);
        if (currChar == '=') {
            advance(this);
            return newToken(this.fileID, &newSubStr("<=", 0, 2), this.ptr - 2, TOKEN_LESS_THAN_EQUAL);
        } else {
            return newToken(this.fileID, &newSubStr("<", 0, 1), this.ptr - 1, TOKEN_LESS_THAN);
        }
    } else if (currChar == '>') {
        advance(this);
        currChar = getChar(&this.content, 0);
        if (currChar == '=') {
            advance(this);
            return newToken(this.fileID, &newSubStr(">=", 0, 2), this.ptr - 2, TOKEN_GREATER_THAN_EQUAL);
        } else {
            return newToken(this.fileID, &newSubStr(">", 0, 1), this.ptr - 1, TOKEN_GREATER_THAN);
        }
    } else if (currChar == ';') {
        advance(this);
        return newToken(this.fileID, &newSubStr(";", 0, 1), this.ptr - 1, TOKEN_SEMI_COLON);
    } else if (currChar == ':') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == ':') {
            advance(this);
            return newToken(this.fileID, &newSubStr("::", 0, 2), this.ptr - 2, TOKEN_COLON_DOUBLE);
        } else {
            return newToken(this.fileID, &newSubStr(":", 0, 1), this.ptr - 1, TOKEN_COLON_SINGLE);
        }
    } else if (currChar == '=') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '=') {
            advance(this);
            return newToken(this.fileID, &newSubStr("==", 0, 2), this.ptr - 2, TOKEN_EQUAL_DOUBLE);
        } else if (this.ptr < this.len && getChar(&this.content, 0) == '>') {
            advance(this);
            return newToken(this.fileID, &newSubStr("=>", 0, 2), this.ptr - 2, TOKEN_ARROW_THICK);
        } else {
            return newToken(this.fileID, &newSubStr("=", 0, 1), this.ptr - 1, TOKEN_EQUAL_SINGLE);
        }
    } else if (currChar == '&') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '&') {
            advance(this);
            return newToken(this.fileID, &newSubStr("&&", 0, 2), this.ptr - 2, TOKEN_AMPERSAND_DOUBLE);
        } else {
            return newToken(this.fileID, &newSubStr("&", 0, 1), this.ptr - 1, TOKEN_AMPERSAND_SINGLE);
        }
    } else if (currChar == '_') {
        advance(this);
        return newToken(this.fileID, &newSubStr("_", 0, 1), this.ptr - 1, TOKEN_UNDERSCORE);
    } else if (currChar == '.') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '.') {
            advance(this);
            if (this.ptr < this.len && getChar(&this.content, 0) == '.') {
                advance(this);
                return newToken(this.fileID, &newSubStr("...", 0, 3), this.ptr - 3, TOKEN_DOTDOTDOT);
            }
            return newToken(this.fileID, &newSubStr("..", 0, 2), this.ptr - 2, TOKEN_DOTDOT);
        }
        return newToken(this.fileID, &newSubStr(".", 0, 1), this.ptr - 1, TOKEN_DOT);
    } else if (currChar == ',') {
        advance(this);
        return newToken(this.fileID, &newSubStr(",", 0, 1), this.ptr - 1, TOKEN_COMMA);
    } else if (currChar == '+') {
        advance(this);
        return newToken(this.fileID, &newSubStr("+", 0, 1), this.ptr - 1, TOKEN_PLUS_SINGLE);
    } else if (currChar == '*') {
        advance(this);
        return newToken(this.fileID, &newSubStr("*", 0, 1), this.ptr - 1, TOKEN_ASTERISK_SINGLE);
    } else if (currChar == '@') {
        advance(this);
        return newToken(this.fileID, &newSubStr("@", 0, 1), this.ptr - 1, TOKEN_AT);
    } else if (currChar == '%') {
        advance(this);
        return newToken(this.fileID, &newSubStr("%", 0, 1), this.ptr - 1, TOKEN_PERCENT);
    } else if (currChar == '^') {
        advance(this);
        return newToken(this.fileID, &newSubStr("^", 0, 1), this.ptr - 1, TOKEN_CARET);
    } else if (currChar == '|') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '|') {
            advance(this);
            return newToken(this.fileID, &newSubStr("||", 0, 2), this.ptr - 2, TOKEN_PIPE_DOUBLE);
        } else {
            return newToken(this.fileID, &newSubStr("|", 0, 1), this.ptr - 1, TOKEN_PIPE_SINGLE);
        }
    } else if (currChar == '-') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '>') {
            advance(this);
            return newToken(this.fileID, &newSubStr("->", 0, 2), this.ptr - 2, TOKEN_ARROW_THIN);
        } else {
            return newToken(this.fileID, &newSubStr("-", 0, 1), this.ptr - 1, TOKEN_MINUS_SINGLE);
        }
    } else if (currChar == '!') {
        advance(this);
        if (this.ptr < this.len && getChar(&this.content, 0) == '=') {
            advance(this);
            return newToken(this.fileID, &newSubStr("!=", 0, 2), this.ptr - 2, TOKEN_NOT_EQUAL);
        } else {
            return newToken(this.fileID, &newSubStr("!", 0, 1), this.ptr - 1, TOKEN_BANG);
        }
    } else if (currChar == '/' && getChar(&this.content, 1) == '*') {
        while (true) {
            if (advance(this)) {
                return newTokenEOF(this.fileID, this.ptr);
            }
            currChar = getChar(&this.content, 0);
            let next: char = getChar(&this.content, 1);
            if (currChar == '*' && next == '/') {
                break;
            }
        }
        advance(this); // *
        advance(this); // /
        return next(this);
    } else if (currChar == '/') {
        if (getChar(&this.content, 1) == '/') {
            while (currChar != '\n') {
                if (advance(this)) {
                    return newTokenEOF(this.fileID, this.ptr);
                }
                currChar = getChar(&this.content, 0);
            }
            return next(this);
        } else {
            advance(this);
            return newToken(this.fileID, &newSubStr("/", 0, 1), this.ptr - 1, TOKEN_SLASH_SINGLE);
        }
    } else {
        let t: Token = newToken(this.fileID, &newSubStr(&currChar, 0, 1), this.ptr + 1, TOKEN_IDENT);
        let loc: String = toString(&t.span);
        fprintf(stderr, "%s: %s: Unknown character `%c`.\n", loc.buffer, ERR_STR, currChar);
        drop(&loc);
        exit(1);
    }
}

func newLexer(fileID: usize, content: SubStr) -> Lexer {
    return Lexer {
        content: content,
        fileID: fileID,
        ptr: 0,
        len: content.len
    };
}
