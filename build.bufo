import "prelude.bufo";
import "libc.bufo";
import "cmd.bufo";
import "string_buf.bufo";
import "string.bufo";

@os(WINDOWS) import "windows.bufo";

let DEPENDENCIES: [&char; 13] = [
    "./build.bufo",
    "./std/cmd.bufo",
    "./std/string_buf.bufo",
    "./std/linux.bufo",
    "./std/windows.bufo",
    "./std/winapi/constants.bufo",
    "./std/winapi/functions.bufo",
    "./std/winapi/structs.bufo",
    "./std/posix/constants.bufo",
    "./std/posix/functions.bufo",
    "./std/posix/structs.bufo",
    "./std/prelude.bufo",
    "./std/libc.bufo"
];

func buildMyself(argc: i32, argv: &&char) -> bool {
    let myName: &char = argv[0];
    let lastBuild: usize = getLastModified(myName);
    let needed: bool = false;
    for (let i: usize = 0; i < 13; i = i + 1) {
        let lastSource: usize = getLastModified(DEPENDENCIES[i]);
        if (lastSource >= lastBuild) {
            printf("[REBUILD] File %s was changed.\n", DEPENDENCIES[i]);
            needed = true;
        }
    }
    if (needed) {
        let dst: String = newStringFromStrLit(myName);
        pushStr(&dst, ".old");
        {
            // mv ./build.exe ./build.exe.old
            if (!moveFile(myName, dst.buffer)) return false;
        }
        {
            // ./bufo.exe ./build.bufo
            let buildCmd: Cmd = newCmd();
            buildCmd.log = true;
            @os(WINDOWS) add(&buildCmd, "bufo.exe");
            @os(LINUX) add(&buildCmd, "./bufo.exe");
            add(&buildCmd, "./build.bufo");
            add(&buildCmd, "-o");
            add(&buildCmd, "./build.exe");
            if (!runSync(&buildCmd)) {
                printf("[REBUILD] Recompiling myself failed, restoring old executable.\n");
                assert(moveFile(dst.buffer, myName));
                return false;
            }
        }
        {
            // ./build.exe <args>
            let newCmd: Cmd = newCmdFromStrLit(myName);
            newCmd.log = true;
            for (let i: i32 = 1; i < argc; i = i + 1) {
                add(&newCmd, argv[i as usize]);
            }
            if (!runSync(&newCmd)) return false;
        }
        // Old script can exit here, the above call to the new version handles everything else
        exit(0);
    }
    return true;
}

func buildCompiler() -> bool {
    @os(WINDOWS) let cmd: Cmd = newCmdFromStrLit("bufo.exe");
    @os(LINUX) let cmd: Cmd = newCmdFromStrLit("./bufo.exe");
    cmd.log = true;
    add(&cmd, "./src/bufo.bufo");
    add(&cmd, "-o");
    add(&cmd, "./bufo1.exe");
    if (!runSync(&cmd)) return false;
    cmd.buf.length = 0;
    add(&cmd, "mv");
    add(&cmd, "./bufo1.exe");
    add(&cmd, "./bufo.exe");
    return runSync(&cmd);
}

func tryLLVM() -> bool {
    let cmd: Cmd = newCmdFromStrLit("python llvm.py");
    cmd.log = true;
    return runSync(&cmd);
}

func main(argc: i32, argv: &&char) -> i32 {
    if (!buildMyself(argc, argv)) return 1;
    if (!tryLLVM()) return 1;
    if (!buildCompiler()) return 1;
    if (!buildCompiler()) return 1;
    return 0;
}
