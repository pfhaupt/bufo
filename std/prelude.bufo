import "substr.bufo";

func tag(union: Any) -> u8 {
    return *(union as &u8);
}

func comptimeSubStr(s: &char) -> SubStr {
    return SubStr {
        start: s,
        len: comptimeStrlen(s)
    };
}
comptime OS_WINDOWS: SubStr = comptimeSubStr("WINDOWS");
comptime OS_LINUX: SubStr = comptimeSubStr("LINUX");

comptime FATAL_STR: &char = "\x1b[95m[FATAL]\x1b[0m";
comptime ERR_STR: &char = "\x1b[91merror\x1b[0m";
comptime WARN_STR: &char = "\x1b[93mwarning\x1b[0m";
comptime NOTE_STR: &char = "\x1b[92mnote\x1b[0m";

comptime U32_MAX: u32 = 0 - 1;

let stdin: Any = null;
let stdout: Any = null;
let stderr: Any = null;
// Ensure that we can always use the handles at compile time
let _setup = func () -> bool {
    (comptime setupStdHandles());
    return true;
};
func setupStdHandles() {
    if (stdin == null) stdin = C::fdopen(0, "a");
    _assert(stdin != null, "Could not initialize STDIN!");
    if (stdout == null) stdout = C::fdopen(1, "a");
    _assert(stdout != null, "Could not initialize STDOUT!");
    if (stderr == null) stderr = C::fdopen(2, "a");
    _assert(stderr != null, "Could not initialize STDERR!");
}

// libc for now is also part of the prelude
// Eventually, we'd like to use our own wrappers
import "libc.bufo";

func comptimeStrlen(str: &char) -> usize {
    let len: usize = 0;
    while (*(str + len) != '\0') len = len + 1;
    return len;
}

func pow2(exp: usize) -> usize {
    let result: usize = 1;
    while (exp > 0) {
        result = result * 2;
        exp = exp - 1;
    }
    return result;
}

func pow(base: usize, exp: usize) -> usize {
    let result: usize = 1;
    while (exp > 0) {
        result = result * base;
        exp = exp - 1;
    }
    return result;
}

func shiftLeft(base: usize, bits: usize) -> usize {
    while (bits > 0) {
        base = base * 2;
        bits = bits - 1;
    }
    return base;
}

func shiftRight(base: usize, bits: usize) -> usize {
    while (bits > 0) {
        base = base / 2;
        bits = bits - 1;
    }
    return base;
}
func bitCount(val: usize) -> usize {
    let r: usize = 0;
    while (val > 0) {
        val = shiftRight(val, 1);
        r = r + 1;
    }
    return r;
}

func getChar(s: &char, index: usize) -> char {
    let _idk: Any = s;
    let _ch: &char = _idk;
    let c: char = *(_ch + index);
    return c;
}

func isNumeric(ch: char) -> bool {
    let _u8 = ch as u8;
    return (_u8 >= 48) && (_u8 <= 57);
}

func isAlphabetic(ch: char) -> bool {
    let _u8 = ch as u8;
    return (_u8 >= 65) && (_u8 <= 90) || (_u8 >= 97) && (_u8 <= 122);
}

func asHex(ch: char) -> u8 {
    assert(isHexDigit(ch), "can't convert non-hex value to hex");
    let v: u8 = 0;
    if (isNumeric(ch)) v = ch as u8 - 48;
    else if (ch as u8 >= 65 && ch as u8 <= 70) v = ch as u8 - 55;
    else if (ch as u8 >= 97 && ch as u8 <= 102) v = ch as u8 - 87;
    assert(v < 16, "hex out of bounds");
    return v;
}

func isHexDigit(ch: char) -> bool {
    return isNumeric(ch) || (ch as u8 >= 65 && ch as u8 <= 70) || (ch as u8 >= 97 && ch as u8 <= 102);
}

func isWhitespace(ch: char) -> bool {
    return ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t';
}

func isAlphanumeric(ch: char) -> bool {
    return isAlphabetic(ch) || isNumeric(ch);
}

func isAsciiUppercase(ch: char) -> bool {
    return ch as u8 >= 65 && ch as u8 <= 90;
}

// Internal Runtime Errors
@noreturn func index_oob(msg: &char, index: i64) {
    setupStdHandles();
    C::fprintf(stderr, msg, index);
    C::exit(1);
}

func assert(cond: bool) {
    setupStdHandles();
    if (!cond) {
        if (stderr == null) {
            C::printf("ASSERTION FAILED\n");
            C::printf("%s Could not print to STDERR because STDERR is NULL!\n", FATAL_STR);
        } else {
            C::fprintf(stderr, "ASSERTION FAILED\n");
        }
        C::exit(1);
    }
}
func _assert(cond: bool, msg: &char) {
    if (!cond) {
        if (stderr == null) {
            C::printf("ASSERTION FAILED: %s\n", msg);
            C::printf("%s Could not print to STDERR because STDERR is NULL!\n", FATAL_STR);
        } else {
            C::fprintf(stderr, "ASSERTION FAILED: %s\n", msg);
        }
        C::exit(1);
    }
}

func assert(cond: bool, msg: &char) {
    setupStdHandles();
    if (!cond) {
        if (stderr == null) {
            C::printf("ASSERTION FAILED: %s\n", msg);
            C::printf("%s Could not print to STDERR because STDERR is NULL!\n", FATAL_STR);
        } else {
            C::fprintf(stderr, "ASSERTION FAILED: %s\n", msg);
        }
        C::exit(1);
    }
}

@noreturn func unreachable() {
    unreachable("Explicit call to unreachable()");
}

@noreturn func unreachable(msg: &char) {
    setupStdHandles();
    if (stderr == null) {
        C::printf("%s Entered unreachable code: %s", FATAL_STR, msg);
        C::printf("%s Could not print to STDERR because STDERR is NULL!\n", FATAL_STR);
    } else {
        C::fprintf(stderr, "%s Entered unreachable code: %s\n", FATAL_STR, msg);
    }
    C::exit(1);
}

@noreturn func todo_with_msg(msg: &char) {
    setupStdHandles();
    if (stderr == null) {
        C::printf("TODO: %s\n", msg);
        C::printf("%s Could not print to STDERR because STDERR is NULL!\n", FATAL_STR);
    } else {
        C::fprintf(stderr, "TODO: %s\n", msg);
    }
    C::exit(1);
}

let debug = disabled;
let trace = disabled;

func disabled(msg: &char) { }
func debug_active(msg: &char) {
    C::printf("[DEBUG] %s\n", msg);
}
func trace_active(msg: &char) {
    C::printf("[TRACE] %s\n", msg);
}
comptime PRINT_WARNING: bool = true;
func warning(msg: &char) {
    if (!PRINT_WARNING) return;
    C::fprintf(stderr, "\x1b[93m[WARNING]\x1b[0m %s\n", msg);
}
