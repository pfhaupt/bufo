// All libc functions are unsafe, because C-compliance is not guaranteed yet.

// TODO: Implement safe wrapper for everything :^)

// Windows is stupid :^)
func fdopen(fd: i32, mode: &char) -> Any {
    return _fdopen(fd, mode);
}
extern _fdopen(fd: i32, mode: &char) -> Any;
extern _fullpath(absPath: &char, relPath: &char, maxLength: i32) -> &char;

// extern fdopen(fd: i32, mode: &char) -> Any;

// Strings
extern strlen(string: &char) -> usize;
extern strcmp(s1: &char, s2: &char) -> i32;
extern strchr(s: &char, c: char) -> &char;

// Memory
extern malloc(bytes: usize) -> Any;
extern calloc(num: usize, size: usize) -> Any;
extern realloc(ptr: Any, new_size: usize) -> Any;
extern free(ptr: Any);
extern memcpy(dest: Any, src: Any, count: usize) -> Any;
extern memcmp(lhs: Any, rhs: Any, count: usize) -> i32;
extern memset(s: Any, b: i32, count: usize) -> Any;

// File IO
extern fopen(filename: &char, mode: &char) -> Any;
// FIXME: Any ignores Mutability :^) We should probably only write to mutable buffers tho...
extern fread(buffer: Any, size: usize, count: usize, stream: Any) -> usize;
extern fwrite(buffer: Any, size: usize, count: usize, stream: Any) -> usize;
extern fclose(stream: Any) -> i32;
extern fprintf(stream: Any, msg: &char, ...);

extern snprintf(buffer: Any, size: usize, format: &char, ...) -> usize;

// Console IO
extern printf(msg: &char, ...) -> usize;
extern putchar(ch: char) -> char;
extern puts(s: &char) -> usize;

// Process Control
extern exit(code: i32);
