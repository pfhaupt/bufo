import "prelude.bufo";
import "libc.bufo";
import "./substr.bufo";
import "./string.bufo";
import "./cmd.bufo";
import "./posix/structs.bufo";
import "./posix/functions.bufo";
import "./posix/constants.bufo";

struct Handle {
    ptr: usize;
}

comptime INVALID_HANDLE: Handle = Handle { ptr: 18446744073709551615 };

func getLastModified(filePath: &char) -> usize {
    let statbuf: Stat = blank;

    if (stat(filePath, &statbuf) < 0) {
        // NOTE: if output does not exist it 100% must be rebuilt
        if (*errno() == ENOENT) return 0;
        fprintf(stderr, "[ERROR] Could not get time of %s: %#010x\n", filePath, strerror(*errno()));
        return 0;
    }
    return statbuf.st_mtime as usize;
}

func waitForProcess(proc: Handle) -> bool {
    if (proc.ptr == INVALID_HANDLE.ptr) return false;
    while (true) {
        let wstatus: i32 = 0;
        if (waitpid(proc, &wstatus, 0) < 0) {
            fprintf(stderr, "[ERROR] Could not wait on command (pid %d): %s\n", proc, strerror(*errno()));
            return false;
        }

        if (WIFEXITED(wstatus)) {
            let exit_status: i32 = WEXITSTATUS(wstatus);
            if (exit_status != 0) {
                fprintf(stderr, "[ERROR] Command exited with exit code %d\n", exit_status);
                return false;
            }
            break;
        }

        if (WIFSIGNALED(wstatus)) {
            fprintf(stderr, "[ERROR] Command process was terminated by %s\n", strsignal(WTERMSIG(wstatus)));
            return false;
        }
    }
    return true;
}

func runCmdSync(cmd: Cmd) -> bool {
    let proc: Handle = runCmdAsync(cmd);
    if (proc.ptr == INVALID_HANDLE.ptr) return false;
    return waitForProcess(proc);
}

func runCmdAsync(cmd: Cmd) -> Handle {
    let cpid: i32 = fork();
    if (cpid < 0) {
        fprintf(stderr, "[ERROR] Could not fork child process: %s\n", strerror(*errno()));
        return INVALID_HANDLE;
    }

    if (cpid == 0) {
        let str: String = toString(&cmd);
        pushChar(&str, '\0');
        printf("[CMD] %s\n", str.buffer);

        let progName: String = toString(&cmd.buf.data[0]);
        let args: &&char = asCharPtrs(&cmd);
        if (execvp(progName.buffer as &char, args) < 0) {
            fprintf(stderr, "[ERROR] Could not exec child process: %s\n", strerror(*errno()));
            exit(1);
        }
        unreachable("execvp");
    }
    return Handle {
        ptr: cpid as usize
    };
}
