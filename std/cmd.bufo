import "prelude.bufo";
import "libc.bufo";
import "string_buf.bufo";
import "string.bufo";
import "substr.bufo";

@os(WINDOWS) import "winapi/structs.bufo";
@os(WINDOWS) import "windows.bufo";

@os(LINUX) import "./linux.bufo";

struct Cmd {
    log: bool;
    buf: StringBuffer;
}

func add(this: &Cmd, arg: &char) {
    add(&this.buf, newSubStrOfStrLit(arg));
}
func addSubStr(this: &Cmd, arg: SubStr) {
    add(&this.buf, arg);
}
func addMany(this: &Cmd, args: StringBuffer) {
    extend(&this.buf, &args);
}
func runSync(this: &Cmd) -> bool {
    return runCmdSync(*this);
}
func runAsync(this: &Cmd) -> Handle {
    return runCmdAsync(*this);
}
func toString(this: &Cmd) -> String {
    return toCmdString(&this.buf);
}
func asCharPtrs(this: &Cmd) -> &&char {
    let _any: Any = calloc(this.buf.length + 1, sizeof &char);
    assert(_any != null);
    let _mut: &&char = _any as &&char;
    for (let i: usize = 0; i < this.buf.length; i = i + 1) {
        let elem: String = toString(this.buf.data + i * sizeof SubStr);
        *(_mut + i * sizeof &char) = elem.buffer as &char;
    }
    return _any as &&char;
}

func newCmd() -> Cmd {
    return Cmd {
        buf: newStringBuffer()
    };
}

func newCmdFromStrLit(command: &char) -> Cmd {
    let cmd: Cmd = newCmd();
    let pos: usize = 0;
    let len: usize = strlen(command);
    while (pos < len) {
        let nextSpace: &char = strchr(command, ' ');
        if (nextSpace == null) break;
        let offset: usize = nextSpace - command;
        let substr: SubStr = newSubStr(command, 0, offset);
        addSubStr(&cmd, substr);
        command = command + offset + 1;
        pos = pos + offset + 1;
    }
    if (pos < len) {
        // Rest of command, for example `help` in `cargo help`
        let rest: SubStr = newSubStr(command, 0, strlen(command));
        addSubStr(&cmd, rest);
    }
    return cmd;
}

func moveFile(from: &char, to: &char) -> bool {
    let moveCmd: Cmd = newCmdFromStrLit("mv");
    add(&moveCmd, from);
    add(&moveCmd, to);
    return runSync(&moveCmd);
}

func deleteFile(path: &char) -> bool {
    let delCmd: Cmd = newCmdFromStrLit("rm");
    add(&delCmd, path);
    return runSync(&delCmd);
}
