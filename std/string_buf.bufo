import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
comptime INITIAL_STRINGBUFFER_CAP: usize = 16;

struct StringBuffer {
    data: &SubStr;
    length: usize;
    capacity: usize;
}

func resize(this: &StringBuffer, newCap: usize) {
    let _new: Any = realloc(this.data, newCap * sizeof SubStr);
    assert(_new != null);
    this.data = _new as &SubStr;
    this.capacity = newCap;
}
func add(this: &StringBuffer, str: SubStr) {
    if (this.length >= this.capacity) resize(this, 2 * this.capacity);
    *(this.data + this.length * sizeof SubStr) = str;
    this.length = this.length + 1;
}
func getNthAsCharPtr(this: &StringBuffer, index: usize) -> &char {
    assert(index < this.length, "Out of bounds access in StringBuf.getNthAsCharPtr()");
    return (*(this.data + index * sizeof SubStr)).start;
}
func extend(this: &StringBuffer, other: &StringBuffer) {
    for (let i: usize = 0; i < other.length; i = i + 1) {
        add(this, *(other.data + i * sizeof SubStr));
    }
}
func toCmdString(this: &StringBuffer) -> String {
    let s: String = newString();
    for (let i: usize = 0; i < this.length; i = i + 1) {
        let str: SubStr = *(this.data + i * sizeof SubStr);
        if (hasSpace(&str)) {
            pushChar(&s, '"');
            pushSubStr(&s, &str);
            pushChar(&s, '"');
        } else {
            pushSubStr(&s, &str);
        }
        if (i != this.length - 1) pushChar(&s, ' ');
    }
    return s;
}

func newStringBuffer() -> StringBuffer {
    let _bfr: Any = calloc(INITIAL_STRINGBUFFER_CAP, sizeof SubStr);
    let _data: &SubStr = _bfr as &SubStr;
    return StringBuffer {
        data: _data,
        length: 0,
        capacity: INITIAL_STRINGBUFFER_CAP
    };
}
