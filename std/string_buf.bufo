import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
comptime INITIAL_STRINGBUFFER_CAP: usize = 16;

struct StringBuffer {
    data: &SubStr;
    length: usize;
    capacity: usize;

    func resize(&this, newCap: usize) {
        let _new: Any = realloc(this.data, newCap * sizeof SubStr);
        assert(_new != null);
        this.data = &*_new;
        this.capacity = newCap;
    }
    func add(&this, str: SubStr) {
        if (this.length >= this.capacity) this.resize(2 * this.capacity);
        *(this.data + this.length * sizeof SubStr) = str;
        this.length = this.length + 1;
    }
    func getNthAsCharPtr(&this, index: usize) -> &char {
        assert_with_msg(index < this.length, "Out of bounds access in StringBuf.getNthAsCharPtr()");
        return (*(this.data + index * sizeof SubStr)).start;
    }
    func extend(&this, other: &StringBuffer) {
        for (let i: usize = 0; i < other.length; i = i + 1) {
            this.add(*(other.data + i * sizeof SubStr));
        }
    }
    func toCmdString(&this) -> String {
        let s: String = newString();
        for (let i: usize = 0; i < this.length; i = i + 1) {
            let str: SubStr = *(this.data + i * sizeof SubStr);
            if (str.hasSpace()) {
                s.pushChar('"');
                s.pushSubStr(&str);
                s.pushChar('"');
            } else {
                s.pushSubStr(&str);
            }
            if (i != this.length - 1) s.pushChar(' ');
        }
        return s;
    }
}

func newStringBuffer() -> StringBuffer {
    let _bfr: Any = calloc(INITIAL_STRINGBUFFER_CAP, sizeof SubStr);
    let _data: &SubStr = &*_bfr;
    return StringBuffer {
        data: _data,
        length: 0,
        capacity: INITIAL_STRINGBUFFER_CAP
    };
}
