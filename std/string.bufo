import "libc.bufo";
import "prelude.bufo";
import "substr.bufo";

let HEX_CHAR: [char; 16] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
struct String {
    buffer: &char;
    length: usize;
    capacity: usize;
}

func hash(this: &String) -> usize {
    let hash: usize = 5381;
    for (let i: usize = 0; i < this.length; i = i + 1) {
        hash = (shiftLeft(hash, 5) + hash) + (getChar(this, i) as usize);
    }
    return hash;
}

func toAbsolutePath(this: &String) -> String {
    let buf: &char = C::calloc(1024, 1);
    assert(buf != null);
    @os(WINDOWS) let abs: &char = C::_fullpath(buf, this.buffer, 1024);
    @os(WINDOWS) assert(abs != null, "Could not get absolute path");
    @os(LINUX) let abs: &char = C::realpath(this.buffer, buf);
    let s: String = newStringFromStrLit(buf);
    C::free(buf);
    return s;
}

@os(WINDOWS) func getRoot(this: &String) -> String {
    let c = copy(this);
    while (c.length > 0 && getChar(&c, c.length - 1) != '\\') c.length = c.length - 1;
    assert(c.length != 0, "getRoot: Found no root");
    return c;
}
@os(LINUX) func getRoot(this: &String) -> String {
    let c = copy(this);
    while (c.length > 0 && getChar(&c, c.length - 1) != '/') c.length = c.length - 1;
    assert(c.length != 0, "getRoot: Found no root");
    return c;
}

func getChar(this: &String, index: usize) -> char {
    assert(index <= this.length, "Index out of bounds for String.getChar()");
    return *(this.buffer + index);
}

func drop(this: &String) {
    C::free(this.buffer);
}
func copy(this: &String) -> String {
    let bfr: Any = C::calloc(this.capacity, sizeof char);
    assert(bfr != null, "Could not copy String");
    let _bfr: Any = C::memcpy(bfr, this.buffer, this.capacity);
    assert(_bfr != null);
    assert(bfr == _bfr);
    return String {
        buffer: bfr,
        length: this.length,
        capacity: this.capacity,
    };
}
func resize(this: &String, newCap: usize) {
    if (newCap < 256) newCap = 256;
    let old: &char = this.buffer;
    this.buffer = C::calloc(newCap, sizeof char);
    assert(this.buffer != null, "Could not resize String");
    C::memcpy(this.buffer, old, this.length);
    C::free(old);
    this.capacity = newCap;
}
func print(this: &String) {
    for (let i: usize = 0; i < this.length; i = i + 1) {
        C::printf("%c", *(this.buffer + i));
    }
}
func asSubStr(this: &String) -> SubStr {
    return substring(this, 0, this.length);
}
func substring(this: &String, start: usize, end: usize) -> SubStr {
    return newSubStrOfString(this, start, end);
}
func pushNumber(this: &String, num: usize) {
    let bfr: [char; 50] = ['\0'; 50];
    let length: usize = C::snprintf(null, 0, "%llu", num);
    assert(length < 50, "Buffer Overflow in String.pushNumber()");
    C::snprintf(&bfr, length + 1, "%llu", num);
    for (let i: usize = 0; i < length; i = i + 1) {
        pushChar(this, bfr[i]);
    }
}
func pushNumberAsHex(this: &String, num: usize) {
    let bfr: [char; 50] = ['\0'; 50];
    let length: usize = C::snprintf(null, 0, "0x%llX", num);
    assert(length < 50, "Buffer Overflow in String.pushNumberAsHex()");
    C::snprintf(&bfr, length + 1, "0x%llX", num);
    for (let i: usize = 0; i < length; i = i + 1) {
        pushChar(this, bfr[i]);
    }
}
func pushI64(this: &String, i: i64) {
    if (i < 0) {
        pushChar(this, '-');
        i = -i;
    }
    pushNumber(this, i as usize);
}
func pushChar(this: &String, ch: char) {
    if (this.length >= this.capacity || this.capacity < 256) {
        resize(this, 2 * this.capacity);
    }
    *(this.buffer + this.length * sizeof char) = ch;
    this.length = this.length + 1;
}
func pushHex(this: &String, hex: u8) {
    let lower: u8 = hex % 16;
    let upper: u8 = (hex / 16) % 16;
    assert(lower < 16);
    assert(upper < 16);
    pushChar(this, '\\');
    pushChar(this, 'x');
    pushChar(this, HEX_CHAR[upper as usize]);
    pushChar(this, HEX_CHAR[lower as usize]);
}
func pushSubStr(this: &String, sub: &SubStr) {
    for (let i: usize = 0; i < sub.len; i = i + 1) {
        let ch: char = getChar(sub, i);
        pushChar(this, ch);
    }
}
func pushString(this: &String, s: &String) {
    for (let i: usize = 0; i < s.length; i = i + 1) {
        let ch: char = getChar(s, i);
        pushChar(this, ch);
    }
}
func pushStr(this: &String, s: &char) {
    let _len: usize = C::strlen(s);
    for (let i: usize = 0; i < _len; i = i + 1) {
        let ch: char = *(s + i);
        pushChar(this, ch);
    }
}
func isNumber(this: &String) -> bool {
    for (let i: usize = 0; i < this.length; i = i + 1) {
        let ch: char = getChar(this, i);
        if (ch == '\0') {
            break;
        }
        if (!isNumeric(ch)) {
            return false;
        }
    }
    // Empty string is not a number
    return this.length > 0;
}
func toI64(this: &String) -> i64 {
    assert(isNumber(this), "not a number");
    let val: i64 = 0;
    for (let i: usize = 0; i < this.length - 1; i = i + 1) {
        let ch: char = getChar(this, i);
        let digit: i64 = (ch - '0') as i64;
        val = 10 * val + digit;
    }
    return val;
}
func toU64(this: &String) -> u64 {
    assert(isNumber(this), "not a number");
    let val: u64 = 0;
    for (let i: usize = 0; i < this.length; i = i + 1) {
        let ch: char = getChar(this, i);
        let digit: u64 = (ch - '0') as u64;
        val = 10 * val + digit;
    }
    return val;
}
func equals(this: &String, other: &String) -> bool {
    if (this.length != other.length) return false;
    return equals(&asSubStr(this), &asSubStr(other));
}

func newString() -> String {
    let cap: usize = 16;
    let _m: Any = C::calloc(cap, sizeof char);
    let buff: &char = _m as &char;
    return String {
        buffer: buff,
        length: 0,
        capacity: 16
    };
}

func newStringFromStrLit(s: &char) -> String {
    let len: usize = C::strlen(s);
    let buff: &char = C::calloc(len + 1, sizeof char);
    assert(buff != null);
    C::memcpy(buff, s, len);
    return String {
        buffer: buff as &char,
        length: len,
        capacity: len
    };
}

func canReadFileToString(path: &char, source: &String) -> bool {
    // `b` needed because otherwise `\r` would be dropped, leading to wrong Spans
    let file: Any = C::fopen(path, "rb");
    if (file == null) {
        return false;
    }
    let buf: [char; 1024] = ['\0'; 1024];
    while (true) {
        let size: usize = C::fread(&buf, 1, 1024, file);
        if (size == 0) {
            break;
        }
        for (let i: usize = 0; i < size; i = i + 1) {
            pushChar(source, buf[i]);
        }
    }
    assert(C::fclose(file) == 0);
    return true;
}

func readFileToString(path: &char) -> String {
    let s: String = newString();
    // `b` needed because otherwise `\r` would be dropped, leading to wrong Spans
    let file: Any = C::fopen(path, "rb");
    if (file == null) {
        C::fprintf(stderr, "error: Could not open file `%s`.\n", path);
        C::exit(1);
    }
    let buf: [char; 1024] = ['\0'; 1024];
    while (true) {
        let size: usize = C::fread(&buf, 1, 1024, file);
        if (size == 0) {
            break;
        }
        for (let i: usize = 0; i < size; i = i + 1) {
            pushChar(&s, buf[i]);
        }
    }
    assert(C::fclose(file) == 0);
    return s;
}

func writeStringToFile(path: &char, s: String) {
    // `b` needed because otherwise `\r` would be dropped, leading to wrong Spans
    let file: Any = C::fopen(path, "wb");
    if (file == null) {
        C::fprintf(stderr, "error: Could not open file `%s`.\n", path);
        C::exit(1);
    }
    let size: usize = C::fwrite(s.buffer, 1, s.length, file);
    assert(C::fclose(file) == 0);
}
