import "prelude.bufo";
import "libc.bufo";
import "cmd.bufo";
import "string.bufo";

@os(WINDOWS) import "winapi/structs.bufo";
@os(WINDOWS) import "winapi/functions.bufo";
@os(WINDOWS) import "winapi/constants.bufo";

@os(WINDOWS) func getLastModified(filePath: &char) -> usize {
    let file: Handle = WinAPI::CreateFileA(
        filePath,
        GENERIC_READ,
        FILE_SHARE_WRITE | FILE_SHARE_READ,
        null,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        INVALID_HANDLE
    );
    let time: FileTime = FileTime { time: 0 };
    if (failed(WinAPI::GetFileTime(file, null, null, &time))) {
        C::fprintf(stderr, "[ERROR] Could not get time of %s: %#010x\n", filePath, WinError(WinAPI::GetLastError()));
        return 0-1;
    }
    let _r = WinAPI::CloseHandle(file);
    assert(success(_r));
    return time.time;
}

@os(WINDOWS) func waitForProcess(proc: Handle) -> bool {
    let result: u32 = WinAPI::WaitForSingleObject(
        proc,
        INFINITE
    );

    if (result == WAIT_FAILED) {
        C::fprintf(stderr, "[ERROR] Could not wait on child process: %#010x\n", WinError(WinAPI::GetLastError()));
        return false;
    }

    let exitStatus: u32 = 0;
    if (failed(WinAPI::GetExitCodeProcess(proc, &exitStatus))) {
        C::fprintf(stderr, "[ERROR] Could not get process exit code: %#010x\n", WinError(WinAPI::GetLastError()));
        return false;
    }

    if (exitStatus != 0) {
        return false;
    }

    WinAPI::CloseHandle(proc);
    return true;
}

@os(WINDOWS) func dirExists(path: &char) -> bool {
    let attrib = WinAPI::GetFileAttributesA(path);
    return attrib != INVALID_FILE_ATTRIBUTES &&
            (attrib & FILE_ATTRIBUTE_DIRECTORY) != 0;
}

@os(WINDOWS) func tryFind(program: &char) -> bool {
    let s: String = newStringFromStrLit("where /Q ");
    pushStr(&s, program);
    let cmd: Cmd = newCmdFromStrLit(s.buffer);
    return runCmdSync(cmd);
}

@os(WINDOWS) func runCmdSync(cmd: Cmd) -> bool {
    let proc: Handle = runCmdAsync(cmd);
    if (proc.ptr == INVALID_HANDLE.ptr) return false;
    return waitForProcess(proc);
}

// https://docs.microsoft.com/en-us/windows/win32/procthread/creating-a-child-process-with-redirected-input-and-output
@os(WINDOWS) func runCmdAsync(cmd: Cmd) -> Handle {
    let siStartInfo: StartupInfo = StartupInfo {
        cb: 0,
        lpReserved: null,
        lpDesktop: null,
        lpTitle: null,
        dwX: 0,
        dwY: 0,
        dwXSize: 0,
        dwYSize: 0,
        dwXCountChars: 0,
        dwYCountChars: 0,
        dwFillAttribute: 0,
        dwFlags: 0,
        wShowWindow: 0,
        cbReserved2: 0,
        lpReserved2: null,
        hStdInput: WinAPI::GetStdHandle(STD_INPUT_HANDLE),
        hStdOutput: WinAPI::GetStdHandle(STD_OUTPUT_HANDLE),
        hStdError: WinAPI::GetStdHandle(STD_ERROR_HANDLE),
    };
    siStartInfo.cb = sizeof StartupInfo as u32;
    // NOTE: theoretically setting NULL to std handles should not be a problem
    // https://docs.microsoft.com/en-us/windows/console/getstdhandle?redirectedfrom=MSDN#attachdetach-behavior
    // TODO: check for errors in GetStdHandle
    siStartInfo.dwFlags = siStartInfo.dwFlags | STARTF_USESTDHANDLES;

    let piProcInfo: ProcessInformation = ProcessInformation {
        hProcess: INVALID_HANDLE,
        hThread: INVALID_HANDLE,
        dwProcessId: 0,
        dwThreadId: 0,
    };

    let str: String = toString(&cmd);
    pushChar(&str, '\0');
    if (cmd.log) {
        C::printf("[CMD] %s\n", str.buffer);
    }
    let bSuccess = WinAPI::CreateProcessA(
        null,
        &*str.buffer,
        null,
        null,
        BOOL { i: 1 },
        0,
        null,
        null,
        &siStartInfo,
        &piProcInfo
    );
    drop(&str);

    if (failed(bSuccess)) {
        C::fprintf(stderr, "[ERROR] Could not create child process: %#010x\n", WinError(WinAPI::GetLastError()));
        return INVALID_HANDLE;
    }

    WinAPI::CloseHandle(piProcInfo.hThread);

    return piProcInfo.hProcess;
}

@os(WINDOWS) func WinError(error: u32) -> &char {
    let message: &char = null;
    let lang = 0x0409; // en-US
    if (WinAPI::FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
        null, error, lang, &message, 0, message) == 0) {
        C::fprintf(stderr, "%s Could not get WinError: FormatMessage failed!\n", FATAL_STR);
        return null;
    }
    return message;
}
