import "prelude.bufo";
import "libc.bufo";
import "string.bufo";

comptime ORDER_LESS: u8 = 0;
comptime ORDER_EQUAL: u8 = 1;
comptime ORDER_GREATER: u8 = 2;
struct SubStr {
    start: &char;
    len: usize;
}

func isEmpty(this: &SubStr) -> bool {
    return this.start == null;
}

func hash(this: &SubStr, length: usize) -> usize {
    let h: usize = 0;
    let d: usize = pow(10, length);
    for (let i: usize = 0; i < this.len; i = i + 1) {
        let c: char = getChar(this, i);
        h = h + (c as usize);
        h = h % d;
    }
    return h;
}

func lexOrder(this: &SubStr, other: &SubStr) -> u8 {
    if (this.len < other.len) {
        return ORDER_LESS;
    }
    if (this.len > other.len) {
        return ORDER_GREATER;
    }
    let l: usize = this.len;
    for (let i: usize = 0; i < l; i = i + 1) {
        let c1: char = getChar(this, i);
        let c2: char = getChar(other, i);
        if (c1 < c2) {
            return ORDER_LESS;
        }
        if (c1 > c2) {
            return ORDER_GREATER;
        }
    }
    return ORDER_EQUAL;
}

func equals(this: &SubStr, other: &SubStr) -> bool {
    if (this.len != other.len) {
        return false;
    }
    let l: usize = this.len;
    for (let i: usize = 0; i < l; i = i + 1) {
        let c1: char = getChar(this, i);
        let c2: char = getChar(other, i);
        if (c1 != c2) {
            return false;
        }
    }
    return true;
}
func print(this: &SubStr) {
    for (let i: usize = 0; i < this.len; i = i + 1) {
        let a: Any = this.start;
        let c: &char = a;
        let p: char = *(c + i);
        assert(p == putchar(p), "Wrote wrong character in SubStr.print");
    }
}
func getPathParent(this: &SubStr) -> String {
    let s: String = toString(this);
    while (s.length > 0) {
        let c: char = getChar(&s, s.length - 1);
        if (c == '/' || c == '\\') {
            break;
        }
        pushChar(&s, '\0');
        s.length = s.length - 2;
    }
    return s;
}
func toString(this: &SubStr) -> String {
    let s: String = newString();
    for (let i: usize = 0; i < this.len; i = i + 1) {
        pushChar(&s, getChar(this, i));
    }
    return s;
}
func getChar(this: &SubStr, index: usize) -> char {
    assert(index <= this.len, "Index out of bounds for String Index.");
    return getChar(this.start, index);
}
func substring(this: &SubStr, start: usize, end: usize) -> SubStr {
    assert(end <= this.len, "Index out of bounds for String Substring.");
    assert(end - start <= this.len, "Invalid length for String Substring.");
    return newSubStr(this.start, start, end);
}
func hasSpace(this: &SubStr) -> bool {
    for (let i: usize = 0; i < this.len; i = i + 1) {
        if (getChar(this, i) == ' ') {
            return true;
        }
    }
    return false;
}
func isNumber(this: &SubStr) -> bool {
    for (let i: usize = 0; i < this.len; i = i + 1) {
        let ch: char = getChar(this, i);
        if (ch == '\0') {
            break;
        }
        if (!isNumeric(ch)) {
            return false;
        }
    }
    // Empty substr is not a number
    return this.len > 0;
}
func toU64(this: &SubStr) -> u64 {
    assert(isNumber(this), "not a number");
    let val: u64 = 0;
    for (let i: usize = 0; i < this.len; i = i + 1) {
        let ch: char = getChar(this, i);
        let digit: u64 = (ch - '0') as u64;
        val = 10 * val + digit;
    }
    return val;
}
func toF64(this: &SubStr) -> f64 {
    // FIXME: Support literals such as 1.5
    return toU64(this) as f64;
}

func newSubStrOfStrLit(orig: &char) -> SubStr {
    return newSubStr(orig, 0, strlen(orig));
}

func newSubStr(orig: &char, start: usize, end: usize) -> SubStr {
    return SubStr {
        start: orig + start,
        len: end - start,
    };
}
func newSubStrOfString(orig: &String, start: usize, end: usize) -> SubStr {
    let _bfr: Any = orig.buffer;
    let _cbfr: &char = _bfr;
    return SubStr {
        start: _cbfr + start,
        len: end - start,
    };
}
func defaultSubStr() -> SubStr {
    let s: &char = "You are not supposed to read this. Please issue a bug report.";
    let l: usize = strlen(s);
    return newSubStr(s, 0, l);
}
