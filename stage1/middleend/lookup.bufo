import "prelude.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/lists.bufo";
import "../frontend/token.bufo";
import "../frontend/nodes.bufo";
import "../frontend/parser.bufo";
import "./checker.bufo";
import "./types.bufo";

struct Lookup {
    modules: ModuleLookupList;

    func insertModule(&mut this, mod: &mut ParsedModule) -> &mut ModuleLookup {
        trace("Lookup.insertModule");
        mut lookup: ModuleLookup = ModuleLookup {
            globalID: mod.getID(),
            origin: mod.origin,
            imports: blank,
            functions: blank,
            structs: blank,
            variables: blank,
        };
        // Global Scope
        lookup.variables.push(blank);
        this.modules.push(lookup);
        return this.modules.last();
    }

    func resolveFunctionByName(&mut this, currentModule: usize, name: &Token) -> FunctionLookupList {
        trace("Lookup.resolveFunctionByName");
        // FIXME: Would be cool if this method didn't create copies of the FunctionLookups
        let currModule: &mut ModuleLookup = this.modules.at(currentModule);
        mut list: FunctionLookupList = currModule.resolveFunctionByName(name);
        for (mut i: usize = 0; i < currModule.imports.length; i = i + 1) {
            let imp: &mut ImportLookup = currModule.imports.at(i);
            let importedModule: &mut ModuleLookup = this.modules.at(imp.moduleID);
            mut importList: FunctionLookupList = importedModule.resolveFunctionByName(name);
            list.extend(&mut importList);
        }
        return list;
    }

    func resolveVariableByName(&mut this, currentModule: usize, name: &Token, scopes: &mut ScopeLookupList, var: &mut VariableLookup) -> bool {
        trace("Lookup.resolveVariableByName");
        debug(name.content.toString().chars());
        // FIXME: The commented loop underflows
        // for (mut i: usize = scopes.length - 1; i >= 0; i = i - 1) unsafe {
        for (mut _i: usize = 0; _i < scopes.length; _i = _i + 1) unsafe {
            let i: usize = scopes.length - _i - 1;
            let s: &mut ScopeLookup = scopes.at(i);
            for (mut j: usize = 0; j < s.variables.length; j = j + 1) {
                let v: &mut VariableLookup = s.variables.at(j);
                if (v.name.content.equals(&name.content)) unsafe {
                    debug("Variable found in current module");
                    *var = *v;
                    return true;
                }
            }
        }
        let mod: &mut ModuleLookup = this.modules.at(currentModule);
        let globalScope: &mut ScopeLookup = mod.variables.at(0);
        for (mut j: usize = 0; j < globalScope.variables.length; j = j + 1) {
            let v: VariableLookup = *globalScope.variables.at(j);
            if (v.name.content.equals(&name.content)) {
                debug("Variable found in global scope");
                *var = v;
                return true;
            }
        }
        for (mut i: usize = 0; i < mod.imports.length; i = i + 1) {
            let imp: usize = mod.imports.at(i).moduleID;
            let mod: &mut ModuleLookup = this.modules.at(imp);
            let globalScope: &mut ScopeLookup = mod.variables.at(0);
            for (mut j: usize = 0; j < globalScope.variables.length; j = j + 1) {
                let v: VariableLookup = *globalScope.variables.at(j);
                if (v.name.content.equals(&name.content)) {
                    debug("Variable found in import");
                    *var = v;
                    return true;
                }
            }
        }
        debug("Variable not found");
        return false;
    }

    func resolveTypeByName(&mut this, currentModule: usize, name: &Token, typ: &mut TypeLookup) -> bool {
        trace("Lookup.resolveTypeByName");
        let currModule: &mut ModuleLookup = this.modules.at(currentModule);
        if (currModule.resolveTypeByName(name, typ)) return true;
        for (mut i: usize = 0; i < currModule.imports.length; i = i + 1) {
            let imp: &mut ImportLookup = currModule.imports.at(i);
            let importedModule: &mut ModuleLookup = this.modules.at(imp.moduleID);
            if (importedModule.resolveTypeByName(name, typ)) return true;
        }
        return false;
    }

    func getTypeLookupForType(&mut this, typ: &mut Type) -> TypeLookup {
        trace("Lookup.getTypeLookupForType");
        if (typ.isStruct()) {
            let strukt: &mut ParsedStructDecl = getStructDeclByID(typ.typeIndex);
            let modID: usize = strukt.parentModule;
            let s: &mut StructLookup = this.modules.at(modID).getStructByGlobalID(strukt.getID());
            return newTypeLookup(TYPE_LOOKUP_STRUCT, s);
        } else {
            todo_with_msg("getTypeLookupFromTypeID for non-struct");
            return blank;
        }
    }

    func searchAllModulesForTypeName(&mut this, name: &Token) -> TypeLookupList {
        trace("Lookup.searchAllModulesForTypeName");
        mut list: TypeLookupList = blank;
        for (mut i: usize = 0; i < this.modules.length; i = i + 1) {
            mut t: TypeLookup = blank;
            if (this.modules.at(i).resolveTypeByName(name, &mut t)) {
                list.push(t);
            }
        }
        return list;
    }
    func searchAllModulesForFunctionName(&mut this, name: &Token) -> FunctionLookupList {
        trace("Lookup.searchAllModulesForFunctionName");
        mut list: FunctionLookupList = blank;
        for (mut i: usize = 0; i < this.modules.length; i = i + 1) {
            mut t: FunctionLookupList = this.modules.at(i).resolveFunctionByName(name);
            list.extend(&mut t);
        }
        return list;
    }
    func searchAllModulesForIdentifier(&mut this, name: &Token) -> VariableLookupList {
        trace("Lookup.searchAllModulesForIdentifier");
        mut list: VariableLookupList = blank;
        for (mut i: usize = 0; i < this.modules.length; i = i + 1) {
            let m: &mut ModuleLookup = this.modules.at(i);
            for (mut j: usize = 0; j < m.variables.length; j = j + 1) {
                let s: &mut ScopeLookup = m.variables.at(j);
                mut v: VariableLookup = blank;
                if (s.getVariableByName(name.content, &mut v)) {
                    list.push(v);
                }
            }
        }
        return list;
    }
}

struct ModuleLookup {
    globalID: usize;
    origin: SubStr;
    imports: ImportLookupList;
    functions: FunctionLookupList;
    structs: StructLookupList;
    variables: ScopeLookupList;

    func equals(&mut this, other: &ModuleLookup) -> bool {
        return this.origin.equals(&other.origin);
    }

    func insertTLI(&mut this, tli: &mut ParsedTopLevelItem) {
        trace("ModuleLookup.insertTLI");
        if (tli.kind == TLI_FUNC_DECL) {
            let fun: &mut ParsedFuncDecl = getFuncDeclByID(tli.nodeID);
            let lookup: FunctionLookup = FunctionLookup {
                globalID: tli.nodeID,
                parentModule: this.globalID,
                name: fun.name,
                returnType: blank,
                params: blank,
                readyState: FUNC_INCOMPLETE,
                isVarArg: fun.params.isVarArg,
            };
            this.functions.push(lookup);
        } else if (tli.kind == TLI_IMPORT) {
            let modID: usize = tli.nodeID;
            assert(modID < moduleCount);
            let lookup: ImportLookup = ImportLookup {
                moduleID: modID
            };
            if (this.imports.contains(&lookup)) {
                todo_with_msg("double import");
            }
            this.imports.push(lookup);
        } else if (tli.kind == TLI_STRUCT_DECL) {
            let strukt: &mut ParsedStructDecl = getStructDeclByID(tli.nodeID);
            mut lookup: StructLookup = StructLookup {
                globalID: tli.nodeID,
                parentModule: this.globalID,
                name: strukt.name,
                readyState: STRUCT_INCOMPLETE,
                fields: blank,
                methods: blank,
                typeID: newType(TYPE_KIND_STRUCT, tli.nodeID).getID(),
            };
            for (mut i: usize = 0; i < strukt.context.methodLength; i = i + 1) {
                let id: usize = strukt.context.getMethodAtIndex(i);
                let method: &mut ParsedMethod = getMethodByID(id);
                let mLookup: MethodLookup = MethodLookup {
                    globalID: id,
                    name: method.name,
                    isStatic: false,
                    returnType: blank,
                    params: blank,
                    readyState: METHOD_INCOMPLETE,
                };
                lookup.methods.push(mLookup);
            }
            if (this.structs.contains(&lookup)) {
                todo_with_msg("double struct");
            }
            this.structs.push(lookup);
        } else if (tli.kind == TLI_VAR_DECL) {
            let varDecl: &mut ParsedStmt = getStmtByID(tli.nodeID);
            assert(varDecl.kind == STMT_VAR_DECL);
            let lookup: VariableLookup = VariableLookup {
                globalID: tli.nodeID,
                name: varDecl.varDeclContext.name,
                typeState: blank,
                isComptime: varDecl.varDeclContext.isComptime,
            };
            assert_with_msg(this.variables.length == 1, "expected to find only the global scope");
            let globalScope: &mut ScopeLookup = this.variables.last();
            mut loc: Token = blank;
            if (globalScope.isKnownVariable(lookup.name.content, &mut loc)) {
                todo_with_msg("double global var");
            }
            globalScope.addVariable(lookup);
        } else {
            todo_with_msg("insert tli");
        }
    }

    // FIXME: We need to use usize because the bootstrap doesn't support nested references :^)
    func containsDuplicateFunction(&mut this, function: &mut FunctionLookup, dupl: &mut usize) -> bool {
        trace("ModuleLookup.containsDuplicateFunction");
        let name: String = getFuncDeclByID(function.globalID).getMangledName();
        mut duplicate: bool = false;
        for (mut i: usize = 0; !duplicate && i < this.functions.length; i = i + 1) {
            let f: &mut FunctionLookup = this.functions.at(i);
            // REVIEW: is FUNC_DUPLICATE_CHECK always correct, or is it better to check FUNC_READY_TO_USE
            if (f == function) continue;
            if (!f.getReadyState(FUNC_DUPLICATE_CHECK)) continue;
            let n: String = getFuncDeclByID(f.globalID).getMangledName();
            if (name.equals(&n)) unsafe {
                *dupl = f as usize;
                duplicate = true;
            }
            n.drop();
        }
        return duplicate;
    }

    func getFunctionByGlobalID(&mut this, funcID: usize) -> &mut FunctionLookup {
        trace("ModuleLookup.getFunctionByGlobalID");
        for (mut i: usize = 0; i < this.functions.length; i = i + 1) {
            let f: &mut FunctionLookup = this.functions.at(i);
            if (f.globalID == funcID) {
                return f;
            }
        }
        unreachable("Lookup failed to find function based on global ID!");
        unsafe { return null; }
    }

    func getStructByGlobalID(&mut this, structID: usize) -> &mut StructLookup {
        trace("ModuleLookup.getStructByGlobalID");
        for (mut i: usize = 0; i < this.structs.length; i = i + 1) {
            let s: &mut StructLookup = this.structs.at(i);
            if (s.globalID == structID) {
                return s;
            }
        }
        unreachable("Lookup failed to find struct based on global ID!");
        unsafe { return null; }
    }

    func resolveFunctionByName(&mut this, name: &Token) -> FunctionLookupList {
        trace("ModuleLookup.resolveFunctionByName");
        mut list: FunctionLookupList = blank;
        for (mut i: usize = 0; i < this.functions.length; i = i + 1) {
            let f: &mut FunctionLookup = this.functions.at(i);
            if (f.name.content.equals(&name.content)) {
                list.push(*f);
            }
        }
        return list;
    }

    func resolveTypeByName(&mut this, name: &Token, typ: &mut TypeLookup) -> bool {
        trace("ModuleLookup.resolveTypeByName");
        for (mut i: usize = 0; i < this.structs.length; i = i + 1) {
            let s: &mut StructLookup = this.structs.at(i);
            if (s.name.content.equals(&name.content)) {
                *typ = newTypeLookup(TYPE_LOOKUP_STRUCT, s);
                return true;
            }
        }
        return false;
    }
}

struct ImportLookup {
    moduleID: usize;

    func equals(&mut this, other: &ImportLookup) -> bool {
        return this.moduleID == other.moduleID;
    }
}

comptime FUNC_INCOMPLETE       : usize = pow2(0);
comptime FUNC_ERROR            : usize = pow2(1);
comptime FUNC_PARAMS_COMPLETE  : usize = pow2(2);
comptime FUNC_RETTYPE_COMPLETE : usize = pow2(3);
comptime FUNC_READY_TO_USE     : usize = pow2(4);
comptime FUNC_DUPLICATE_CHECK  : usize = pow2(5);
comptime FUNC_BODY_COMPLETE    : usize = pow2(6);
struct FunctionLookup {
    globalID: usize;
    parentModule: usize;
    name: Token;
    returnType: TCState;
    params: VariableLookupList;
    readyState: usize;
    isVarArg: bool;

    func getReadyState(&mut this, state: usize) -> bool {
        return (this.readyState & state) != 0;
    }
    func setReadyState(&mut this, state: usize) {
        assert_with_msg(!this.getReadyState(state), "FunctionLookup.readyState is already set");
        this.readyState = this.readyState | state;
    }

    func setReturnType(&mut this, typ: TCState) {
        trace("FunctionLookup.setReturnType");
        this.returnType = typ;
    }

    func addParameter(&mut this, globalID: usize, name: Token, typeState: TCState) {
        trace("FunctionLookup.addParameter");
        this.params.push(VariableLookup {
            globalID: globalID,
            name: name,
            typeState: typeState,
            // REVIEW: Comptime params?
            isComptime: false,
        });
    }

    func checkForDuplicateParam(&mut this, name: &Token, dupl: &mut VariableLookup) -> bool {
        trace("FunctionLookup.checkForDuplicateParam");
        for (mut i: usize = 0; i < this.params.length; i = i + 1) {
            let param: &mut VariableLookup = this.params.at(i);
            if (param.name.content.equals(&name.content)) {
                *dupl = *param;
                return true;
            }
        }
        return false;
    }

    func equals(&mut this, other: &FunctionLookup) -> bool {
        warning("When are two functions equal");
        return this.name.equals(&other.name);
    }
}

comptime TYPE_LOOKUP_INVALID: usize = 0;
comptime TYPE_LOOKUP_STRUCT: usize = 1;
struct TypeLookup {
    kind: usize;
    actual: Any;

    func getName(&mut this) -> String {
        if (this.kind == TYPE_LOOKUP_STRUCT) {
            return this.asStruct().name.content.toString();
        } else {
            unreachable("Exhaustive handling in TypeLookup.getName");
            return blank;
        }
    }

    func getLocation(&mut this) -> String {
        if (this.kind == TYPE_LOOKUP_STRUCT) {
            return this.asStruct().name.span.toString();
        } else {
            unreachable("Exhaustive handling in TypeLookup.getLocation");
            return blank;
        }
    }

    func equals(&mut this, other: &TypeLookup) -> bool {
        if (this.kind != other.kind) return false;
        if (this.kind == TYPE_LOOKUP_STRUCT) unsafe {
            let _other: Any = other;
            let other: &mut TypeLookup = &mut *_other;
            return this.asStruct().equals(other.asStruct() as &StructLookup);
        }
        unreachable("Exhaustive handling in TypeLookup.equals");
        return false;
    }

    func isStruct(&mut this) -> bool {
        return this.kind == TYPE_LOOKUP_STRUCT;
    }

    func asStruct(&mut this) -> &mut StructLookup {
        assert_with_msg(this.isStruct(), "Attempted to convert non-struct TypeLookup into StructLookup");
        unsafe {
            return this.actual as &mut StructLookup;
        }
    }
}

func newTypeLookup(kind: usize, actual: Any) -> TypeLookup {
    return TypeLookup {
        kind: kind,
        actual: actual
    };
}

comptime STRUCT_INCOMPLETE        : usize = pow2(0);
comptime STRUCT_ERROR             : usize = pow2(1);
comptime STRUCT_FIELDS_COMPLETE   : usize = pow2(2);
comptime STRUCT_SIGNATURE_COMPLETE: usize = pow2(3);
comptime STRUCT_METHODS_COMPLETE  : usize = pow2(4);
comptime STRUCT_READY_TO_USE      : usize = pow2(5);
struct StructLookup {
    globalID: usize;
    parentModule: usize;
    name: Token;
    readyState: usize;
    fields: VariableLookupList;
    methods: MethodLookupList;
    typeID: usize;

    func getReadyState(&mut this, state: usize) -> bool {
        return (this.readyState & state) != 0;
    }
    func setReadyState(&mut this, state: usize) {
        assert_with_msg(!this.getReadyState(state), "StructLookup.readyState is already set");
        this.readyState = this.readyState | state;
    }

    func asTypeLookup(&mut this) -> TypeLookup {
        return newTypeLookup(TYPE_LOOKUP_STRUCT, this);
    }
    func equals(&mut this, other: &StructLookup) -> bool {
        if (this.parentModule != other.parentModule) return false;
        return this.name.content.equals(&other.name.content);
    }

    func resolveFieldByName(&mut this, name: &Token, out: &mut VariableLookup) -> bool {
        trace("StructLookup.resolveFieldByName");
        for (mut i: usize = 0; i < this.fields.length; i = i + 1) {
            let f: &mut VariableLookup = this.fields.at(i);
            if (f.name.content.equals(&name.content)) {
                *out = *f;
                return true;
            }
        }
        return false;
    }

    func hasField(&mut this, name: &SubStr) -> bool {
        trace("StructLookup.hasField");
        for (mut i: usize = 0; i < this.fields.length; i = i + 1) {
            let f: &mut VariableLookup = this.fields.at(i);
            if (f.name.content.equals(name)) {
                return true;
            }
        }
        return false;
    }

    // FIXME: We need to use usize because the bootstrap doesn't support nested references :^)
    func containsDuplicateMethod(&mut this, method: &mut MethodLookup, dupl: &mut usize) -> bool {
        trace("StructLookup.containsDuplicateMethod");
        let name: String = getMethodByID(method.globalID).getMangledName();
        mut duplicate: bool = false;
        for (mut i: usize = 0; !duplicate && i < this.methods.length; i = i + 1) {
            let f: &mut MethodLookup = this.methods.at(i);
            // REVIEW: is METHOD_DUPLICATE_CHECK always correct, or is it better to check METHOD_READY_TO_USE
            if (f == method) continue;
            if (!f.getReadyState(METHOD_DUPLICATE_CHECK)) continue;
            let n: String = getMethodByID(f.globalID).getMangledName();
            if (name.equals(&n)) unsafe {
                *dupl = f as usize;
                duplicate = true;
            }
            n.drop();
        }
        return duplicate;
    }

    func resolveMethodByName(&mut this, name: &Token) -> MethodLookupList {
        trace("StructLookup.resolveMethodByName");
        mut methods: MethodLookupList = blank;
        for (mut i: usize = 0; i < this.methods.length; i = i + 1) {
            let m: &mut MethodLookup = this.methods.at(i);
            if (m.name.content.equals(&name.content)) {
                methods.push(*m);
            }
        }
        return methods;
    }

    func getIndexByName(&mut this, name: &Token) -> usize {
        trace("StructLookup.getIndexByName");
        for (mut i: usize = 0; i < this.fields.length; i = i + 1) {
            let f: &mut VariableLookup = this.fields.at(i);
            if (f.name.content.equals(&name.content)) {
                return i;
            }
        }
        assert_with_msg(this.hasField(&name.content), "StructLookup.getIndexByName() called when StructLookup.hasField() == false");
        unreachable("StructLookup.getIndexByName does not have a field with the given name");
        return 0;
    }

    func checkForDuplicateField(&mut this, name: &Token, dupl: &mut VariableLookup) -> bool {
        trace("StructLookup.checkForDuplicateField");
        for (mut i: usize = 0; i < this.fields.length; i = i + 1) {
            let f: &mut VariableLookup = this.fields.at(i);
            if (f.name.content.equals(&name.content)) {
                *dupl = *f;
                return true;
            }
        }
        return false;
    }

    func addField(&mut this, globalID: usize, name: Token, typeState: TCState) {
        trace("StructLookup.addField");
        this.fields.push(VariableLookup {
            globalID: globalID,
            name: name,
            typeState: typeState,
            // REVIEW: Comptime fields?
            isComptime: false,
        });
    }
    func getMethodByGlobalID(&mut this, methodID: usize) -> &mut MethodLookup {
        trace("StructLookup.getMethodByGlobalID");
        for (mut i: usize = 0; i < this.methods.length; i = i + 1) {
            let f: &mut MethodLookup = this.methods.at(i);
            if (f.globalID == methodID) {
                return f;
            }
        }
        unreachable("Lookup failed to find method based on global ID!");
        unsafe { return null; }
    }
}

comptime METHOD_INCOMPLETE       : usize = pow2(0);
comptime METHOD_ERROR            : usize = pow2(1);
comptime METHOD_PARAMS_COMPLETE  : usize = pow2(2);
comptime METHOD_RETTYPE_COMPLETE : usize = pow2(3);
comptime METHOD_READY_TO_USE     : usize = pow2(4);
comptime METHOD_DUPLICATE_CHECK  : usize = pow2(5);
comptime METHOD_BODY_COMPLETE    : usize = pow2(6);
struct MethodLookup {
    globalID: usize;
    name: Token;
    isStatic: bool;
    returnType: TCState;
    params: VariableLookupList;
    readyState: usize;

    func getReadyState(&mut this, state: usize) -> bool {
        return (this.readyState & state) != 0;
    }
    func setReadyState(&mut this, state: usize) {
        assert_with_msg(!this.getReadyState(state), "MethodLookup.readyState is already set");
        this.readyState = this.readyState | state;
    }

    func equals(&mut this, other: &MethodLookup) -> bool {
        todo_with_msg("MethodLookup.equals");
        return false;
    }

    func checkForDuplicateParam(&mut this, name: &Token, dupl: &mut VariableLookup) -> bool {
        trace("MethodLookup.checkForDuplicateParam");
        for (mut i: usize = 0; i < this.params.length; i = i + 1) {
            let param: &mut VariableLookup = this.params.at(i);
            if (param.name.content.equals(&name.content)) {
                *dupl = *param;
                return true;
            }
        }
        return false;
    }

    func addParameter(&mut this, globalID: usize, name: Token, mut typeState: TCState) {
        trace("MethodLookup.addParameter");
        assert_with_msg(typeState.isType(), "MethodLookup received non-type parameter type");
        this.params.push(VariableLookup {
            globalID: globalID,
            name: name,
            typeState: typeState,
            // REVIEW: Comptime params?
            isComptime: false,
        });
    }

    func setReturnType(&mut this, mut typ: TCState) {
        trace("MethodLookup.setReturnType");
        assert_with_msg(typ.isType(), "MethodLookup received non-type return type");
        this.returnType = typ;
    }
}

struct VariableLookup {
    globalID: usize;
    name: Token;
    typeState: TCState;
    isComptime: bool;

    func isParameter(&mut this) -> bool {
        return this.globalID >= 64000;
    }

    func equals(&mut this, other: &VariableLookup) -> bool {
        return this.name.content.equals(&other.name.content);
    }
}

struct ScopeLookup {
    variables: VariableLookupList;

    func equals(&mut this, other: &ScopeLookup) -> bool {
        todo_with_msg("when are two scopes equal");
        return false;
    }
    func addVariable(&mut this, variable: VariableLookup) {
        trace("ScopeLookup.addVariable");
        this.variables.push(variable);
    }

    func isKnownVariable(&mut this, name: SubStr, existing: &mut Token) -> bool {
        trace("ScopeLookup.isKnownVariable");
        for (mut i: usize = 0; i < this.variables.length; i = i + 1) {
            let v: &mut VariableLookup = this.variables.at(i);
            if (v.name.content.equals(&name)) {
                *existing = v.name;
                return true;
            }
        }
        return false;
    }

    func getVarIndexByName(&mut this, name: SubStr, index: &mut usize) -> bool {
        trace("ScopeLookup.getVarIndexByName");
        for (mut i: usize = 0; i < this.variables.length; i = i + 1) {
            let v: &mut VariableLookup = this.variables.at(i);
            if (v.name.content.equals(&name)) unsafe {
                *index = i;
                return true;
            }
        }
        return false;
    }

    func getVariableByName(&mut this, name: SubStr, var: &mut VariableLookup) -> bool {
        trace("ScopeLookup.getVariableByName");
        for (mut i: usize = 0; i < this.variables.length; i = i + 1) {
            let v: &mut VariableLookup = this.variables.at(i);
            if (v.name.content.equals(&name)) unsafe {
                *var = *v;
                return true;
            }
        }
        return false;
    }

    func getVariableAtIndex(&mut this, index: usize) -> &mut VariableLookup {
        trace("ScopeLookup.getVariableAtIndex");
        return this.variables.at(index);
    }

    func clear(&mut this) {
        this.variables.clear();
    }
}

