import "libc.bufo";
import "prelude.bufo";
import "substr.bufo";
import "../util/span.bufo";
import "string.bufo";
import "./nodes.bufo";

comptime TOKEN_EOF: usize = 0;
comptime TOKEN_IDENT: usize = 1;
comptime TOKEN_KEYWORD: usize = 2;
comptime TOKEN_STRING_LITERAL: usize = 3;
comptime TOKEN_INT_LITERAL: usize = 4;
comptime TOKEN_CHAR_LITERAL: usize = 5;
comptime TOKEN_PAREN_OPEN: usize = 6;
comptime TOKEN_PAREN_CLOSE: usize = 7;
comptime TOKEN_CURLY_OPEN: usize = 8;
comptime TOKEN_CURLY_CLOSE: usize = 9;
comptime TOKEN_SQUARE_OPEN: usize = 10;
comptime TOKEN_SQUARE_CLOSE: usize = 11;
comptime TOKEN_SHARP_OPEN: usize = 12;
comptime TOKEN_SHARP_CLOSE: usize = 13;
comptime TOKEN_SEMI_COLON: usize = 14;
comptime TOKEN_COLON: usize = 15;
comptime TOKEN_EQUAL_SINGLE: usize = 16;
comptime TOKEN_EQUAL_DOUBLE: usize = 17;
comptime TOKEN_AMPERSAND_SINGLE: usize = 18;
comptime TOKEN_AMPERSAND_DOUBLE: usize = 19;
comptime TOKEN_COMMA: usize = 20;
comptime TOKEN_ARROW: usize = 21;
comptime TOKEN_PLUS_SINGLE: usize = 22;
comptime TOKEN_UNDERSCORE: usize = 23;
comptime TOKEN_DOT: usize = 24;
comptime TOKEN_AT: usize = 25;
comptime TOKEN_MINUS_SINGLE: usize = 26;
comptime TOKEN_ASTERISK_SINGLE: usize = 27;
comptime TOKEN_NOT_EQUAL: usize = 28;
comptime TOKEN_BANG: usize = 29;
comptime TOKEN_SLASH_SINGLE: usize = 30;
comptime TOKEN_LESS_THAN_EQUAL: usize = 31;
comptime TOKEN_LESS_THAN: usize = 32;
comptime TOKEN_GREATER_THAN_EQUAL: usize = 33;
comptime TOKEN_GREATER_THAN: usize = 34;
comptime TOKEN_PERCENT: usize = 35;
comptime TOKEN_PIPE_SINGLE: usize = 36;
comptime TOKEN_PIPE_DOUBLE: usize = 37;
comptime TOKEN_DOTDOTDOT: usize = 38;
func tokenKindToString(kind: usize) -> &char {
    if (kind == TOKEN_EOF) { return "TOKEN_EOF"; }
    else if (kind == TOKEN_IDENT) { return "TOKEN_IDENT"; }
    else if (kind == TOKEN_KEYWORD) { return "TOKEN_KEYWORD"; }
    else if (kind == TOKEN_INT_LITERAL) { return "TOKEN_INT_LITERAL"; }
    else if (kind == TOKEN_PAREN_OPEN) { return "TOKEN_PAREN_OPEN"; }
    else if (kind == TOKEN_PAREN_CLOSE) { return "TOKEN_PAREN_CLOSE"; }
    else if (kind == TOKEN_CURLY_OPEN) { return "TOKEN_CURLY_OPEN"; }
    else if (kind == TOKEN_CURLY_CLOSE) { return "TOKEN_CURLY_CLOSE"; }
    else if (kind == TOKEN_SHARP_OPEN) { return "TOKEN_SHARP_OPEN"; }
    else if (kind == TOKEN_SHARP_CLOSE) { return "TOKEN_SHARP_CLOSE"; }
    else if (kind == TOKEN_SQUARE_OPEN) { return "TOKEN_SQUARE_OPEN"; }
    else if (kind == TOKEN_SQUARE_CLOSE) { return "TOKEN_SQUARE_CLOSE"; }
    else if (kind == TOKEN_SEMI_COLON) { return "TOKEN_SEMI_COLON"; }
    else if (kind == TOKEN_COLON) { return "TOKEN_COLON"; }
    else if (kind == TOKEN_EQUAL_SINGLE) { return "TOKEN_EQUAL_SINGLE"; }
    else if (kind == TOKEN_EQUAL_DOUBLE) { return "TOKEN_EQUAL_DOUBLE"; }
    else if (kind == TOKEN_AMPERSAND_SINGLE) { return "TOKEN_AMPERSAND_SINGLE"; }
    else if (kind == TOKEN_AMPERSAND_DOUBLE) { return "TOKEN_AMPERSAND_DOUBLE"; }
    else if (kind == TOKEN_COMMA) { return "TOKEN_COMMA"; }
    else if (kind == TOKEN_ARROW) { return "TOKEN_ARROW"; }
    else if (kind == TOKEN_PLUS_SINGLE) { return "TOKEN_PLUS_SINGLE"; }
    else if (kind == TOKEN_UNDERSCORE) { return "TOKEN_UNDERSCORE"; }
    else if (kind == TOKEN_DOT) { return "TOKEN_DOT"; }
    else if (kind == TOKEN_AT) { return "TOKEN_AT"; }
    else if (kind == TOKEN_MINUS_SINGLE) { return "TOKEN_MINUS_SINGLE"; }
    else if (kind == TOKEN_ASTERISK_SINGLE) { return "TOKEN_ASTERISK_SINGLE"; }
    else if (kind == TOKEN_NOT_EQUAL) { return "TOKEN_NOT_EQUAL"; }
    else if (kind == TOKEN_BANG) { return "TOKEN_BANG"; }
    else if (kind == TOKEN_SLASH_SINGLE) { return "TOKEN_SLASH_SINGLE"; }
    else if (kind == TOKEN_PERCENT) { return "TOKEN_PERCENT"; }
    else if (kind == TOKEN_PIPE_DOUBLE) { return "TOKEN_PIPE_DOUBLE"; }
    else if (kind == TOKEN_DOTDOTDOT) { return "TOKEN_DOTDOTDOT"; }
    else unsafe {
        printf("Please implement tokenKindToString(%llu)\n", kind);
        exit(1);
    }
    return ""; // Unreachable
}
struct Token {
    moduleID: usize;
    span: Span;
    content: SubStr;
    kind: usize;

    func print(&this) {
        unsafe { printf("kind=%llu, content=", this.kind); }
        this.content.print();
    }
    func getLocation(&this) -> String {
        // FIXME: The spans report in bytes, but the formatting makes it look like line and column
        mut s: String = modules[this.moduleID].origin.toString();
        s.pushChar(':');
        let _s: String = this.span.toString();
        s.pushString(&_s);
        _s.drop();
        return s;
    }
    func toString(&this) -> String {
        return this.content.toString();
    }
    func getSubStr(&this) -> SubStr {
        return this.content;
    }
    func getSpan(&this) -> Span {
        return this.span;
    }
    func equals(&mut this, other: &Token) -> bool {
        if (this.kind != other.kind) return false;
        if (this.moduleID != other.moduleID) return false;
        if (!this.span.equals(&other.span)) return false;
        if (!this.content.equals(&other.content)) return false;
        return true;
    }
}

func dummyToken(kind: usize) -> Token {
    return newToken(0, &defaultSubStr(), 0, kind);
}

func newToken(moduleID: usize, sub: &SubStr, start: usize, kind: usize) -> Token {
    let s: Span = newSpan(start, start + sub.len);
    return Token {
        moduleID: moduleID,
        content: *sub,
        span: s,
        kind: kind
    };
}
func newTokenEOF(moduleID: usize, start: usize) -> Token {
    return Token {
        moduleID: moduleID,
        content: newSubStr("End Of File", 0, 11),
        span: newSpan(start, start + 1),
        kind: TOKEN_EOF,
    };
}
func defaultToken() -> Token {
    return Token {
        moduleID: 0,
        content: defaultSubStr(),
        span: newSpan(0, 0),
        kind: TOKEN_EOF,
    };
}
