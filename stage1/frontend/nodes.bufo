import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../util/span.bufo";
import "../util/lists.bufo";
import "../util/arena.bufo";
import "./context.bufo";
import "./token.bufo";
import "./lexer.bufo";
import "../middleend/checker.bufo";
import "../middleend/types.bufo";

// Arbitrary number chosen as a magic constant for various things
// idea: We'll never have more than that many expressions or type nodes
//       if you ever have 10 billion expressions, please tell me how :^)
comptime NODE_ID_OFFSET: usize = 10000000000;

func mangleVariableName(
    moduleID: usize,
    name: &Token,
) -> String {
    if (moduleID == NODE_ID_OFFSET) {
        return name.content.toString();
    } else {
        mut mangledName: String = blank;
        mangledName.pushNumber(moduleID);
        mangledName.pushSubStr(&name.content);
        return mangledName;
    }
}

func mangleFunctionName(
    parentID: usize,
    name: &Token,
    params: &mut ParamContext,
    retTypeID: usize,
    isMethod: bool,
    isComptime: bool,
    isExtern: bool
) -> String {
    mut mangledName: String = blank;
    if (isExtern) return name.content.toString();
    // Method  : StructName-Name-ParamsTypeID-.RetTypeID
    // Function: ModID     -Name-ParamsTypeID-.RetTypeID-[0|1]-[0|1]
    if (isMethod) {
        let strukt: &mut ParsedStructDecl = structDecls.at(parentID);
        mangledName.pushSubStr(&strukt.name.content);
    }
    mangledName.pushSubStr(&name.content);
    for (mut i: usize = 0; i < params.paramLength; i = i + 1) {
        let name: Token = params.getNameAtIndex(i);
        let id: usize = params.getTypeAtIndex(i);
        let typeNode: &mut ParsedTypeNode = typeNodes.at(id);
        assert_with_msg(typeNode.typeState.isSuccess(), "Expected valid parameter type for mangling");
        let typ: &mut Type = types.at(typeNode.typeState.getType());
        let _typ: String = typ.getMangledName();
        mangledName.pushString(&_typ);
        _typ.drop();
    }
    mangledName.pushChar('r');
    if (retTypeID != 0) {
        let retNode: &mut ParsedTypeNode = typeNodes.at(retTypeID);
        assert_with_msg(retNode.typeState.isSuccess(), "Expected valid return type for mangling");
        let typ: &mut Type = types.at(retNode.typeState.getType());
        let _typ: String = typ.getMangledName();
        mangledName.pushString(&_typ);
        _typ.drop();
    } else {
        mangledName.pushChar('n');
    }
    if (!isMethod) {
        mangledName.pushChar('f');
        mut n: usize = 0;
        if (isComptime) n = 1;
        mangledName.pushNumber(n);
        if (isExtern) n = 1;
        else n = 0;
        mangledName.pushNumber(n);
    }
    return mangledName;
}

mut modules: ParsedModuleArena = blank;
mut topLevelItems: ParsedTopLevelItemArena = blank;
mut structDecls: ParsedStructDeclArena = blank;
mut funcDecls: ParsedFuncDeclArena = blank;
mut methods: ParsedMethodArena = blank;
mut blocks: ParsedBlockArena = blank;
mut stmts: ParsedStmtArena = blank;
mut typeNodes: ParsedTypeNodeArena = blank;
mut exprs: ParsedExprArena = blank;
mut compilerFlags: ParsedCompilerFlagArena = blank;

func getModuleByFilePath(path: SubStr, moduleID: &mut usize) -> bool {
    for (mut i: usize = 0; i < modules.length; i = i + 1) {
        let mod: &mut ParsedModule = modules.at(i);
        if (mod.origin.equals(&path)) {
            *moduleID = i;
            return true;
        }
    }
    return false;
}

comptime COMPILER_FLAG_LIBRARY: SubStr = BUILD_A_KEYWORD("library");
comptime COMPILER_FLAG_LIBPATH: SubStr = BUILD_A_KEYWORD("libpath");
comptime COMPILER_FLAG_LINKER: SubStr = BUILD_A_KEYWORD("linker");
struct ParsedCompilerFlag {
    flag: Token;
    value: Token;
    func equals(&this, other: &ParsedCompilerFlag) -> bool {
        if (!this.flag.content.equals(&other.flag.content)) return false;
        return this.value.content.equals(&other.value.content);
    }
}

func newParsedCompilerFlag(flag: Token, value: Token) -> &mut ParsedCompilerFlag {
    let f: &SubStr = &flag.content;
    if (!f.equals(&COMPILER_FLAG_LIBRARY)
        && !f.equals(&COMPILER_FLAG_LIBPATH)
        && !f.equals(&COMPILER_FLAG_LINKER)) {
        todo_with_msg("unknown compiler_flag");
    }
    compilerFlags.push(ParsedCompilerFlag {
        flag: flag,
        value: value,
    });
    return compilerFlags.last();
}

struct ParsedModule {
    origin: SubStr;
    tliList: &mut usize;
    tliLength: usize;
    tliCapacity: usize;

    func getID(&mut this) -> usize {
        trace("ParsedModule.getID");
        return modules.indexOf(this);
    }

    func addTopLevelItem(&mut this, tli: &mut ParsedTopLevelItem) {
        trace("ParsedModule.addTopLevelItem");
        if (this.tliLength >= this.tliCapacity) unsafe {
            mut newCap: usize = this.tliCapacity * 2;
            if (newCap == 0) newCap = 1;
            this.tliList = realloc(this.tliList, newCap * sizeof usize);
            assert_with_msg(this.tliList != null, "Could not resize tli list");
            this.tliCapacity = newCap;
        }
        unsafe {
            *(this.tliList + this.tliLength * sizeof usize) = tli.getID();
            this.tliLength = this.tliLength + 1;
        }
    }

    func getTopLevelItemAtIndex(&mut this, index: usize) -> usize {
        assert_with_msg(index < this.tliLength, "Out of bounds access in getTopLevelItemAtIndex");
        unsafe {
            return *(this.tliList + index * sizeof usize);
        }
    }
}

func newParsedModule(origin: SubStr) -> &mut ParsedModule {
    trace("newParsedModule");
    modules.push(ParsedModule {
        origin: origin,
    });
    return modules.last();
}

comptime TLI_INVALID: usize = 0;
comptime TLI_IMPORT: usize = 1;
comptime TLI_VAR_DECL: usize = 2;
comptime TLI_STRUCT_DECL: usize = 3;
comptime TLI_FUNC_DECL: usize = 4;
struct ParsedTopLevelItem {
    kind: usize;
    span: Span;
    nodeID: usize;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedTopLevelItem.getID");
        return topLevelItems.indexOf(this);
    }
}

func newParsedTopLevelItem(span: Span, kind: usize, nodeID: usize) -> &mut ParsedTopLevelItem {
    trace("newParsedTopLevelItem");
    topLevelItems.push(ParsedTopLevelItem {
        kind: kind,
        span: span,
        nodeID: nodeID,
        typeState: blank,
    });
    return topLevelItems.last();
}

struct ParsedStructDecl {
    parentModule: usize;
    name: Token;
    span: Span;
    context: StructContext;
    typeState: TCState;
    func getID(&mut this) -> usize {
        trace("ParsedStructDecl.getID");
        return structDecls.indexOf(this);
    }
    func asTLI(&mut this) -> &mut ParsedTopLevelItem {
        trace("ParsedStructDecl.asTLI");
        return newParsedTopLevelItem(this.span, TLI_STRUCT_DECL, this.getID());
    }

    func getFieldIndex(&mut this, name: &SubStr) -> usize {
        return this.context.getFieldIndex(name);
    }
    func getFieldOffset(&mut this, name: &SubStr) -> usize {
        mut offset: usize = 0;
        mut _idc: usize = 0;
        this.getFieldOffsetAndSize(this.getFieldIndex(name), &mut offset, &mut _idc);
        return offset;
    }
    func getFieldOffsetAndSize(&mut this, index: usize, offset: &mut usize, size: &mut usize) {
        trace("ParsedStructDecl.getFieldOffsetAndSize");
        mut o: usize = 0;
        for (mut i: usize = 0; i < this.context.fieldLength; i = i + 1) {
            let field: usize = this.context.getFieldTypeAtIndex(i);
            let f1: &mut ParsedTypeNode = typeNodes.at(field);
            let f: &mut Type = types.at(f1.typeState.getType());
            mut s: usize = f.getSize();
            s = nextMultipleOf(s, f.getAlignment());
            if (i == index) {
                *offset = o;
                *size = s;
                return;
            }
            o = o + s;
        }
        unreachable("Expected to find field offset and size");
    }
}

func newParsedStructDecl(parent: usize, span: Span, name: Token) -> &mut ParsedStructDecl {
    trace("newParsedStructDecl");
    structDecls.push(ParsedStructDecl {
        parentModule: parent,
        name: name,
        span: span,
        context: blank,
        typeState: blank,
    });
    return structDecls.last();
}

struct ParsedMethod {
    parentID: usize;
    name: Token;
    isStatic: bool;
    params: ParamContext;
    retTypeID: usize;
    body: usize;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedMethod.getID");
        return methods.indexOf(this);
    }

    func getMangledName(&mut this) -> String {
        trace("ParsedMethod.getMangledName");
        assert_with_msg(this.typeState.isSuccess(), "Mangling can only be done after type checks");
        return mangleFunctionName(
            this.parentID,
            &this.name,
            &mut this.params,
            this.retTypeID,
            true,  // isMethod
            false, // isComptime,
            false, // isExtern,
        );
    }
}

func newParsedMethod(parentID: usize, name: Token, mut params: ParamContext, retType: &mut ParsedTypeNode, body: usize) -> &mut ParsedMethod {
    methods.push(ParsedMethod {
        parentID: parentID,
        name: name,
        params: params,
        typeState: blank,
        retTypeID: retType.getID(),
        body: body,
        isStatic: !params.hasThis(),
    });
    return methods.last();
}

struct ParsedFuncDecl {
    parentID: usize;
    name: Token;
    span: Span;
    params: ParamContext;
    retTypeID: usize;
    body: usize;
    isComptime: bool;
    isExtern: bool;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedFuncDecl.getID");
        return funcDecls.indexOf(this);
    }

    func getMangledName(&mut this) -> String {
        trace("ParsedFuncDecl.getMangledName");
        assert_with_msg(this.typeState.isSuccess(), "Mangling can only be done after type checks");
        return mangleFunctionName(
            this.parentID,
            &this.name,
            &mut this.params,
            this.retTypeID,
            false, // isMethod
            this.isComptime,
            this.isExtern,
        );
    }

    func asTLI(&mut this) -> &mut ParsedTopLevelItem {
        trace("ParsedFuncDecl.asTLI");
        return newParsedTopLevelItem(this.span, TLI_FUNC_DECL, this.getID());
    }
}

func newParsedFuncDecl(parentID: usize, span: Span, name: Token, params: ParamContext, retType: &mut ParsedTypeNode, body: usize, isExtern: bool) -> &mut ParsedFuncDecl {
    funcDecls.push(ParsedFuncDecl {
        parentID: parentID,
        name: name,
        span: span,
        params: params,
        retTypeID: retType.getID(),
        body: body,
        isComptime: false,
        isExtern: isExtern,
        typeState: blank,
    });
    return funcDecls.last();
}

struct ParsedBlock {
    span: Span;
    stmtList: &mut usize;
    stmtLength: usize;
    stmtCapacity: usize;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedBlock.getID");
        return blocks.indexOf(this);
    }
    func addStmt(&mut this, stmt: &mut ParsedStmt) {
        trace("ParsedBlock.addStmt");
        if (this.stmtLength >= this.stmtCapacity) unsafe {
            mut newCap: usize = this.stmtCapacity * 2;
            if (newCap == 0) newCap = 1;
            this.stmtList = realloc(this.stmtList, newCap * sizeof usize);
            assert_with_msg(this.stmtList != null, "Could not resize stmt list");
            this.stmtCapacity = newCap;
        }
        unsafe {
            *(this.stmtList + this.stmtLength * sizeof usize) = stmt.getID();
            this.stmtLength = this.stmtLength + 1;
        }
    }

    func getStmtAtIndex(&mut this, index: usize) -> usize {
        trace("ParsedBlock.getStmtAtIndex");
        assert_with_msg(index < this.stmtLength, "Out of bounds access in ParsedBlock.getStmtAtIndex");
        unsafe {
            return *(this.stmtList + index * sizeof usize);
        }
    }
}

func newParsedBlock() -> &mut ParsedBlock {
    blocks.push(ParsedBlock {});
    return blocks.last();
}

comptime STMT_INVALID: usize = 0;
// if VarDecl is global, set block to moduleID, otherwise, set block to MAX
comptime STMT_VAR_DECL: usize = 1;
comptime STMT_RETURN_EMPTY: usize = 2;
comptime STMT_RETURN_EXPR: usize = 3;
comptime STMT_EXPR: usize = 4;
comptime STMT_BLOCK: usize = 5;
comptime STMT_IF: usize = 6;
comptime STMT_WHILE: usize = 7;
comptime STMT_BREAK: usize = 8;
comptime STMT_CONTINUE: usize = 9;
// FIXME: The amount of memory wasted here is crazy
struct ParsedStmt {
    kind: usize;
    span: Span;
    varDeclContext: VarDeclContext;
    expr: usize;
    block: usize;
    step: usize;
    ifContext: IfContext;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedStmt.getID");
        return stmts.indexOf(this);
    }

    func asTLI(&mut this) -> &mut ParsedTopLevelItem {
        trace("ParsedStmt.asTLI");
        if (this.kind == STMT_VAR_DECL) {
            return newParsedTopLevelItem(this.span, TLI_VAR_DECL, this.getID());
        } else {
            todo_with_msg("Can't convert stmt to tli");
            unsafe { return null; }
        }
    }

    func getMangledName(&mut this) -> String {
        assert_with_msg(this.kind == STMT_VAR_DECL, "Only variable declarations can get their names mangled");
        assert_with_msg(this.block < NODE_ID_OFFSET, "Only global variable declarations can get their names mangled");
        return mangleVariableName(this.block, &this.varDeclContext.name);
    }
}

func newParsedStmt(span: Span, kind: usize) -> &mut ParsedStmt {
    trace("newParsedStmt");
    stmts.push(ParsedStmt {
        span: span,
        kind: kind,
    });
    return stmts.last();
}

// REVIEW: These names might need changing once we make it to the Type Checker
comptime PARSED_TYPE_INVALID: usize = 0;
comptime PARSED_TYPE_UNKNOWN: usize = 1;
comptime PARSED_TYPE_NONE: usize = 2;
comptime PARSED_TYPE_ANY: usize = 3;
comptime PARSED_TYPE_BLANK: usize = 4;
comptime PARSED_TYPE_I8: usize = 5;
comptime PARSED_TYPE_I16: usize = 6;
comptime PARSED_TYPE_I32: usize = 7;
comptime PARSED_TYPE_I64: usize = 8;
comptime PARSED_TYPE_U8: usize = 9;
comptime PARSED_TYPE_U16: usize = 10;
comptime PARSED_TYPE_U32: usize = 11;
comptime PARSED_TYPE_U64: usize = 12;
comptime PARSED_TYPE_USIZE: usize = 13;
comptime PARSED_TYPE_BOOL: usize = 14;
comptime PARSED_TYPE_CHAR: usize = 15;
comptime PARSED_TYPE_IDENT: usize = 16;
comptime PARSED_TYPE_REF: usize = 17;
comptime PARSED_TYPE_ARRAY: usize = 18;
comptime PARSED_TYPE_F32: usize = 19;
comptime PARSED_TYPE_F64: usize = 20;
comptime PARSED_TYPE_BUILTIN: usize = 21;
comptime func BUILD_A_TYPE(s: &char) -> SubStr {
    unsafe {
        return SubStr {
            start: s,
            len: comptimeStrlen(s)
        };
    }
}

comptime ANY: SubStr = BUILD_A_TYPE("Any");
comptime I8: SubStr = BUILD_A_TYPE("i8");
comptime I16: SubStr = BUILD_A_TYPE("i16");
comptime I32: SubStr = BUILD_A_TYPE("i32");
comptime I64: SubStr = BUILD_A_TYPE("i64");
comptime U8: SubStr = BUILD_A_TYPE("u8");
comptime U16: SubStr = BUILD_A_TYPE("u16");
comptime U32: SubStr = BUILD_A_TYPE("u32");
comptime U64: SubStr = BUILD_A_TYPE("u64");
comptime USIZE: SubStr = BUILD_A_TYPE("usize");
comptime F32: SubStr = BUILD_A_TYPE("f32");
comptime F64: SubStr = BUILD_A_TYPE("f64");
comptime BOOL: SubStr = BUILD_A_TYPE("bool");
comptime CHAR: SubStr = BUILD_A_TYPE("char");
func getBuiltinTypeKind(name: Token) -> usize {
    if (name.content.equals(&ANY)) return PARSED_TYPE_ANY;
    else if (name.content.equals(&I8)) return PARSED_TYPE_I8;
    else if (name.content.equals(&I16)) return PARSED_TYPE_I16;
    else if (name.content.equals(&I32)) return PARSED_TYPE_I32;
    else if (name.content.equals(&I64)) return PARSED_TYPE_I64;
    else if (name.content.equals(&U8)) return PARSED_TYPE_U8;
    else if (name.content.equals(&U16)) return PARSED_TYPE_U16;
    else if (name.content.equals(&U32)) return PARSED_TYPE_U32;
    else if (name.content.equals(&U64)) return PARSED_TYPE_U64;
    else if (name.content.equals(&USIZE)) return PARSED_TYPE_USIZE;
    else if (name.content.equals(&F32)) return PARSED_TYPE_F32;
    else if (name.content.equals(&F64)) return PARSED_TYPE_F64;
    else if (name.content.equals(&BOOL)) return PARSED_TYPE_BOOL;
    else if (name.content.equals(&CHAR)) return PARSED_TYPE_CHAR;
    return PARSED_TYPE_INVALID;
}
struct ParsedTypeNode {
    span: Span;
    kind: usize;
    underlyingID: usize;
    arraySize: usize;
    nameTkn: Token;
    typeState: TCState;

    func getID(&mut this) -> usize {
        trace("ParsedTypeNode.getID");
        return typeNodes.indexOf(this);
    }
}

func newParsedTypeNode(span: Span, kind: usize) -> &mut ParsedTypeNode {
    trace("newParsedTypeNode");
    typeNodes.push(ParsedTypeNode {
        span: span,
        kind: kind,
    });
    return typeNodes.last();
}

func newBuiltinTypeDecl(span: Span, kind: usize) -> &mut ParsedTypeNode {
    trace("newBuiltinTypeDecl");
    let t: &mut ParsedTypeNode = typeNodes.at(kind);
    (*t).span = span;
    (*t).kind = PARSED_TYPE_BUILTIN;
    return t;
}

comptime ASSOC_LEFT: usize = 0;
comptime ASSOC_RIGHT: usize = 1;

comptime EXPR_INVALID: usize = 0;
comptime EXPR_EMPTY: usize = 1;
comptime EXPR_INT_LIT: usize = 2;
comptime EXPR_STRING_LIT: usize = 3;
comptime EXPR_CHAR_LIT: usize = 4;
comptime EXPR_ARRAY_LIT: usize = 5;
// name -> op is 1 if it's a global variable
// name -> LHS is ID of VarDecl, set by TypeChecker
//      -> if name is a parameter, set LHS to MAX+param#
comptime EXPR_NAME: usize = 6;
// unary -> op and LHS is set
comptime EXPR_UNARY: usize = 7;
comptime EXPR_BINARY: usize = 8;
// call -> origToken is fn name, arrayContext is args
// call -> LHS is ID of FuncDecl we call, set by TypeChecker
comptime EXPR_CALL: usize = 9;
// sizeof -> LHS is set
comptime EXPR_SIZEOF: usize = 10;
comptime EXPR_STRUCT_INIT: usize = 11;
// as -> LHS is expr, RHS is type ID
comptime EXPR_AS: usize = 12;
comptime EXPR_NULL: usize = 13;
comptime EXPR_BLANK: usize = 14;
comptime EXPR_TRUE: usize = 15;
comptime EXPR_FALSE: usize = 16;
struct ParsedExpr {
    span: Span;
    kind: usize;
    origToken: Token;
    // REVIEW: We don't need to waste all that memory
    arrayContext: ArrayContext;
    structInitContext: StructInitContext;
    // FIXME: Do we need to waste that memory for all expressions, even if they're not binary ops?
    // REVIEW: We could store binOp in origToken and compute the op on the fly?
    op: usize;
    lhs: usize;
    rhs: usize;
    typeState: TCState;
    func getID(&mut this) -> usize {
        trace("ParsedExpr.getID");
        return exprs.indexOf(this);
    }

    func intoPointer(&mut this) -> usize {
        let unary: &mut ParsedExpr = newParsedExpr(this.span, EXPR_UNARY);
        (*unary).op = UNARY_REF;
        (*unary).lhs = this.getID();
        return unary.getID();
    }

    func isLValue(&mut this) -> bool {
        if (this.kind == EXPR_UNARY) {
            return this.op == UNARY_DEREF;
        } else if (this.kind == EXPR_BINARY) {
            if (this.op == BIN_DOT) {
                return exprs.at(this.rhs).kind == EXPR_NAME;
            }
            if (this.op == BIN_INDEXED_ACCESS) return true;
            return false;
        } else {
            return this.kind == EXPR_NAME;
        }
    }

    func isBlank(&mut this) -> bool {
        return this.kind == EXPR_BLANK;
    }
    func isIdentifier(&mut this) -> bool {
        return this.kind == EXPR_NAME;
    }
    func isLiteral(&mut this) -> bool {
        return this.kind == EXPR_INT_LIT
            || this.kind == EXPR_STRING_LIT
            || this.kind == EXPR_CHAR_LIT
            || this.kind == EXPR_ARRAY_LIT
            || this.kind == EXPR_NULL
            || this.kind == EXPR_TRUE
            || this.kind == EXPR_FALSE;
    }

    func isUnary(&mut this) -> bool {
        return this.kind == EXPR_UNARY;
    }

    func isCall(&mut this) -> bool {
        return this.kind == EXPR_CALL;
    }

    func isAssignment(&mut this) -> bool {
        if (this.kind != EXPR_BINARY) return false;
        return this.op == BIN_ASSIGN;
    }

    func isArithmetic(&mut this) -> bool {
        if (this.kind != EXPR_BINARY) return false;
        return this.op == BIN_PLUS
            || this.op == BIN_SUB
            || this.op == BIN_MULT
            || this.op == BIN_DIV
            || this.op == BIN_MOD;
    }

    func isComparison(&mut this) -> bool {
        if (this.kind != EXPR_BINARY) return false;
        return this.op == BIN_CMP_GTE
            || this.op == BIN_CMP_GT
            || this.op == BIN_CMP_LTE
            || this.op == BIN_CMP_LT
            || this.op == BIN_CMP_EQ
            || this.op == BIN_CMP_NEQ;
    }

    func isLogical(&mut this) -> bool {
        if (this.kind != EXPR_BINARY) return false;
        return this.op == BIN_LAND
            || this.op == BIN_LOR;
    }

    func isBitwise(&mut this) -> bool {
        if (this.kind != EXPR_BINARY) return false;
        return this.op == BIN_BAND
            || this.op == BIN_BOR
            || this.op == BIN_BXOR;
    }
}

comptime BIN_INVALID: usize = 0;
comptime BIN_PLUS: usize = 1;
comptime BIN_SUB: usize = 2;
comptime BIN_MULT: usize = 3;
comptime BIN_DIV: usize = 4;
comptime BIN_DOT: usize = 5;
comptime BIN_CMP_GTE: usize = 6;
comptime BIN_CMP_GT: usize = 7;
comptime BIN_CMP_LTE: usize = 8;
comptime BIN_CMP_LT: usize = 9;
comptime BIN_CMP_NEQ: usize = 10;
comptime BIN_CMP_EQ: usize = 11;
comptime BIN_ASSIGN: usize = 12;
comptime BIN_AS: usize = 13;
comptime BIN_INDEXED_ACCESS: usize = 14;
comptime BIN_MOD: usize = 15;
// FIXME: Those names are pretty easy to mix up
comptime BIN_LAND: usize = 16;
comptime BIN_LOR: usize = 17;
comptime BIN_BAND: usize = 18;
comptime BIN_BOR: usize = 19;
comptime BIN_BXOR: usize = 20;
func binOpFromKind(kind: usize) -> usize {
    trace("binOpFromKind");
    if (kind == TOKEN_PLUS_SINGLE) return BIN_PLUS;
    else if (kind == TOKEN_MINUS_SINGLE) return BIN_SUB;
    else if (kind == TOKEN_ASTERISK_SINGLE) return BIN_MULT;
    else if (kind == TOKEN_SLASH_SINGLE) return BIN_DIV;
    else if (kind == TOKEN_DOT) return BIN_DOT;
    else if (kind == TOKEN_GREATER_THAN_EQUAL) return BIN_CMP_GTE;
    else if (kind == TOKEN_GREATER_THAN) return BIN_CMP_GT;
    else if (kind == TOKEN_LESS_THAN_EQUAL) return BIN_CMP_LTE;
    else if (kind == TOKEN_LESS_THAN) return BIN_CMP_LT;
    else if (kind == TOKEN_NOT_EQUAL) return BIN_CMP_NEQ;
    else if (kind == TOKEN_EQUAL_DOUBLE) return BIN_CMP_EQ;
    else if (kind == TOKEN_EQUAL_SINGLE) return BIN_ASSIGN;
    // FIXME: We can't know if this is actually KEYWORD_AS
    else if (kind == TOKEN_KEYWORD) return BIN_AS;
    else if (kind == TOKEN_SQUARE_OPEN) return BIN_INDEXED_ACCESS;
    else if (kind == TOKEN_PERCENT) return BIN_MOD;
    else if (kind == TOKEN_PIPE_SINGLE) return BIN_BOR;
    else if (kind == TOKEN_PIPE_DOUBLE) return BIN_LOR;
    else if (kind == TOKEN_AMPERSAND_SINGLE) return BIN_BAND;
    else if (kind == TOKEN_AMPERSAND_DOUBLE) return BIN_LAND;
    else if (kind == TOKEN_CARET) return BIN_BXOR;
    else unsafe {
        printf("%llu\n", kind);
        todo_with_msg("binOpFromKind");
    }
    return 0;
}

func binOpAsStr(op: usize) -> &char {
    if (op == BIN_PLUS) return "+";
    else if (op == BIN_SUB) return "-";
    else if (op == BIN_MULT) return "*";
    else if (op == BIN_DIV) return "/";
    else if (op == BIN_DOT) return ".";
    else if (op == BIN_CMP_GTE) return ">=";
    else if (op == BIN_CMP_GT) return ">";
    else if (op == BIN_CMP_LTE) return "<=";
    else if (op == BIN_CMP_LT) return "<";
    else if (op == BIN_CMP_NEQ) return "!=";
    else if (op == BIN_CMP_EQ) return "==";
    else if (op == BIN_ASSIGN) return "=";
    else if (op == BIN_AS) return "as";
    else if (op == BIN_INDEXED_ACCESS) return "[]";
    else if (op == BIN_MOD) return "%";
    else if (op == BIN_LAND) return "&&";
    else if (op == BIN_LOR) return "||";
    else if (op == BIN_BAND) return "&";
    else if (op == BIN_BOR) return "|";
    unreachable("Exhaustive handling of binary ops in binOpAsStr");
    return "";
}

comptime UNARY_INVALID: usize = 0;
comptime UNARY_DEREF: usize = 1;
comptime UNARY_REF: usize = 2;
comptime UNARY_MINUS: usize = 3;
comptime UNARY_NOT: usize = 4;
func unaryOpFromKind(kind: usize) -> usize {
    trace("unaryOpFromKind");
    if (kind == TOKEN_ASTERISK_SINGLE) return UNARY_DEREF;
    else if (kind == TOKEN_AMPERSAND_SINGLE) return UNARY_REF;
    else if (kind == TOKEN_MINUS_SINGLE) return UNARY_MINUS;
    else if (kind == TOKEN_BANG) return UNARY_NOT;
    todo_with_msg("unaryOpFromKind");
    return 0;
}

func newParsedExpr(span: Span, kind: usize) -> &mut ParsedExpr {
    trace("newParsedExpr");
    exprs.push(ParsedExpr {
        kind: kind,
        span: span,
    });
    return exprs.last();
}

