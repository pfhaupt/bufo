import "prelude.bufo";
import "string.bufo";

struct Span {
    start: usize;
    end: usize;
    func equals(&this, other: &Span) -> bool {
        return this.start == other.start && this.end == other.end;
    }
    func print(&this) {
        let s: String = this.toString();
        s.print();
        s.drop();
    }
    func toString(&this) -> String {
        mut s: String = newString();
        s.pushNumber(this.start);
        s.pushChar(':');
        s.pushNumber(this.end);
        return s;
    }
    func comesBefore(&this, other: &Span) -> bool {
        return this.start < other.start;
    }
}

func newSpan(start: usize, end: usize) -> Span {
    assert_with_msg(end >= start, "Invalid size for newSpan()");
    return Span {
        start: start,
        end: end,
    };
}
func newSpanBetween(start: &Span, end: &Span) -> Span {
    // (100:105)+(104:109)
    assert_with_msg(end.end >= start.end, "newSpanBetween: End Span can't end before Start Span.");
    assert_with_msg(start.start <= end.start, "newSpanBetween: Start Span can't start after End Span.");
    return Span {
        start: start.start,
        end: end.end
    };
}
func defaultSpan() -> Span {
    return Span {
        start: 0,
        end: 0
    };
}
