import "prelude.bufo";
import "libc.bufo";
import "substr.bufo";
import "string.bufo";
import "../../util/lists.bufo";
import "./bindings.bufo";
import "./types.bufo";
import "./basic_block.bufo";
import "./values.bufo";

struct LLVMBuilder {
    ref: LLVMBuilderRef;
    func guardReference(&mut this) {
        trace("LLVMBuilder.guardReference");
        assert_with_msg(!this.ref.isNull(), "LLVM Builder is null");
    }
    func positionAtEnd(&mut this, block: LLVMBasicBlock) {
        trace("LLVMBuilder.positionAtEnd");
        this.guardReference();
        LLVMPositionBuilderAtEnd(this.ref, block.ref);
    }
    func positionBefore(&mut this, instr: LLVMValue) {
        trace("LLVMBuilder.positionBefore");
        this.guardReference();
        LLVMPositionBuilderBefore(this.ref, instr.ref);
    }

    func getInsertBlock(&mut this) -> LLVMBasicBlock {
        trace("LLVMBuilder.getInsertBlock");
        this.guardReference();
        unsafe {
            let block: LLVMBasicBlockRef = LLVMGetInsertBlock(this.ref);
            assert_with_msg(!block.isNull(), "Could not get insert block from builder");
            return newLLVMBasicBlockFromRef(block);
        }
    }

    func buildInsertValue(&mut this, aggregate: LLVMValue, element: LLVMValue, offset: u32, name: &char) -> LLVMValue {
        trace("LLVMBuilder.buildInsertValue");
        this.guardReference();
        unsafe {
            let val: LLVMValueRef = LLVMBuildInsertValue(this.ref, aggregate.ref, element.ref, offset, name);
            assert_with_msg(!val.isNull(), "Could not build insert value in builder");
            return newLLVMValueFromRef(val);
        }
    }

    func buildAlloca(&mut this, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildAlloca");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let alloced: LLVMValueRef = LLVMBuildAlloca(this.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!alloced.isNull(), "Could not build alloca in builder");
            return newLLVMValueFromRef(alloced);
        }
    }

    func buildStore(&mut this, ptr: LLVMValue, value: LLVMValue) -> LLVMValue {
        trace("LLVMBuilder.buildStore");
        this.guardReference();
        unsafe {
            let value: LLVMValueRef = LLVMBuildStore(this.ref, value.ref, ptr.ref);
            assert_with_msg(!value.isNull(), "Could not build store in builder");
            return newLLVMValueFromRef(value);
        }
    }

    func buildLoad(&mut this, pType: LLVMType, ptr: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildLoad");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildLoad2(this.ref, pType.ref, ptr.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build load in builder");
            return newLLVMValueFromRef(value);
        }
    }

    func buildReturn(&mut this, value: LLVMValue) {
        trace("LLVMBuilder.buildReturn");
        this.guardReference();
        unsafe {
            let value: LLVMValueRef = LLVMBuildRet(this.ref, value.ref);
            assert_with_msg(!value.isNull(), "Could not build return in builder");
        }
    }
    func buildReturnVoid(&mut this) {
        trace("LLVMBuilder.buildReturnVoid");
        this.guardReference();
        unsafe {
            let value: LLVMValueRef = LLVMBuildRetVoid(this.ref);
            assert_with_msg(!value.isNull(), "Could not build return void in builder");
        }
    }
    func buildBr(&mut this, dest: LLVMBasicBlock) -> LLVMValue {
        trace("LLVMBuilder.buildBr");
        this.guardReference();
        assert_with_msg(!dest.ref.isNull(), "Destination for Br is null!");
        unsafe {
            let value: LLVMValueRef = LLVMBuildBr(this.ref, dest.ref);
            assert_with_msg(!value.isNull(), "Could not build Br");
            return newLLVMValueFromRef(value);
        }
    }
    func buildCondBr(&mut this, cond: LLVMValue, tru: LLVMBasicBlock, fals: LLVMBasicBlock) -> LLVMValue {
        trace("LLVMBuilder.buildCondBr");
        this.guardReference();
        unsafe {
            let value: LLVMValueRef = LLVMBuildCondBr(this.ref, cond.ref, tru.ref, fals.ref);
            assert_with_msg(!value.isNull(), "Could not build CondBr");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntAdd(&mut this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntAdd");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildAdd(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int add");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntSub(&mut this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntSub");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildSub(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int sub");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntMul(&mut this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntMul");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildMul(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int mul");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntDiv(&mut this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntDiv");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = blank;
            if (signed) {
                value = LLVMBuildSDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
            } else {
                value = LLVMBuildUDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
            }
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int div");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntMod(&mut this, lhs: LLVMValue, rhs: LLVMValue, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntMod");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = blank;
            if (signed) {
                value = LLVMBuildSRem(this.ref, lhs.ref, rhs.ref, _n.chars());
            } else {
                value = LLVMBuildURem(this.ref, lhs.ref, rhs.ref, _n.chars());
            }
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int mod");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatAdd(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatAdd");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = LLVMBuildFAdd(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float add");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatSub(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatSub");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = LLVMBuildFSub(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float sub");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatMul(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatMul");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = LLVMBuildFMul(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float mul");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatDiv(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatDiv");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = LLVMBuildFDiv(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float div");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatMod(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatMod");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = LLVMBuildFRem(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float mod");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntCompare(&mut this, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntCompare");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildICmp(this.ref, predicate, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int compare");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatCompare(&mut this, predicate: i32, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatCompare");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildFCmp(this.ref, predicate, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float compare");
            return newLLVMValueFromRef(value);
        }
    }
    func buildNot(&mut this, val: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildNot");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildNot(this.ref, val.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build logical not");
            return newLLVMValueFromRef(value);
        }
    }
    func buildOr(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildOr");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildOr(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build logical or");
            return newLLVMValueFromRef(value);
        }
    }
    func buildAnd(&mut this, lhs: LLVMValue, rhs: LLVMValue, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildAnd");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildAnd(this.ref, lhs.ref, rhs.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build logical and");
            return newLLVMValueFromRef(value);
        }
    }
    func buildPtrToInt(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildPtrToInt");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildPtrToInt(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build ptr to int");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntToPtr(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntToPtr");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildIntToPtr(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int to ptr");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntToFloat(&mut this, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntToFloat");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = blank;
            if (signed) {
                value = LLVMBuildSIToFP(this.ref, val.ref, typ.ref, _n.chars());
            } else {
                value = LLVMBuildUIToFP(this.ref, val.ref, typ.ref, _n.chars());
            }
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int to float");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatToInt(&mut this, val: LLVMValue, typ: LLVMType, signed: bool, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatToInt");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            mut value: LLVMValueRef = blank;
            if (signed) {
                value = LLVMBuildFPToSI(this.ref, val.ref, typ.ref, _n.chars());
            } else {
                value = LLVMBuildFPToUI(this.ref, val.ref, typ.ref, _n.chars());
            }
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float to int");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntZeroExtend(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntZeroExtend");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildZExt(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int zero extend");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatExtend(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatExtend");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildFPExt(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float extend");
            return newLLVMValueFromRef(value);
        }
    }
    func buildFloatTruncate(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildFloatTruncate");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildFPTrunc(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build float truncate");
            return newLLVMValueFromRef(value);
        }
    }
    func buildIntTruncate(&mut this, val: LLVMValue, typ: LLVMType, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildIntTruncate");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let value: LLVMValueRef = LLVMBuildTrunc(this.ref, val.ref, typ.ref, _n.chars());
            _n.drop();
            assert_with_msg(!value.isNull(), "Could not build int truncate");
            return newLLVMValueFromRef(value);
        }
    }
    func buildCall(&mut this, fn: LLVMValue, mut args: LLVMValueList, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildCall");
        this.guardReference();
        unsafe {
            assert(sizeof LLVMValue == 8);
            let typ: LLVMType = fn.getGlobalType();
            assert_with_msg(typ.isFunction(), "Call expected LLVMType to be a function!");
            let ret: LLVMType = typ.getReturnType();
            mut _n: String = blank;
            if (ret.isVoid()) {
                // LLVM complains about named calls that return void
                _n = newStringFromStrLit("");
            } else {
                _n = name.toString();
            }
            let value: LLVMValueRef = LLVMBuildCall2(this.ref, typ.ref, fn.ref, args.elements as &LLVMValueRef, args.length as u32, _n.chars());
            _n.drop();
            args.clear();
            assert_with_msg(!value.isNull(), "Could not build call");
            return newLLVMValueFromRef(value);
        }
    }
    func buildGlobalStringPtr(&mut this, start: &char, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildGlobalStringPtr");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let s: LLVMValueRef = LLVMBuildGlobalStringPtr(this.ref, start, _n.chars());
            _n.drop();
            assert_with_msg(!s.isNull(), "Could not build global string");
            return newLLVMValueFromRef(s);
        }
    }
    func buildStructGEP(&mut this, typ: LLVMType, aggr: LLVMValue, index: usize, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildStructGEP");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            let s: LLVMValueRef = LLVMBuildStructGEP2(this.ref, typ.ref, aggr.ref, index as u32, _n.chars());
            _n.drop();
            assert_with_msg(!s.isNull(), "Could not build struct GEP");
            return newLLVMValueFromRef(s);
        }
    }
    func buildGEP(&mut this, typ: LLVMType, aggr: LLVMValue, mut indices: LLVMValueList, name: SubStr) -> LLVMValue {
        trace("LLVMBuilder.buildGEP");
        this.guardReference();
        unsafe {
            let _n: String = name.toString();
            assert(sizeof LLVMValue == 8);
            let s: LLVMValueRef = LLVMBuildGEP2(this.ref, typ.ref, aggr.ref, indices.elements as &LLVMValueRef, indices.length as u32, _n.chars());
            _n.drop();
            indices.clear();
            assert_with_msg(!s.isNull(), "Could not build GEP");
            return newLLVMValueFromRef(s);
        }
    }
}

unsafe func newLLVMBuilderFromRef(ref: LLVMBuilderRef) -> LLVMBuilder {
    trace("newLLVMBuilderFromRef");
    assert_with_msg(!ref.isNull(), "Passed invalid reference to newLLVMBuilderFromRef");
    return LLVMBuilder {
        ref: ref,
    };
}
