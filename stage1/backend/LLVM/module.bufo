import "prelude.bufo";
import "libc.bufo";
import "string.bufo";
import "substr.bufo";
import "./bindings.bufo";
import "./types.bufo";
import "./values.bufo";
import "./pass_manager.bufo";

struct LLVMModule {
    ref: LLVMModuleRef;

    func print(&this) {
        let s: &char = LLVMPrintModuleToString(this.ref);
        unsafe {
            printf("%s\n", s);
        }
    }

    func writeToFile(&this, path: SubStr) -> bool {
        trace("LLVMModule.writeToFile");
        unsafe {
            mut err: LLVMString = blank;
            let _n: String = path.toString();
            let code: LLVMBool = LLVMPrintModuleToFile(this.ref, _n.chars(), &mut err);
            if (code.val != 0) {
                fprintf(stderr, "%s Could not write LLVM Module to file!\n", FATAL_STR);
                fprintf(stderr, "%s\n", err.chars);
                _n.drop();
                return false;
            }
            printf("%s: Written LLVM Module to %s\n", NOTE_STR, _n.chars());
            _n.drop();
            return true;
        }
    }

    func verify(&this) -> bool {
        trace("LLVMModule.verify");
        unsafe {
            mut err: LLVMString = blank;
            let code: LLVMBool = LLVMVerifyModule(this.ref, LLVMReturnStatusAction, &mut err);
            if (code.val != 0) {
                fprintf(stderr, "%s LLVM Module verification failed!\n", FATAL_STR);
                fprintf(stderr, "%s\n", err.chars);
                return false;
            }
            return true;
        }
    }

    func addFunction(&mut this, name: SubStr, function: LLVMType) -> LLVMValue {
        trace("LLVMModule.addFunction");
        assert_with_msg(!function.ref.isNull(), "Expected valid LLVMType in LLVMModule.addFunction");
        unsafe {
            let _n: String = name.toString();
            let f: LLVMValueRef = LLVMAddFunction(this.ref, _n.chars(), function.ref);
            _n.drop();
            assert_with_msg(!f.isNull(), "Could not add function to module");
            return newLLVMValueFromRef(f);
        }
    }
    func hasFunction(&mut this, name: SubStr) -> bool {
        trace("LLVMModule.hasFunction");
        unsafe {
            let _n: String = name.toString();
            let f: LLVMValueRef = LLVMGetNamedFunction(this.ref, _n.chars());
            _n.drop();
            return !f.isNull();
        }
    }
    func getFunction(&mut this, name: SubStr) -> LLVMValue {
        trace("LLVMModule.getFunction");
        unsafe {
            let _n: String = name.toString();
            let f: LLVMValueRef = LLVMGetNamedFunction(this.ref, _n.chars());
            _n.drop();
            assert_with_msg(!f.isNull(), "Could not get function from module");
            return newLLVMValueFromRef(f);
        }
    }
    func addGlobal(&mut this, typ: LLVMType, space: u32, name: SubStr) -> LLVMValue {
        trace("LLVMModule.addGlobal");
        assert_with_msg(!typ.ref.isNull(), "Expected valid LLVMType in LLVMModule.addGlobal");
        unsafe {
            let _n: String = name.toString();
            let g: LLVMValueRef = LLVMAddGlobalInAddressSpace(this.ref, typ.ref, _n.chars(), space);
            _n.drop();
            assert_with_msg(!g.isNull(), "Could not add global in module");
            return newLLVMValueFromRef(g);
        }
    }
    func getGlobal(&mut this, name: SubStr) -> LLVMValue {
        trace("LLVMModule.getGlobal");
        unsafe {
            let _n: String = name.toString();
            let g: LLVMValueRef = LLVMGetNamedGlobal(this.ref, _n.chars());
            _n.drop();
            assert_with_msg(!g.isNull(), "Could not get global in module");
            return newLLVMValueFromRef(g);
        }
    }

    func createPassManager(&mut this) -> LLVMPassManager {
        trace("LLVMModule.createPassManager");
        unsafe {
            let pm: LLVMPassManagerRef = LLVMCreatePassManager();
            assert_with_msg(!pm.isNull(), "Could not create pass manager for module");
            return newLLVMPassManagerFromRef(pm);
        }
    }
    func runInPassManager(&mut this, pm: LLVMPassManager) -> bool {
        trace("LLVMModule.runInPassManager");
        assert(!this.ref.isNull());
        assert(!pm.ref.isNull());
        unsafe {
            return LLVMRunPassManager(pm.ref, this.ref) == 1;
        }
    }
}

unsafe func newLLVMModuleFromRef(ref: LLVMModuleRef) -> LLVMModule {
    trace("newLLVMModuleFromRef");
    assert_with_msg(!ref.isNull(), "Passed invalid reference to newLLVMModuleFromRef");
    return LLVMModule {
        ref: ref
    };
}
