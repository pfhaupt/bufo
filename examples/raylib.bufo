
import "prelude.bufo";
import "libc.bufo";

// TODO: Structs in modules don't work yet
struct Color {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}

struct Image {
    data: Any;
    width: i32;
    height: i32;
    mipmaps: i32;
    format: i32;
}

struct AudioStream {
    buffer: Any;
    processor: Any;

    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
}

struct Sound {
    stream: AudioStream;
    frameCount: u32;
}

struct Wave {
    frameCount: u32;
    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
    data: Any;
}

struct Vector2 {
    x: f32;
    y: f32;
}

module raylib {
    @os(WINDOWS) config {
        library: "raylib",
        libpath: "./raylib/lib",
        library: "OpenGL32",
        library: "msvcrt",
        library: "Gdi32",
        library: "WinMM",
        library: "kernel32",
        library: "shell32",
        library: "User32",
        linker: "/NODEFAULTLIB:libcmt",
    }
    @extern("InitWindow") func InitWindow(width: i32, height: i32, title: &char);
    @extern("CloseWindow") func CloseWindow();
    @extern("InitAudioDevice") func InitAudioDevice();
    @extern("CloseAudioDevice") func CloseAudioDevice();
    @extern("WindowShouldClose") func WindowShouldClose() -> bool;
    @extern("BeginDrawing") func BeginDrawing();
    @extern("EndDrawing") func EndDrawing();
    @extern("ClearBackground") func ClearBackground(c: Color);
    @extern("DrawRectangleV") func DrawRectangleV(pos: Vector2, size: Vector2, col: Color);
    @extern("ColorFromHSV") func ColorFromHSV(h: f32, s: f32, v: f32) -> Color;
    @extern("GetColor") func GetColor(val: u32) -> Color;
    @extern("LoadImageFromScreen") func LoadImageFromScreen() -> Image;
    @extern("ExportImage") func ExportImage(i: Image, name: &char) -> bool;
    @extern("PlaySound") func PlaySound(sound: Sound);
    @extern("LoadSound") func LoadSound(fileName: &char) -> Sound;
    @extern("IsSoundValid") func IsSoundValid(sound: Sound) -> bool;
    @extern("LoadWave") func LoadWave(fileName: &char) -> Wave;
    @extern("LoadSoundFromWave") func LoadSoundFromWave(wave: Wave) -> Sound;
    @extern("SetSoundVolume") func SetSoundVolume(sound: Sound, volume: f32);
    @extern("GetTime") func GetTime() -> f64;
    @extern("SetTargetFPS") func SetTargetFPS(fps: i32);

    func actual_test() {
        comptime WIDTH: i32 = 800;
        comptime HEIGHT: i32 = 600;
        comptime RW: f32 = 150;
        comptime RH: f32 = 150;
        raylib.InitWindow(WIDTH, HEIGHT, "actual_test: Hello from bufo!");
        raylib.InitAudioDevice();
        comptime FPS: i32 = 60;
        comptime PixelPerSecond: i32 = 200;
        comptime PixelPerFrame: f32 = PixelPerSecond as f32 / FPS as f32;
        raylib.SetTargetFPS(FPS);
        let w = raylib.LoadWave("./metal_pipe.wav");
        let s = raylib.LoadSoundFromWave(w);
        if (raylib.IsSoundValid(s)) {
            raylib.SetSoundVolume(s, 20/100);
            raylib.PlaySound(s);
        }
        let x: f32 = 0;
        let y: f32 = 0;
        let dx: f32 = 1;
        let dy: f32 = 2;
        while (!raylib.WindowShouldClose()) {
            raylib.BeginDrawing();
            // 0x181818ff
            raylib.ClearBackground(raylib.GetColor(404232447));
            raylib.DrawRectangleV(
                Vector2 { x: x, y: y },
                Vector2 { x: RW, y: RH },
                raylib.ColorFromHSV((50 * raylib.GetTime() as f32) % 360, 1, 1)
            );
            raylib.EndDrawing();
            let nx = x + dx * PixelPerSecond as f32 / FPS as f32;
            let ny = y + dy * PixelPerSecond as f32 / FPS as f32;
            if (nx + RW >= WIDTH as f32 || nx <= 0) dx = dx * -1;
            else x = nx;
            if (ny + RH >= HEIGHT as f32 || ny <= 0) dy = dy * -1;
            else y = ny;
        }
        raylib.CloseAudioDevice();
        raylib.CloseWindow();
    }
    func simple_test(isComptime: bool, inMakefile: bool) {
        // TODO: Lookup doesn't check the current module, would be cool to not have to write
        //        all the time while within the module raylib
        if (isComptime) {
            raylib.InitWindow(600, 400, "simple_test: hello from bufo but at comptime FeelsOkayMan");
        } else {
            raylib.InitWindow(600, 400, "simple_test: hello from bufo");
        }
        let c = comptime raylib.ColorFromHSV(90, 1/10, 3/10);
        while (!raylib.WindowShouldClose()) {
            if ((isComptime || inMakefile) && raylib.GetTime() > 3) {
                if (!isComptime) {
                    // TODO: Make things like printf and assert available to comptime
                    printf("\x1b[92m[INFO] 3 seconds have passed, closing window.\x1b[0m\n");
                }
                break;
            }
            raylib.BeginDrawing();
            raylib.ClearBackground(c);
            raylib.EndDrawing();
        }
        raylib.CloseWindow();
    }
}

func main(argc: i32, argv: &&char) -> i32 {
    let inMakefile = false;
    if (argc > 1) {
        inMakefile = strcmp(argv[1], "--Makefile") == 0;
    }
    raylib.simple_test(false, inMakefile);
    (comptime raylib.simple_test(true, false));
    return 0;
}

