//! THIS IS A TEST PROGRAM
//! RUNTIME
//! SUCCESS

import "prelude.bufo";

union Foo {
    A,
    B,
    C { c: i32 },
    D([i8; 7]), // pad to 8 bytes
}

func main(argc: i32, argv: &&char) -> i32 {
    assert(sizeof Foo == 8);
    let a = Foo::A;
    let b = Foo::B;
    let c = Foo::C { c: 26985 };
    let d = Foo::D([1, 2, 3, 4, 5, 6, 7]);
    let bytes = *(&d as &usize);
    // d has the layout 0x706050403020103 in memory
    let check1 = 506097522914230531;     // that hex number, in decimal
    if (bytes != check1) {
        // yes, this depends on the endianness of the system
        let check2 = 216456469066089991; // that hex number, reversed, in decimal
        assert(bytes == check2);
    }
    return 0;
}

