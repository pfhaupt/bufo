import "prelude.bufo";
import "libc.bufo";

// Experiments to explore JIT compilation of function calls
// Will be integrated into the compiler at some point

// TODO: Struct values
// TODO: Maybe stuff that's not 8 bytes long, like u8, f32, etc.
// TODO: Struct values that are returned from the function -> Implicit first argument
// TODO: Instead of recompiling the functions, we can just store pointers to the arguments
//       and only overwrite those bytes
// TODO: Calling convention for the OS for nerds :Kappa:
// TODO: Passing arguments on the stack should consider the argument size

// FIXME: Something causes a heap corruption for `betterRaylib` when I close the window
//        Debugging indicates that it seems like _dlclose() is at fault

// Some notes:
// https://www.felixcloutier.com/x86/mov
// https://blog.kenanb.com/code/low-level/2024/01/05/x86-64-insn-encoding.html
// http://ref.x86asm.net/coder64.html#xC7
// Intel Manual:
// - page 526 Mod R/M
// - page 593 meaning io rd /r
// mov rax, 32bit immediate
// push(&buf, '\x48', '\xc7', '\xc0', '\x45', '\x00', '\x00', '\x00', '\xC3');
// mov rax, 64bit immediate
// push(&buf, '\x48', '\xb8', '\x45', '\x00', '\x00', '\x00', '\x00', '\x00');
// push(&buf, '\x00', '\x00', '\xC3');
// movss xmm0, [rax + 32bit immediate] (f32)
// push(&buf, '\xF3', '\x0F', '\x10', '\x80', '\x00', '\x00', '\x00', '\x00');
// movss xmm0, [rcx] 32bit memory (f32)
// push(&buf, '\xF3', '\x0F', '\x10', '\x81', '\x00', '\x00', '\x00', '\x00');
// movsd xmm0, [rax] 64bit memory (f64)
// push(&buf, '\xF2', '\x0F', '\x10', '\x80', '\x00', '\x00', '\x00', '\x00');
// ret
// push(&buf, '\xC3');
// int3
// push(&buf, '\xF1');
// - mov = REX.W 0xB8 rd io
// - movss = 0xF3 0x0F 0x10 /r
// - movsd = 0xF2 0x0F 0x10 /r
// - /r = Mod R/M -> 0x80 = RAX/XMM0 -> [RAX + offset]
// - REX = -> 0x0100WRXB
// - REX.W = W bit is 1 if 64bit operand -> 0x01001000 = 0x48
// - REX.R = ???
// - REX.X = ???
// - REX.B = ???
// - ib = 1-byte immediate, iw = 2-byte immediate, id = 4-byte immediate, io = 8-byte immediate
// - rd = /r is encoded in the 3 bits of operand byte -> 0xb8 = mov rax, 0xb9 = mov rcx, 0xba = mov rdx etc.
// - ModRM -> 2bits addressing mode, 3bits opcode extension, 3bits register
// - /digit => opcode extension for ModRM

@os(LINUX) @extern("dlopen") func dlopen(filename: &char, flags: i32) -> Any;
@os(LINUX) @extern("dlclose") func dlclose(handle: Any) -> i32;

@os(WINDOWS) @extern("LoadLibraryA") func _dlopen(filename: &char) -> Any;
@os(WINDOWS) func dlopen(filename: &char, flags: i32) -> Any {
    return _dlopen(filename);
}
@os(WINDOWS) @extern("FreeLibrary") func _dlclose(handle: Any) -> bool;
@os(WINDOWS) func dlclose(handle: Any) -> i32 {
    let b = _dlclose(handle);
    if (!b) return 1;
    return 0;
}

@os(WINDOWS) @extern("GetProcAddress") func GetProcAddress(handle: Any, name: &char) -> Any;
@os(WINDOWS) @extern("VirtualAlloc") func VirtualAlloc(idk: Any, bytes: usize, flags: u32, pFlags: u32) -> Any;
@os(WINDOWS) @extern("VirtualFree") func VirtualFree(address: Any, bytes: usize, flags: u32) -> bool;
@os(WINDOWS) @extern("GetLastError") func GetLastError() -> u32;

@os(WINDOWS) func getFunction(handle: Any, name: &char) -> Any {
    let fn = GetProcAddress(handle, name);
    assert(fn != null, "Could not find function");
    return fn;
}

func raylib() {
    let handle = dlopen("./raylib/lib/raylib.dll", 0);
    assert(handle != null, "Could not load raylib.dll");
    let InitWindow = getFunction(handle, "InitWindow") as func (usize, usize, &char);
    let WindowShouldClose = getFunction(handle, "WindowShouldClose") as func () -> bool;
    let BeginDrawing = getFunction(handle, "BeginDrawing") as func ();
    let EndDrawing = getFunction(handle, "EndDrawing") as func ();
    InitWindow(800, 600, "Ayo from Bufo!");
    while (!WindowShouldClose()) {
        BeginDrawing();
        EndDrawing();
    }
    assert(dlclose(handle) == 0, "Could not close raylib.dll");
}

struct ByteBuffer {
    elements: &u8;
    length: usize;
    capacity: usize;
}

func push(buf: &ByteBuffer, b1: char, b2: char, b3: char, b4: char, b5: char, b6: char, b7: char, b8: char) {
    push(buf, b1 as u8, b2 as u8, b3 as u8, b4 as u8, b5 as u8, b6 as u8, b7 as u8, b8 as u8);
}

func push(buf: &ByteBuffer, b1: char, b2: char, b3: char, b4: char) {
    push(buf, b1 as u8, b2 as u8);
    push(buf, b3 as u8, b4 as u8);
}
func push(buf: &ByteBuffer, b1: char, b2: char, b3: char) {
    push(buf, b1 as u8, b2 as u8);
    push(buf, b3 as u8);
}
func push(buf: &ByteBuffer, b1: char, b2: char) {
    push(buf, b1 as u8, b2 as u8);
}
func push(buf: &ByteBuffer, b1: char) {
    push(buf, b1 as u8);
}
func push(buf: &ByteBuffer, b1: u8, b2: u8) {
    push(buf, b1);
    push(buf, b2);
}
func push(buf: &ByteBuffer, b1: u8, b2: u8, b3: u8, b4: u8, b5: u8, b6: u8, b7: u8, b8: u8) {
    push(buf, b1);
    push(buf, b2);
    push(buf, b3);
    push(buf, b4);
    push(buf, b5);
    push(buf, b6);
    push(buf, b7);
    push(buf, b8);
}
func push(buf: &ByteBuffer, element: u8) {
    if (buf.length >= buf.capacity) {
        let newCap: usize = buf.capacity * 2;
        if (newCap == 0) newCap = 32;
        buf.elements = realloc(buf.elements, newCap * sizeof u8);
        assert(buf.elements != null, "Could not allocate memory in ByteBuffer.push");
        buf.capacity = newCap;
    }
    buf.elements[buf.length] = element;
    buf.length = buf.length + 1;
}

func extend(buf: &ByteBuffer, other: &ByteBuffer) {
    for (let i: usize = 0; i < other.length; i = i + 1) {
        push(buf, other.elements[i]);
    }
    free(other.elements);
    *other = blank;
}

comptime U64: u8 = 0;
comptime F64: u8 = 1;
comptime F32: u8 = 2;
comptime VOID: u8 = 3;

comptime RAX: u8 = 0;
comptime RCX: u8 = 1;
comptime RDX: u8 = 2;
comptime RBX: u8 = 3;
comptime RSP: u8 = 4;
comptime RBP: u8 = 5;
comptime RSI: u8 = 6;
comptime RDI: u8 = 7;
comptime R8: u8 = 8;
comptime R9: u8 = 9;
comptime R10: u8 = 10;
comptime R11: u8 = 11;
comptime R12: u8 = 12;
comptime R13: u8 = 13;
comptime R14: u8 = 14;
comptime R15: u8 = 15;

comptime XMM0: u8 = 0;
comptime XMM1: u8 = 1;
comptime XMM2: u8 = 2;
comptime XMM3: u8 = 3;

comptime ADDR_INDIRECT: u8 = 0;
comptime ADDR_DISP8: u8 = 1;
comptime ADDR_DISP32: u8 = 2;
comptime ADDR_REG: u8 = 3;

@os(WINDOWS) comptime ARGS = [[RCX, XMM0], [RDX, XMM1], [R8, XMM2], [R9, XMM3]];

struct Value {
    kind: u8;
    u64: u64;
    f64: f64;
    f32: f32;
}

struct ValueList {
    elements: &Value;
    length: usize;
    capacity: usize;
}
func push(buf: &ValueList, element: Value) {
    if (buf.length >= buf.capacity) {
        let newCap: usize = buf.capacity * 2;
        if (newCap == 0) newCap = 32;
        buf.elements = realloc(buf.elements, newCap * sizeof Value);
        assert(buf.elements != null, "Could not allocate memory in ValueList.push");
        buf.capacity = newCap;
    }
    buf.elements[buf.length] = element;
    buf.length = buf.length + 1;
}

func pushImm(bytes: &ByteBuffer, imm: u32) {
    let _bytes = &imm as &u8;
    for (let i: usize = 0; i < 4; i = i + 1) {
        push(bytes, _bytes[i]);
    }
}

func pushImm(bytes: &ByteBuffer, imm: u64) {
    let _bytes = &imm as &u8;
    for (let i: usize = 0; i < 8; i = i + 1) {
        push(bytes, _bytes[i]);
    }
}

func modRM(bytes: &ByteBuffer, addr: u8, opext: u8, reg: u8) {
    let byte = shiftLeft(addr as usize, 6) as u8;
    byte = byte | shiftLeft(opext as usize, 3) as u8;
    byte = byte | (reg % 8);
    push(bytes, byte);
}

func modPrefix(bytes: &ByteBuffer, r: u8) {
    let rex: u8 = '\x48' as u8;
    if (r >= 8) rex = rex | 1;
    push(bytes, rex);
}

func mov(to: u8, from: u8) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    modPrefix(&bytes, from);
    push(&bytes, '\x89');
    modRM(&bytes, ADDR_REG, from, to);
    return bytes;
}

func mov(r: u8, imm: u32) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    let opcode = (('\xb8' as u8) + (r % 8)) as char;
    push(&bytes, opcode);
    pushImm(&bytes, imm);
    return bytes;
}

func mov(r: u8, imm: u64) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    modPrefix(&bytes, r);
    let opcode = (('\xb8' as u8) + (r % 8)) as char;
    push(&bytes, opcode);
    pushImm(&bytes, imm);
    return bytes;
}

func push(reg: u8) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    push(&bytes, '\xFF');
    modRM(&bytes, ADDR_REG, 6, reg);
    return bytes;
}

func pop(reg: u8) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    push(&bytes, '\x8F');
    modRM(&bytes, ADDR_REG, 0, reg);
    return bytes;
}

func mov(r: u8, offset: u32, imm: u64) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    extend(&bytes, &mov(RBX, imm));
    assert(offset < 256, "only single byte offset for now");
    push(&bytes, '\x48', '\x89', '\x5C', '\x24');
    push(&bytes, offset as char);
    return bytes;
}

func mov(r: u8, imm: f32) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    extend(&bytes, &mov(RAX, *(&imm as &u32)));
    push(&bytes, '\x66', '\x0F', '\x6E');
    modRM(&bytes, ADDR_REG, r, RAX);
    return bytes;
}

func mov(r: u8, imm: f64) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    extend(&bytes, &mov(RAX, *(&imm as &u64)));
    push(&bytes, '\x66', '\x48', '\x0F', '\x6E');
    modRM(&bytes, ADDR_REG, r, RAX);
    return bytes;
}

func add(r: u8, imm: u32) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    modPrefix(&bytes, r);
    push(&bytes, '\x81');
    modRM(&bytes, ADDR_REG, 0, r);
    pushImm(&bytes, imm);
    return bytes;
}

func sub(r: u8, imm: u32) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    modPrefix(&bytes, r);
    push(&bytes, '\x81');
    modRM(&bytes, ADDR_REG, 5, r);
    pushImm(&bytes, imm);
    return bytes;
}

func call(r: u8) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    push(&bytes, '\xFF');
    modRM(&bytes, ADDR_REG, 2, r);
    return bytes;
}

func push(val: u64) -> ByteBuffer {
    let bytes: ByteBuffer = blank;
    extend(&bytes, &mov(RAX, val));
    push(&bytes, '\xFF');
    modRM(&bytes, ADDR_REG, 6, RAX);
    return bytes;
}

struct Function {
    run: func () -> u64;
    size: usize;
}

func free(fn: Function) {
    if (!VirtualFree(fn.run as Any, fn.size, 16384)) {
        printf("warning: Could not free function at %p\n", fn.run);
    }
}

func compileFunctionCall(fn: Any, ret: u8, args: &ValueList) -> Function {
    let buf: ByteBuffer = blank;
    // push(&buf, '\xf1');
    extend(&buf, &push(RBP));
    extend(&buf, &mov(RBP, RSP));
    for (let i: usize = 0; i < args.length; i = i + 1) {
        let v = args.elements[i];
        if (i >= 4) {
            if (v.kind == U64) {
                extend(&buf, &mov(RSP, 32 + 8 * (i - 4) as u32, v.u64));
            } else if (v.kind == F64) {
                extend(&buf, &mov(RSP, 32 + 8 * (i - 4) as u32, *(&v.f64 as &u64)));
            } else {
                unreachable("yo momma so fat, she caused my bits to flip");
            }
        } else {
            if (v.kind == U64) {
                extend(&buf, &mov(ARGS[i][U64 as usize], v.u64));
            } else if (v.kind == F64) {
                extend(&buf, &mov(ARGS[i][F64 as usize], v.f64));
            } else if (v.kind == F32) {
                extend(&buf, &mov(ARGS[i][F64 as usize], v.f32));
            } else {
                unreachable("yo momma so fat, she caused another bit flop");
            }
        }
    }
    if (args.length < 4) extend(&buf, &sub(RSP, 32));
    extend(&buf, &mov(RAX, fn as u64));
    extend(&buf, &call(RAX));
    if (args.length < 4) extend(&buf, &add(RSP, 32));
    extend(&buf, &pop(RBP));
    if (ret == U64) {
    } else if (ret == VOID) {
        extend(&buf, &mov(RAX, 420691337 as u32));
    } else if (ret == F64) {
        push(&buf, '\x66', '\x48', '\x0F', '\x7E');
        modRM(&buf, ADDR_REG, XMM0, RAX);
    } else if (ret == F32) {
        push(&buf, '\x66', '\x0F', '\x7E');
        modRM(&buf, ADDR_REG, XMM0, RAX);
    } else {
        unreachable("yo momma so fat, she can't even return properly");
    }
    push(&buf, '\xC3');
    @os(WINDOWS) {
        let code = VirtualAlloc(null, buf.length, 4096, 64);
        assert(code != null, "Could not alloc some bytes sadge thx Windows");
        memcpy(code, buf.elements, buf.length);
        free(buf.elements);
        return Function { run: code as func () -> u64, size: buf.length };
    }
    @os(LINUX) {
        unreachable("haven't implemented mmap yet");
    }
}

func bar(a: usize) -> usize {
    return a;
}

func foo(a: usize, b: f64, c: usize, d: usize, e: f64, f: usize, g: f64, h: usize) -> usize {
    assert(a == 69, "a is wrong");
    assert(b == 420, "b is wrong");
    assert(c == 1337, "c is wrong");
    assert(d == 24601, "d is wrong");
    assert(e == 12, "e is wrong");
    assert(f == 12309213, "f is wrong");
    assert(g == 2147483999, "g is wrong");
    *(h as &u8) = 69;
    return 42069;
}

func baz(a: usize, b: f64) -> usize {
    if (a != 19) {
        return 1;
    }
    if (b != 12) {
        return 2;
    }
    return 0;
}

func smolTest() {
    let args: ValueList = blank;
    let a: u64 = 69;
    push(&args, Value { kind: U64, u64: a });
    let fn = compileFunctionCall(bar as Any, U64, &args);
    let result = fn.run();
    assert(result == a, "Smol failure: result != a");
    printf("ayooooo\n");
    free(args.elements);
    free(fn);
}

func mediumTest() {
    let args: ValueList = blank;
    push(&args, Value { kind: U64, u64: 19 });
    push(&args, Value { kind: F64, f64: 12 });
    let fn = compileFunctionCall(baz as Any, U64, &args);
    let result = fn.run();
    assert(result == 0, "Medium failure: result != 0");
    printf("Ayooooo\n");
    free(args.elements);
    free(fn);
}

func bigTest() {
    let haystack: u8 = 0;
    let args: ValueList = blank;
    push(&args, Value { kind: U64, u64: 69 });
    push(&args, Value { kind: F64, f64: 420 });
    push(&args, Value { kind: U64, u64: 1337 });
    push(&args, Value { kind: U64, u64: 24601 });
    push(&args, Value { kind: F64, f64: 12 });
    push(&args, Value { kind: U64, u64: 12309213 });
    push(&args, Value { kind: F64, f64: 2147483999 });
    push(&args, Value { kind: U64, u64: &haystack as u64 });
    let fn = compileFunctionCall(foo as Any, U64, &args);
    let result = fn.run();
    assert(haystack == 69, "Haystack has been compromised");
    assert(result == 42069);
    printf("AYOOOOO\n");
    free(args.elements);
    free(fn);
}
func betterRaylib() {
    comptime FPS: u64 = 60;
    comptime PixelPerSecond: u32 = 300;
    comptime RW: f32 = 100;
    comptime RH: f32 = 100;
    comptime WIDTH: u64 = 800;
    comptime HEIGHT: u64 = 600;
    let handle = dlopen("./raylib/lib/raylib.dll", 0);
    assert(handle != null, "Could not load raylib.dll");
    let args: ValueList = blank;
    let title = "Hello from the JIT";
    push(&args, Value { kind: U64, u64: WIDTH });
    push(&args, Value { kind: U64, u64: HEIGHT });
    push(&args, Value { kind: U64, u64: title as u64 });
    let InitWindow = compileFunctionCall(getFunction(handle, "InitWindow"), VOID, &args);
    free(args.elements);
    args.length = 0;
    InitWindow.run();
    let WindowShouldClose = compileFunctionCall(getFunction(handle, "WindowShouldClose"), U64, &args);
    let BeginDrawing = compileFunctionCall(getFunction(handle, "BeginDrawing"), VOID, &args);
    let EndDrawing = compileFunctionCall(getFunction(handle, "EndDrawing"), VOID, &args);
    push(&args, Value { kind: U64, u64: FPS });
    let SetTargetFPS = compileFunctionCall(getFunction(handle, "SetTargetFPS"), VOID, &args);
    args.length = 0;
    SetTargetFPS.run();
    // 0x181818ff
    push(&args, Value { kind: U64, u64: 404232447 });
    let GetColor = compileFunctionCall(getFunction(handle, "GetColor"), U64, &args);
    args.length = 0;
    let c = GetColor.run();
    push(&args, Value { kind: U64, u64: c });
    let ClearBackground = compileFunctionCall(getFunction(handle, "ClearBackground"), VOID, &args);
    args.length = 0;
    let GetTime = compileFunctionCall(getFunction(handle, "GetTime"), F64, &args);
    let x: f32 = 0;
    let y: f32 = 0;
    let dx: f32 = 1;
    let dy: f32 = 1;
    while (WindowShouldClose.run() != 1) {
        BeginDrawing.run();
        ClearBackground.run();
        let _dt = GetTime.run();
        let dt = *(&_dt as &f64) as f32;
        push(&args, Value { kind: F32, f32: (50 * dt) % 360 });
        push(&args, Value { kind: F32, f32: 1 });
        push(&args, Value { kind: F32, f32: 1 });
        let ColorFromHSV = compileFunctionCall(getFunction(handle, "ColorFromHSV"), U64, &args);
        args.length = 0;
        let c: u64 = ColorFromHSV.run();
        push(&args, Value { kind: U64, u64: *(&[x, y] as &u64) });
        push(&args, Value { kind: U64, u64: *(&[RW, RH] as &u64) });
        push(&args, Value { kind: U64, u64: c });
        let DrawRectangleV = compileFunctionCall(getFunction(handle, "DrawRectangleV"), VOID, &args);
        args.length = 0;
        DrawRectangleV.run();
        EndDrawing.run();
        let nx = x + dx * PixelPerSecond as f32 / FPS as f32;
        let ny = y + dy * PixelPerSecond as f32 / FPS as f32;
        if (nx + RW >= WIDTH as f32 || nx <= 0) dx = dx * -1;
        else x = nx;
        if (ny + RH >= HEIGHT as f32 || ny <= 0) dy = dy * -1;
        else y = ny;
        free(DrawRectangleV);
        free(ColorFromHSV);
    }
    free(EndDrawing);
    free(GetColor);
    free(GetTime);
    free(ClearBackground);
    free(BeginDrawing);
    free(WindowShouldClose);
    free(SetTargetFPS);
    free(InitWindow);
    free(args.elements);
    assert(dlclose(handle) == 0, "Could not close raylib.dll");
}


func main(argc: i32, argv: &&char) -> i32 {
    let tests = [
        smolTest,
        mediumTest,
        bigTest,
        betterRaylib
    ];
    for (let i: usize = 0; i < 4; i = i + 1) {
        tests[i]();
    }
    return 0;
}

